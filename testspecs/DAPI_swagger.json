{
  "swagger": "2.0",
  "info": {
    "version": "2.55.3",
    "title": "Amadeus Digital Experience API",
    "description": "# API information\nThe document aims at describing the Amadeus Digital Experience API.\n\nThrough Digital API, an end user is able to search air offers and related services, add all necessary information to complete a booking, display a seatmap and select seats, add traveler preferences such as meal and finally finalize a booking (creation of an order). API also allows retrieving an existing order.\nSince the API is REST, operations are not flow related.\n\n## CRUD operations\nWe do our best to have all our URLs be [RESTful](http://en.wikipedia.org/wiki/Representational_state_transfer).\nEvery endpoint (URL) may support one of five different http verbs. GET requests fetch information about an object, POST requests create objects.\nPATCH [JSON Merge Patch](https://tools.ietf.org/html/rfc7396) requests perform partial updates.\n\n## Structure\n### The envelope\nEvery response is contained by an envelope. That is, each response has a predictable set of keys with which you can expect to interact:\n```json\n{\n    \"warnings\": [\n        ...\n    ],\n    \"data\": {\n        ...\n    },\n    \"dictionaries\": {\n        ...\n    },\n    \"errors\": [\n        ...\n    ]\n}\n```\n#### ERRORS\nError messages corresponding to functional blocking issues encountered when processing an operation.\nWhen at least one message has a level 'error' nothing has been processed so no 'data' are returned.\nIn this case the HTTP status become 200 for POST (instead of 201) and DELETE (instead of 204).\n\n#### WARNINGS\nWarning messages corresponding to non blocking issues encountered when processing an operation.\n\n#### DATA\nThe data key is the meat of the response. It contains all information regarding the resource requested.\n\n#### DICTIONARIES\nEach dictionary contains:\n- localized data : it's possible to request for a specific code (e.g. location code) the translation in the language code specified as query parameter. The translation applies as well to the related information: in case of location code, type of location (airport or city), corresponding city (for airport location), state, country, etc.)\n- dictionarized data : information used on different parts of the message can be defined once and referenced via an id. It that case, the id makes the connection between dictionary and data information\nDictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).\n\n### Example of request/response\nWhen triggering an API operation it is interesting to evaluate the response (or the data model corresponding to the input body in case of POST).\n```\nGET /carts/{cartId}/travelers/{travelerId} HTTP/1.1\nAccept: application/json\n```\n\nMultiple errors can occur in response to a single request. The list of error messages is provided by the server:\n```json\nHTTP/1.1 400 Bad Request\nContent-Type: application/json\n{\n  \"errors\": [\n    {\n      \"code\": \"04926\",\n      \"source\": { \"pointer\": \"/names/0/lastName\" },\n      \"title\": \"INVALID DATA RECEIVED\"\n      \"detail\": \"must match \\\"^[A-Za-zÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬-ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¿][A-Za-zÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬-ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¿ -.]{1,69}$\\\"\n    },\n    {\n      \"code\": \"36986\",\n      \"source\": { \"pointer\": \"/0/dateOfBirth\" },\n      \"detail\": \"Date of birth '2018-07-01' should be in the past\",\n      \"title\": \"INVALID DATA RECEIVED\"\n    },\n  ]\n}\n```\nNote: example added for illustration only.\n\nA few considerations on the error message structure:\n- The title communicates the type of problem encountered.\n- The code refers to an application-specific code representing the type of problem encountered. Code and title have a similar behaviour, since they communicate which is the problem type. However, it is suggested to rely on the code as a unique identifier.\n- The detail is used to provide information specific to this occurrence of the problem.\n\nMessage may use source to point to the top-level of the document (\"\").\nThe source member can also be used to indicate that the error originated from a problem with a URI query parameter (parameter field used instead of pointer in that case).\n\nStandard [HTTP response status codes](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) apply. As such they are not all mentioned below.\n\n## Top resources\n### Cart\nThe central resource is the `Cart` (shopping cart) used at shopping time to prepare a journey (shopping, booking and pricing). A `Cart` contains one `AirOffer` and related `Traveler`s, `Service`s, `Seat`s, `FrequentFlyerCard`s,  `Contact`s. At checkout time, an `Order` is created based on content selected from the `Cart`.\n\n### AirCalendar\n`Air Calendar` provides the best price per day based on input parameters.\n\n### AirBound\n`Air Bound` provides the bound-by-bound shopping proposal based on input parameters.\n### AirOffer\nAn `Air Offer` is the result of a shopping proposal. It is a collection of `OfferItem`s, each offer item containing flights.\n\n### Service\nThe ``Service`` resource allows to access the list of free and/or chargeable services.\n\n### Seatmap\n``Seatmap`` refers to display of the air seat map, allowing the end user to identify the seat to be booked for free or at a charge.\n\n### Order\nAn ``Order`` corresponds to a reservation record (Amadeus PNRs). The order can contain flights, services and seats, as well as travel documents (E-Tickets and/or EMDs) in case the order has been paid and related tickets issued.\n\n### Payment Method\nA `Payment Method` refers to a payment method that be used to pay an order. The following payment methods are supported by DAPI: Payment cards, External  payment, Miles payment and Alternative Payment Method.\n\n## Secondary resources (main ones)\n### Traveler\nA ``Traveler`` is an individual involved in the booking and taking part in a journey.\n### Seat\nA ``Seat`` refers to the seat that the end user can select as part of the booking.\n### Frequent Flyer\n``Frequent Flyer`` contains frequent flyer cards either to accrue miles or redeem miles (only accrual supported initially).\n### Contact\n``Contact`` refers to emails, phone numbers and addresses.\n### Travel Document\nA ``Travel Document`` refers to the tickets (E-Tickets and/or EMDs) issued for flights or services.\n### Payment Record\nA `Payment Record` contains the details of the payment transaction for an order. It includes the payment method used for the order payment, as well additional information such as the approval code for a Credit Card payment.\n## Limitations\n- Only air related content booking is supported.\n- Only one order is created at a time from the cart.\n- A cart can only contain one single airOffer.\n\n## Miscellaneous\n### Temporary id (tid)\nA temporary id (``tid``) can be used to:\n- identify an object in the request of a POST operation when the id of the object is not known yet.\n\n- identify an object in the response of a PUT operation when the id of the object is changing.\n\nIn all cases, a tid is only valid for the time of the transaction\n\n\n### Output filtering\nJSON output can be filtered using ``-fields`` and ``fields`` query parameters, followed by the fully qualified name of the attribute to filter/keep.\n\nOptionally the ``keepRequiredFields`` boolean query parameter can be used to avoid filtering required fields out.\n\nExamples:\n```\nGET /carts/{cartId}?-fields=data.travelers\n```\nwill filter all travelers out of the response\n```\nGET /carts/{cartId}?fields=data.travelers.age\n```\nwill keep only age of the travelers in response\n\nAny questions, suggestions or feedbacks, thank you for contacting the DxAPI team\n\n### Traceability token\nFor better traceability of requests, a traceability token should be added to  every API call as a HTTP header tag: ``Ama-Client-Ref``.\nThis allows a correlation of logs between the client application and the API, enabling:\n- for the airline or third party developer to provide the session id of their  own application in case of questions/issues (in addition to the usual mandatory fields)\n- for the Amadeus API developer to extract faster all logs associated to that session and  get a better and faster understanding of the API implementation of the client application\n\nThe `Ama-Client-Ref`` should have less than 64 characters. Additional characters are ignored.\n\n    \nThe recommended format for this token is composed of both a session part and  a request part resulting in a unique ID for a single request.\nThis recommended format is as following: ``${SESSION_ID}:${REQUEST_ID}``.\nWhere:\n- ``SESSION_ID``: is a client-side generated token identifying the client-side user session. For example:    \n\n  - ``123e4567-e89b-12d3-a456-426655440000`` if the application uses \n  [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier) \n  in [RFC 4122](https://tools.ietf.org/html/rfc4122)\n  \n  - ``kGAMfG5by8NaHqZxkQ3oDCpQ6oszEwaIusvbE-6S9x59qZxD_pKH`` if the \n  application is a J2EE application using a ``JSESSIONID`` as a cookie\n\n\n- ``REQUEST_ID`` is a client-side request id within the client-side user session matching the ``[a-zA-Z0-9]{1,10}`` format.\n\n  - For example: ``1``, ``42``, ``5fa2``, ``Px2z5``, ...\n\n  - There is no notion of order between two ``REQUEST_ID``\n\n  - ``REQUEST_ID`` must be unique within a session.\n\n\nExamples:\n\n- Request ``2fc0`` within session ``123e4567-e89b-12d3-a456-426655440000`` traceability token:\n ``Ama-Client-Ref: 123e4567-e89b-12d3-a456-426655440000:2fc0``\n  \n\n- Request ``7ba19e`` within session ``123e4567-e89b-12d3-a456-426655440000`` traceability token:\n ``Ama-Client-Ref: 123e4567-e89b-12d3-a456-426655440000:7ba19e``\n\n- Request ``7ba19e`` within JSESSIONID session ``kGAMfG5by8NaHqZxkQ3oDCpQ6oszEwaIusvbE-6S9x59qZxD_pKH`` traceability token:\n ``Ama-Client-Ref: kGAMfG5by8NaHqZxkQ3oDCpQ6oszEwaIusvbE-6S9x59qZxD_pKH:7ba19e``\n"
  },
  "securityDefinitions": {
    "basicAuth": {
      "type": "basic",
      "description": "HTTP Basic Authentication. Works over `HTTP` and `HTTPS`"
    }
  },
  "host": "test.airlines.api.amadeus.com",
  "basePath": "/v2",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "tags": [
    {
      "name": "AirExchange",
      "description": "Combination of flights that can be exchanged against a booked trip",
      "x-api-type": "DAPI"
    },
    {
      "name": "AirExchangeCalendar",
      "description": "Best flight per day information to be used in case of flights exchange against a booked trip",
      "x-api-type": "DAPI"
    },
    {
      "name": "AirInspiration",
      "description": "Cheapest price per calendar day for flights based on request parameters",
      "x-api-type": "DAPI"
    },
    {
      "name": "AirOffer",
      "description": "Combination of flights that could be used for booking a trip",
      "x-api-type": "DAPI"
    },
    {
      "name": "AirBound",
      "description": "Combination of flights for requested bound based on request parameters, that can be used for booking a trip",
      "x-api-type": "DAPI"
    },
    {
      "name": "FareConditions",
      "description": "Air and baggages fare conditions",
      "x-api-type": "DAPI"
    },
    {
      "name": "Cart",
      "description": "Shopping cart, to be checked-out for an order creation",
      "x-api-type": "DAPI"
    },
    {
      "name": "AirCalendar",
      "description": "Cheapest price per calendar day for flights based on request parameters",
      "x-api-type": "DAPI"
    },
    {
      "name": "Service",
      "description": "Either free or chargeable services",
      "x-api-type": "DAPI"
    },
    {
      "name": "Order",
      "description": "Operations available on the order: creation, retrieve, update, etc.",
      "x-api-type": "DAPI"
    },
    {
      "name": "CarOffer",
      "description": "Combination of cars to be associated to a flight",
      "x-api-type": "DAPI"
    },
    {
      "name": "Communication",
      "description": "Service helping an end user to perform some standalone operations like email trigger",
      "x-api-type": "DAPI"
    },
    {
      "name": "FlightInformation",
      "description": "Service helping an end user to get the flight information",
      "x-api-type": "DAPI"
    },
    {
      "name": "HotelShopping",
      "description": "Combination of hotel offers that could be used when booking a trip",
      "x-api-type": "DAPI"
    },
    {
      "name": "InsuranceOffer",
      "description": "Combination of insurance offers that could be used for booking a trip",
      "x-api-type": "DAPI"
    },
    {
      "name": "Teaser",
      "description": "Teaser to promote Third Party Contents such as cars, hotels, insurances, etc.",
      "x-api-type": "DAPI"
    },
    {
      "name": "Payment",
      "description": "Payment operations",
      "x-api-type": "DAPI"
    },
    {
      "name": "Seatmap",
      "description": "Service helping an end user choose its seat in a plane",
      "x-api-type": "DAPI"
    },
    {
      "name": "AlternativeOffer",
      "description": "Search and propose alternative offers for a given bound, which has been disrupted",
      "x-api-type": "DAPI"
    },
    {
      "name": "CheckIn",
      "description": "Checkin passengers into a flight",
      "x-api-type": "DAPI"
    },
    {
      "name": "Upgrades",
      "description": "Retrieve possible upgrade options for this journey",
      "x-api-type": "DAPI"
    },
    {
      "name": "Utilities",
      "description": "Service helping an end user to perform some standalone operations like currency conversion",
      "x-api-type": "DAPI"
    },
    {
      "name": "Vouchers",
      "description": "Vouchers management, from creation to usage or refund.",
      "x-api-type": "DAPI"
    },
    {
      "name": "CustomerInsights",
      "description": "Service that retrieves and manages Customer insights information",
      "x-api-type": "DAPI"
    },
    {
      "name": "FrequentFlyerProfile",
      "description": "Service that retrieves Profile information for a given frequent flyer card number",
      "x-api-type": "DAPI"
    },
    {
      "name": "ReferenceData",
      "description": "Service that retrieves and manage referencial data.",
      "x-api-type": "DAPI"
    }
  ],
  "parameters": {
    "lastName": {
      "name": "lastName",
      "description": "Last name of one traveler part of the cart or the order",
      "in": "query",
      "required": false,
      "type": "string",
      "pattern": "^[A-Za-z\\u00C0-\\u1FFF\\u3040-\\uD7AF][A-Za-z\\u00C0-\\u1FFF\\u3040-\\uD7AF\\u2019 \\-.]{0,69}$",
      "x-risk-personal-data-field": "PASSENGER_NAME"
    },
    "firstName": {
      "name": "firstName",
      "description": "First name of one traveler part of the order",
      "in": "query",
      "required": false,
      "type": "string",
      "pattern": "^[A-Za-z\\u00C0-\\u1FFF\\u3040-\\uD7AF][A-Za-z\\u00C0-\\u1FFF\\u3040-\\uD7AF\\u2019 \\-.]{0,69}$",
      "x-risk-personal-data-field": "PASSENGER_NAME"
    },
    "lang": {
      "name": "lang",
      "description": "Code used for data localization.",
      "required": false,
      "in": "query",
      "type": "string",
      "pattern": "[a-zA-Z0-9-]{2,5}"
    },
    "airOfferId": {
      "name": "airOfferId",
      "description": "Identifier of an offer",
      "required": true,
      "in": "path",
      "type": "string",
      "pattern": "[a-zA-Z0-9-]{1,120}",
      "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
    },
    "cartId": {
      "name": "cartId",
      "description": "Identifier of the cart",
      "required": true,
      "in": "path",
      "type": "string",
      "pattern": "[a-zA-Z0-9]{16}",
      "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
    },
    "includeWaitlist": {
      "name": "includeWaitlist",
      "description": "This parameter is used during the cart revalidation (refresh = true) to allow the offers with waitlisted segments being considered as available offers. If not activated (includeWaitlist = false), any offer with waitlisted segment will be considered as not available and will be flagged as such in the shopping cart with lastRefreshStatus = invalid when shopping cart is revalidated.",
      "required": false,
      "in": "query",
      "type": "boolean",
      "default": false
    },
    "optionalCartId": {
      "name": "cartId",
      "description": "Identifier of the cart",
      "required": false,
      "in": "query",
      "type": "string",
      "pattern": "[a-zA-Z0-9]{16}",
      "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
    },
    "optionalOrderId": {
      "name": "orderId",
      "description": "Identifier of an order (Record Locator)",
      "required": false,
      "in": "query",
      "type": "string",
      "pattern": "[a-zA-Z0-9]{6}",
      "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
    },
    "optionalOrderChangeId": {
      "name": "orderChangeId",
      "description": "Identifier of an order change sub-resource",
      "required": false,
      "in": "query",
      "type": "string",
      "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
    },
    "optionalAirOfferId": {
      "name": "airOfferId",
      "description": "Identifier of an offer",
      "required": false,
      "in": "query",
      "type": "string",
      "pattern": "[a-zA-Z0-9-]{1,120}",
      "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
    },
    "optionalTravelDocumentId": {
      "name": "travelDocumentId",
      "description": "Identifier of a travel document (flight or service related).",
      "required": false,
      "in": "query",
      "type": "string",
      "pattern": "[0-9]{1,20}",
      "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
    },
    "optionalTravelerIds": {
      "name": "travelerIds",
      "description": "List of traveler identifiers",
      "required": false,
      "in": "query",
      "type": "array",
      "items": {
        "type": "string",
        "pattern": "[a-zA-Z0-9-]{1,20}"
      },
      "collectionFormat": "csv",
      "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
    },
    "optionalCategories": {
      "name": "categories",
      "description": "List of ATPCO fare categories",
      "required": false,
      "in": "query",
      "type": "array",
      "items": {
        "type": "string",
        "enum": [
          "advancePurchase",
          "minimumStay",
          "maximumStay",
          "change",
          "refund",
          "salesRestrictions",
          "flightApplication",
          "childDiscounts",
          "tourConductor",
          "agentsDiscounts",
          "otherDiscounts",
          "stopovers",
          "transfers",
          "endorsement",
          "combinability",
          "higherIntermediatePoints",
          "miscellaneous",
          "seasonality",
          "blackouts",
          "dayTime",
          "travelRestrictions",
          "penalties",
          "surcharges",
          "eligibility",
          "voluntaryRefunds",
          "reservationsAndTicketing",
          "accompaniedTravel",
          "groups",
          "tours",
          "fareByRule",
          "visitAnotherCountry",
          "negotiatedFares",
          "ruleApplication"
        ]
      },
      "collectionFormat": "csv"
    },
    "departureDateTime": {
      "name": "departureDateTime",
      "description": "Departure date and time of the outbound (first flight) in [ISO 8601](http://www.w3.org/TR/NOTE-datetime). It can be used as input parameter or as attribute of the output response: - in case of input parameter it specifies date and hours of the search (eg. 2027-11-10T10:21:00); - when used as output field it specifies date, hours and timezone of the result (eg. 2027-02-10T06:12:00+02:00). Timezone is always referring to the location associated (i.e. departure airport).\n",
      "required": true,
      "type": "string",
      "format": "date-time",
      "in": "query"
    },
    "originLocationCode": {
      "name": "originLocationCode",
      "description": "Departure location code of outbound (city or airport code)",
      "required": true,
      "type": "string",
      "pattern": "[a-zA-Z]{3}",
      "in": "query",
      "x-dictionary-name": "location",
      "x-field-name": "originLocation",
      "x-field-type": "LocationDictionaryItem"
    },
    "destinationLocationCode": {
      "name": "destinationLocationCode",
      "description": "Destination location code (city or airport code) for the outbound, in case of a round trip this is also the departure location code of second bound",
      "required": true,
      "type": "string",
      "pattern": "[a-zA-Z]{3}",
      "in": "query",
      "x-dictionary-name": "location",
      "x-field-name": "destinationLocation",
      "x-field-type": "LocationDictionaryItem"
    },
    "returnDateTime": {
      "name": "returnDateTime",
      "description": "Return date and time for a return trip or continuation of an open-jaw, in [ISO 8601](http://www.w3.org/TR/NOTE-datetime). It might be used as input parameter or as attribute of the output response: - in case of input parameter it specifies date and hours of the search (eg. 2027-11-10T10:21:00); - when used as output field it specifies date, hours and timezone of the result (eg. 2027-02-10T06:12:00+02:00). Timezone is always referring to the location associated (i.e. arrival airport).\n",
      "required": false,
      "type": "string",
      "format": "date-time",
      "in": "query"
    },
    "flexibility": {
      "name": "flexibility",
      "description": "Flexibility in days for the outbound (first flight) and inbound (return). Flexibility = 5 means +/- 5 days. If not specified the default value of +/-3 days is taken into account. E.g departure date 13NOV, return date 23NOV and flexibility 3 : the response will contain travel solutions with [10NOV-16NOV] for departure range and [20NOV-26NOV] for arrival range.",
      "required": false,
      "type": "integer",
      "in": "query",
      "minimum": 1
    },
    "commercialFareFamilies": {
      "name": "commercialFareFamilies",
      "description": "Commercial fare families that apply to every bound of the itinerary.",
      "required": false,
      "type": "array",
      "items": {
        "type": "string",
        "pattern": "[a-zA-Z0-9 -]{1,35}"
      },
      "in": "query",
      "collectionFormat": "csv"
    },
    "maxPrice": {
      "name": "maxPrice",
      "description": "Maximum total price excluding fees of an offer to be returned as a whole number. Example: if the target maximum price is 140.00, the value to be provided should be 140. If used, parameter currencyCode is mandatory",
      "required": false,
      "in": "query",
      "type": "integer",
      "minimum": 1
    },
    "travelers": {
      "name": "travelers",
      "description": "It allows to define quantity and type of travelers.\nThe traveler type corresponds to a [Passenger type code](http://api.dev.amadeus.net/api/Development/common/codelist/PNR_PassengerType.htm)\n'INF' corresponds to an infant without seat automatically associated to the first eligible traveler provided in the list.\nExample 1: '3ADT,1INS' corresponds to a request for three adults and one infant with seat\nExample 2: '1ADT,2YTH,1CHD,2INF' corresponds to a request for 1 adult, 2 youths, 2 children and 2 infants (associated respectively to one adult and one youth)\n",
      "required": false,
      "type": "array",
      "items": {
        "type": "string",
        "pattern": "[1-9]{1}[a-zA-Z0-9]{2,3}"
      },
      "in": "query",
      "collectionFormat": "csv",
      "maxItems": 6,
      "x-risk-personal-data-field": "PASSENGER_TYPE"
    },
    "departureTimeWindow": {
      "name": "departureTimeWindow",
      "description": "Time window in hours for the outbound (first flight). E.g: departureTimeWindow=2 means from 2 hours before, until 2 hours after the departure time. The value 0 is considered as there is no time window.",
      "required": false,
      "type": "integer",
      "in": "query",
      "minimum": 0,
      "maximum": 12
    },
    "returnTimeWindow": {
      "name": "returnTimeWindow",
      "description": "Time window for the return trip or continuation of an open-jaw. E.g: A returnTimeWindow=2 means from 2 hours before, until 2 hours after the return time. The value 0 is considered as there is no time window.",
      "required": false,
      "type": "integer",
      "in": "query",
      "minimum": 0,
      "maximum": 12
    },
    "alternateOriginLocationCode": {
      "name": "alternateOriginLocationCode",
      "description": "In case of open jaw, origin location code for return bound (city or airport code)",
      "required": false,
      "type": "string",
      "pattern": "[a-zA-Z]{3}",
      "in": "query",
      "x-dictionary-name": "location",
      "x-field-name": "alternateOriginLocation",
      "x-field-type": "LocationDictionaryItem"
    },
    "alternateDestinationLocationCode": {
      "name": "alternateDestinationLocationCode",
      "description": "In case of open jaw, destination location for return bound (city or airport code)",
      "required": false,
      "type": "string",
      "pattern": "[a-zA-Z]{3}",
      "in": "query",
      "x-dictionary-name": "location",
      "x-field-name": "alternateDestinationLocation",
      "x-field-type": "LocationDictionaryItem"
    },
    "directFlights": {
      "name": "directFlights",
      "description": "Search only for direct (without connections) flight proposals.",
      "required": false,
      "in": "query",
      "type": "boolean",
      "default": false
    },
    "promotionCode": {
      "name": "promotionCode",
      "in": "query",
      "required": false,
      "description": "Value of the promotionCode.\nNote: If no promotionCode provided in input and if promotionAirlineCode provided in input, then the services catalogue / the seatmap will be sent without applying any promocode.",
      "type": "string",
      "pattern": "^[A-Z0-9\\-\\_]{2,15}$"
    },
    "promotionAirlineCode": {
      "name": "promotionAirlineCode",
      "in": "query",
      "required": false,
      "description": "Code of the airline which is owner of the promotionCode.\nNote: If promotionCode provided in input and if no promotionAirlineCode provided in input, then airline used for the promocode computation is the one of the calling UI.",
      "type": "string",
      "pattern": "[A-Z0-9]{2,3}"
    },
    "showUnavailableEntries": {
      "name": "showUnavailableEntries",
      "in": "query",
      "required": false,
      "description": "This is to request flight solutions that are unavailable due to various reasons, along with the available ones",
      "type": "boolean",
      "default": false
    },
    "max": {
      "name": "max",
      "description": "Maximum number of items to return. By default, all items are returned.",
      "required": false,
      "type": "integer",
      "in": "query",
      "minimum": 1
    },
    "showSoldOut": {
      "name": "showSoldOut",
      "in": "query",
      "required": false,
      "description": "This is to request sold out flights along with the available ones",
      "type": "boolean",
      "default": false
    },
    "refreshAncillaries": {
      "name": "refreshAncillaries",
      "description": "Enable/disable the repricing for all services and seats stored in a cart",
      "in": "query",
      "required": false,
      "type": "boolean"
    },
    "serviceId": {
      "name": "serviceId",
      "description": "Identifier of a service, chargeable or free",
      "required": true,
      "in": "path",
      "type": "string",
      "pattern": "[a-zA-Z0-9-]{1,50}",
      "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
    },
    "orderId": {
      "name": "orderId",
      "description": "Identifier of an order (Record Locator)",
      "required": true,
      "in": "path",
      "type": "string",
      "pattern": "[a-zA-Z0-9]{6}",
      "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
    },
    "seatId": {
      "name": "seatId",
      "description": "Identifier of a seat, chargeable or free",
      "required": true,
      "in": "path",
      "type": "string",
      "pattern": "[a-zA-Z0-9-:]{1,50}",
      "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
    },
    "serviceTags": {
      "name": "tags",
      "description": "To request services with specific tags as filed by the Airline. For example: Special Need, Meal Preference, Seat Preference. By default all associated tags are returned",
      "required": false,
      "in": "query",
      "type": "array",
      "items": {
        "type": "string",
        "pattern": "[a-zA-Z0-9]+"
      },
      "collectionFormat": "csv"
    },
    "catalogueType": {
      "name": "catalogueType",
      "description": "To request chargeable, free services or all the services. Default behavior is configurable: chargeable, free, all",
      "required": false,
      "in": "query",
      "type": "string",
      "enum": [
        "chargeable",
        "free",
        "all"
      ]
    },
    "enableBundleDiscountRules": {
      "name": "enableBundleDiscountRules",
      "in": "query",
      "required": false,
      "description": "If set to true, the catalogue will send to UI the defined Bundle rules.",
      "type": "boolean"
    },
    "showMilesPrice": {
      "name": "showMilesPrice",
      "description": "Enables the award converter feature that converts a currency fare paid in cash into a fare paid in cash and miles.",
      "required": false,
      "default": false,
      "in": "query",
      "type": "boolean"
    },
    "optionalFrequentFlyerCardNumber": {
      "name": "frequentFlyerCardNumber",
      "description": "Frequent flyer card number",
      "required": false,
      "in": "query",
      "type": "string",
      "pattern": "[a-zA-Z0-9]{2,20}",
      "x-risk-personal-data-field": "FREQUENT_FLYER_NUMBER"
    },
    "optionalCompanyCode": {
      "name": "companyCode",
      "description": "Code of the company emitting the card",
      "required": false,
      "in": "query",
      "type": "string",
      "pattern": "[A-Z0-9]{2,3}"
    },
    "optionalFrequentFlyerCardId": {
      "name": "frequentFlyerCardId",
      "description": "Identifier of a frequent flyer card, whatever its usage [redeem miles, accrue miles...]",
      "required": false,
      "in": "query",
      "type": "string",
      "pattern": "[a-zA-Z0-9-:]{1,20}",
      "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
    },
    "optionalFlightIds": {
      "name": "flightIds",
      "description": "List of flight identifiers",
      "required": false,
      "in": "query",
      "type": "array",
      "items": {
        "type": "string",
        "pattern": "[a-zA-Z0-9-]{1,20}"
      },
      "collectionFormat": "csv",
      "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
    },
    "queryOrderId": {
      "name": "orderId",
      "description": "Identifier of an order (Record Locator)",
      "required": true,
      "in": "query",
      "type": "string",
      "pattern": "[a-zA-Z0-9]{6}",
      "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
    },
    "showOrderEligibilities": {
      "name": "showOrderEligibilities",
      "description": "If true, eligibilities (flight change, cancel, etc.) for this order will be included in the response.",
      "required": false,
      "default": false,
      "in": "query",
      "type": "boolean"
    },
    "includeMoreOrderDetails": {
      "name": "include",
      "description": "Additional data (like baggagePolicies) for this order will be included in the response.",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "queryTravelDocumentId": {
      "name": "travelDocumentId",
      "description": "Identifier of a travel document (flight or service related)",
      "required": true,
      "in": "query",
      "type": "string",
      "pattern": "[0-9]{1,20}",
      "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
    },
    "orderEligibilitiesTargetAction": {
      "name": "targetAction",
      "description": "Action for which eligibility is required (e.g. 'cancelAndRefund')",
      "required": true,
      "in": "query",
      "type": "array",
      "items": {
        "type": "string",
        "enum": [
          "cancelAndRefund"
        ]
      },
      "collectionFormat": "csv"
    },
    "carOfferId": {
      "name": "carOfferId",
      "description": "Identifier of an offer",
      "required": true,
      "in": "path",
      "type": "string",
      "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
    },
    "providerCodes": {
      "name": "providerCodes",
      "description": "Amadeus car provider codes, comma-separated. up to 99 car provider codes can be filled in. If not filled, the request is sent to all providers.",
      "required": false,
      "type": "array",
      "in": "query",
      "items": {
        "type": "string",
        "pattern": "[a-zA-Z]{2}"
      },
      "collectionFormat": "csv",
      "maxItems": 99
    },
    "pickUpDateTime": {
      "name": "pickUpDateTime",
      "description": "Date time to pick-up the car in [ISO 8601](http://www.w3.org/TR/NOTE-datetime). Example: 2027-11-10T10:00:00. Reference time is local time.",
      "required": true,
      "in": "query",
      "type": "string",
      "format": "date-time"
    },
    "dropOffDateTime": {
      "name": "dropOffDateTime",
      "description": "Date time to pick-up the car in [ISO 8601](http://www.w3.org/TR/NOTE-datetime). Example: 2027-12-10T10:00:00. Reference time is local time.",
      "required": true,
      "in": "query",
      "type": "string",
      "format": "date-time"
    },
    "pickUpLocationCode": {
      "name": "pickUpLocationCode",
      "description": "Car pick-up location IATA code. http://www.iata.org/publications/Pages/code-search.aspx. e.g. MUC Parameter is mandatory for some providers",
      "required": false,
      "in": "query",
      "type": "string",
      "pattern": "[a-zA-Z]{3}"
    },
    "dropOffLocationCode": {
      "name": "dropOffLocationCode",
      "description": "Car drop-off location IATA code. http://www.iata.org/publications/Pages/code-search.aspx. e.g. MUC",
      "required": false,
      "in": "query",
      "type": "string",
      "pattern": "[a-zA-Z]{3}"
    },
    "providerPickUpLocationCodes": {
      "name": "providerPickUpLocationCodes",
      "description": "Dedicated provider pickup location overriding the pickUpLocationCode and the pickUp[Latitude|Longitude] for the specified providers with the following structures: {AMA}{providerCode}{airport/cityCode}{vicinityCode}{vicinityNumber} e.g.: AMA|ZE|NCE|T|01 where providerCode=ZE, airport/cityCode= NCE, vicinityCode=T and vicinityNumber=01 or {CPY}{providerCode}{companylocationCode} e.g.: CPY|ZE|absd123 where providerCode=ZE and companyLocationCode= absd123 For more details about the vicinity code: [http://www.amadeus.com/web/binaries/1332961096825/blobheader%3Dapplication/pdf%26blobheadern] Parameter is not supported by all providers\n",
      "required": false,
      "in": "query",
      "type": "array",
      "items": {
        "type": "string",
        "pattern": "[a-zA-Z0-9]{9,13}"
      },
      "collectionFormat": "csv"
    },
    "providerDropOffLocationCodes": {
      "name": "providerDropOffLocationCodes",
      "description": "Dedicated provider dropoff location overriding the dropOffLocationCode for the specified providers with the following structure: {AMA}{providerCode}{airport/cityCode}{vicinityCode}{vicinityNumber} Example: AMA|ZE|NCE|T|01 where providerCode=ZE, airport/cityCode= NCE, vicinityCode=T and vicinityNumber=01 or {CPY}{providerCode}{companylocationCode} e.g.: CPY|ZE|absd123 where providerCode=ZE and companyLocationCode= absd123 For more details about the vicinity code: [http://www.amadeus.com/web/binaries/1332961096825/blobheader%3Dapplication/pdf%26blobheadern] Parameter is not supported by all providers",
      "required": false,
      "in": "query",
      "type": "array",
      "items": {
        "type": "string",
        "pattern": "[a-zA-Z0-9]{9,13}"
      },
      "collectionFormat": "csv"
    },
    "acrissCodes": {
      "name": "acrissCodes",
      "description": "Car ACRISS codes to filter the results. Up to 5 comma-separated ACRISS codes can be specified and wildcards can be used e.g. *CMR,CD**. Please see here for more details [http://www.acriss.org/car-codes.asp]",
      "required": false,
      "type": "array",
      "in": "query",
      "items": {
        "type": "string",
        "pattern": "[a-zA-Z*]{4}"
      },
      "collectionFormat": "csv",
      "maxItems": 5
    },
    "acrissCodesExclusion": {
      "name": "acrissCodesExclusion",
      "description": "This should be used to exclude all the acriss codes values from the response. true: exclude, false: include Parameter is not supported by all providers",
      "required": false,
      "in": "query",
      "type": "boolean",
      "default": false
    },
    "vehicleImageSizes": {
      "name": "vehicleImageSizes",
      "description": "If set, this attribute overrides the default value of the image size. This is requested as a size preference for the car images returned in the response. Up to 2 comma-separated sizes can be specified. A warning will be returned if the images are not available in the requested Amadeus standard size. List of Amadeus standard image sizes: 0: width= 70px height= 40px 1: width= 90px height= 50px 2: width= 110px height= 70px 3: width= 140px height= 80px 4: width= 180px height= 110px 5: width= 230px height= 140px 6: width= 290px height= 170px 7: width= 370px height= 220px 8: width= 470px height= 280px 9: width= 600px height= 350px Parameter is not supported by all providers\n",
      "required": false,
      "in": "query",
      "type": "array",
      "items": {
        "type": "string",
        "pattern": "[0-9]{1}"
      },
      "maxItems": 2,
      "collectionFormat": "csv"
    },
    "providerLogoSizes": {
      "name": "providerLogoSizes",
      "description": "Request the provider's logo to be returned. A warning will be returned if the images are not available in the requested Amadeus standard size. List of Amadeus standard image sizes: 0: width= 70px height= 40px 1: width= 90px height= 50px 2: width= 110px height= 70px 3: width= 140px height= 80px 4: width= 180px height= 110px 5: width= 230px height= 140px 6: width= 290px height= 170px 7: width= 370px height= 220px 8: width= 470px height= 280px 9: width= 600px height= 350px Parameter is not supported by all providers\n",
      "required": false,
      "in": "query",
      "type": "array",
      "items": {
        "type": "string",
        "pattern": "[0-9]{1}"
      },
      "maxItems": 2,
      "collectionFormat": "csv"
    },
    "driverAge": {
      "name": "driverAge",
      "description": "The age of the driver at departure date. If not provided, the returned rates will not take into account the drivers age. Parameter is mandatory for some providers",
      "required": false,
      "in": "query",
      "type": "integer",
      "x-risk-personal-data-field": "DATE_OF_BIRTH"
    },
    "rateClass": {
      "name": "rateClass",
      "description": "This defines the desired rate class. leisure: leisure rates, corporate: corporate rates, ALL: all rates. Please check with the car provider to get more details about the leisure vs corporate rates",
      "required": false,
      "in": "query",
      "type": "string",
      "enum": [
        "leisure",
        "corporate",
        "all"
      ],
      "default": "all"
    },
    "currencyCode": {
      "name": "currencyCode",
      "description": "This defines the desired currency. For points (or miles) the code associated is MIL. In the context of Cars operations, if not specified, the used currency is the one of the pick up location (ISO currency code; http://www.iso.org/iso/home/standards/currency_codes.htm). ",
      "required": false,
      "in": "query",
      "type": "string",
      "pattern": "[A-Z]{3}",
      "x-dictionary-name": "currency",
      "x-field-name": "currency",
      "x-field-type": "CurrencyDictionaryItem"
    },
    "carLoyaltyNumbers": {
      "name": "carLoyaltyNumbers",
      "description": "Car Loyalty number with the following structure {providerCode}{loyaltyCode}{loyaltyNumber}; Example ZE|FT|XC12344 where providerCode=ZE, loyaltyCode=FT and loyaltyNumber=XC12344. Up to 5 comma-separated loyalty numbers can be specified per provider.\n",
      "required": false,
      "in": "query",
      "type": "array",
      "items": {
        "type": "string"
      },
      "collectionFormat": "csv",
      "x-risk-personal-data-field": "FREQUENT_FLYER_NUMBER"
    },
    "isUnlimitedMileage": {
      "name": "isUnlimitedMileage",
      "description": "This is to request only unlimited mileage rates. It is not compatible with Leisure rates",
      "required": false,
      "in": "query",
      "type": "boolean"
    },
    "minPrice": {
      "name": "minPrice",
      "description": "Minimum total price of an item to be returned. Items with total price less than this price will not be returned. If used, parameter currencyCode is mandatory. Parameter is not supported by all providers",
      "required": false,
      "in": "query",
      "type": "integer"
    },
    "pickUpLatitude": {
      "name": "pickUpLatitude",
      "description": "Latitude of the geographical location, e.g. 43.622596\nThis overrides the pickUpLocationCode.\nParameter is not supported by all providers\n",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "pickUpLongitude": {
      "name": "pickUpLongitude",
      "description": "Longitude of the geographical location, e.g. 7.059983\nThis overrides the pickUpLocationCode.\nParameter is not supported by all providers\n",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "dropOffLatitude": {
      "name": "dropOffLatitude",
      "description": "Latitude of the geographical location, e.g. 43.622596\nThis overrides the dropOffLocationCode.\nParameter is not supported by all providers\n",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "dropOffLongitude": {
      "name": "dropOffLongitude",
      "description": "Longitude of the geographical location, e.g. 7.059983\nThis overrides the dropOffLocationCode.\nParameter is not supported by all providers\n",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "pickUpRadius": {
      "name": "pickUpRadius",
      "description": "Radius of pick up area search. e.g. 1\nParameter is not supported by all providers\n",
      "required": false,
      "in": "query",
      "type": "number",
      "format": "double",
      "default": 1.0
    },
    "dropOffRadius": {
      "name": "dropOffRadius",
      "description": "Radius of drop off area search. e.g. 1\nParameter is not supported by all providers\n",
      "required": false,
      "in": "query",
      "type": "number",
      "format": "double",
      "default": 1.0
    },
    "radiusUnit": {
      "name": "radiusUnit",
      "description": "Radius unit. e.g. km\nParameter is not supported by all providers\n",
      "required": false,
      "in": "query",
      "type": "string",
      "enum": [
        "km",
        "mile"
      ],
      "default": "km"
    },
    "bookingAgencies": {
      "name": "bookingAgencies",
      "description": "Agency IATA number. The following structures can be used depending on whether it is used per provider or as a generic input: {providerCode}|{bookingAgency} or {bookingAgency}. When the value is specific to a provider e.g. ZE|12345675.\nBy default, the booking source is automatically extracted from the office profile.\nHowever, for non-IATA affiliated customers, each car provider gives them a \"pseudo\" IATA code to identify themselves\n",
      "required": false,
      "in": "query",
      "type": "array",
      "items": {
        "type": "string",
        "pattern": "[a-zA-Z0-9]{8,10}"
      },
      "collectionFormat": "csv"
    },
    "marketingAirlineCode": {
      "name": "marketingAirlineCode",
      "description": "IATA airline code (http://www.iata.org/publications/Pages/code-search.aspx)",
      "required": true,
      "type": "string",
      "in": "query",
      "pattern": "[A-Z0-9]{2,3}",
      "x-dictionary-name": "airline",
      "x-field-name": "airline",
      "x-field-type": "string"
    },
    "marketingFlightNumber": {
      "name": "marketingFlightNumber",
      "description": "Marketing flight number",
      "required": true,
      "in": "query",
      "type": "string",
      "pattern": "[A-Z0-9]*"
    },
    "optionalDepartureDate": {
      "name": "departureDate",
      "description": "Departure flight date in [ISO 8601](http://www.w3.org/TR/NOTE-datetime) without timezone. Ex : 2026-07-01",
      "required": false,
      "in": "query",
      "type": "string",
      "format": "date"
    },
    "queryFlightId": {
      "name": "flightId",
      "description": "Identifier of the target flight",
      "required": true,
      "in": "query",
      "type": "string",
      "pattern": "[a-zA-Z0-9-]{1,20}",
      "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
    },
    "departureDate": {
      "name": "departureDate",
      "description": "Departure flight date in [ISO 8601](http://www.w3.org/TR/NOTE-datetime) without timezone. Ex : 2027-07-01",
      "required": true,
      "in": "query",
      "type": "string",
      "format": "date"
    },
    "arrangeBy": {
      "name": "arrangeBy",
      "description": "Sorting display option for the timetable results, by departing, arrival or elapsed time. If not provided, a neutral order is provided.",
      "required": false,
      "in": "query",
      "type": "string",
      "enum": [
        "departureTime",
        "arrivalTime",
        "elapsedTime",
        "neutralOrder"
      ],
      "default": "neutralOrder"
    },
    "maxTimetable": {
      "name": "max",
      "description": "Maximum number of items to return. By default, all items are returned.",
      "required": false,
      "type": "integer",
      "in": "query",
      "minimum": 1,
      "maximum": 600
    },
    "hotelOfferId": {
      "name": "hotelOfferId",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "offer id to request",
      "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
    },
    "cityCode": {
      "name": "cityCode",
      "in": "query",
      "required": false,
      "type": "string",
      "pattern": "[A-Z]{3}",
      "description": "IATA city code [see entire list here](http://www.iata.org/publications/Pages/code-search.aspx).\nWhen used for hotel offers search: it must be used in conjunction with 'radius' and 'radiusUnit'.\nMandatory parameter for a city search"
    },
    "latitude": {
      "name": "latitude",
      "in": "query",
      "required": false,
      "type": "number",
      "format": "double",
      "description": "Latitude of geographic location to search around.\nExample: 52.5238"
    },
    "longitude": {
      "name": "longitude",
      "in": "query",
      "required": false,
      "type": "number",
      "format": "double",
      "description": "Longitude of geographic location to search around.\nExample: 13.3835"
    },
    "hotelIds": {
      "name": "hotelIds",
      "in": "query",
      "required": false,
      "type": "array",
      "items": {
        "type": "string",
        "pattern": "[A-Z0-9]{8}"
      },
      "description": "comma separated list of Amadeus hotel codes to request\nExample: RTPAR001,HVNCEAAH\nMandatory in case a search by geocodes or by cityCode is not triggered",
      "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
    },
    "checkInDate": {
      "name": "checkInDate",
      "in": "query",
      "required": false,
      "type": "string",
      "format": "date",
      "description": "check-in date of the stay. Format YYYY-MM-DD\nThe lowest accepted value is the present date (no dates in the past)\nIf not present, the system will default on today's date\n"
    },
    "checkOutDate": {
      "name": "checkOutDate",
      "in": "query",
      "required": false,
      "type": "string",
      "format": "date",
      "description": "check-out date of the stay. Format YYYY-MM-DD\nThe lowest accepted value is checkInDate+1\nIf not present, the system will default checkInDate + 1\n"
    },
    "adults": {
      "name": "adults",
      "in": "query",
      "required": false,
      "type": "integer",
      "minimum": 1,
      "maximum": 9,
      "description": "number of adults for the stay (1-9)"
    },
    "childAges": {
      "name": "childAges",
      "in": "query",
      "required": false,
      "type": "array",
      "items": {
        "type": "integer"
      },
      "description": "comma separated list of ages of each child. If 2 children have the same age, it should be repeated here",
      "x-risk-personal-data-field": "DATE_OF_BIRTH"
    },
    "countryOfResidence": {
      "name": "countryOfResidence",
      "in": "query",
      "required": false,
      "type": "string",
      "description": "code of the country of the residence of the traveler expressed using ISO 3166-1 format",
      "pattern": "[A-Z]{2}",
      "x-risk-personal-data-field": "ADDRESS"
    },
    "radius": {
      "name": "radius",
      "in": "query",
      "required": false,
      "type": "integer",
      "description": "radius of the area to search",
      "default": 5
    },
    "hotelName": {
      "name": "hotelName",
      "in": "query",
      "required": false,
      "type": "string",
      "minLength": 3,
      "maxLength": 40,
      "description": "Search by Hotel Name. Accepts maximum 4 keywords.\nExample: Hotel California\nExample: Hotel Califo"
    },
    "hotelProviderCodes": {
      "name": "providerCodes",
      "in": "query",
      "required": false,
      "type": "array",
      "items": {
        "type": "string",
        "pattern": "[A-Z]{2}"
      },
      "description": "comma separated list of Amadeus hotel chain codes to filter the response by\nExample: RT,YX\n"
    },
    "rateCodes": {
      "name": "rateCodes",
      "in": "query",
      "required": false,
      "type": "array",
      "items": {
        "type": "string",
        "pattern": "[A-Z0-9]{3}"
      },
      "collectionFormat": "csv",
      "description": "insert a comma separated list of rate codes requested\nExample: PRO,MIL,PKG\n\nProducts can be filtered based on their rate plan code\nWhen a search by special rate is received, Amadeus performs\na first check to identify what hotel chains have loaded the requested\nrates in the Amadeus system, only these chains will be queried for availability\n\nPlease be aware that availability response will not only contain requested special rates but also public rates\n"
    },
    "preferredProviderCodes": {
      "name": "preferredProviderCodes",
      "in": "query",
      "required": false,
      "type": "array",
      "items": {
        "type": "string",
        "pattern": "[A-Z]{2}"
      },
      "collectionFormat": "csv",
      "description": "insert a comma separated list of preferred suppliers\nin case rates of a hotel property come from several suppliers,\nonly rates belonging to the list of preferred chains are returned in response\n"
    },
    "roomQuantity": {
      "name": "roomQuantity",
      "in": "query",
      "required": false,
      "type": "integer",
      "description": "number of rooms requested"
    },
    "amenities": {
      "name": "amenities",
      "in": "query",
      "description": "list of hotel amenities to be used for filtering the search. Maximum 3 amenities can be specified in input. The hotels in output have at least one of the amenities selected (OR-search).",
      "required": false,
      "type": "array",
      "items": {
        "type": "string",
        "enum": [
          "SWIMMING_POOL",
          "RESTAURANT",
          "SPA",
          "PARKING",
          "FITNESS_CENTER",
          "AIR_CONDITIONING",
          "AIRPORT_SHUTTLE",
          "PETS_ALLOWED",
          "BUSINESS_CENTER",
          "DISABLED_FACILITIES",
          "WIFI"
        ]
      }
    },
    "ratings": {
      "name": "ratings",
      "in": "query",
      "description": "list of hotel star ratings to filter the response by",
      "required": false,
      "type": "array",
      "items": {
        "type": "integer"
      },
      "enum": [
        "5",
        "4",
        "3",
        "2",
        "1"
      ]
    },
    "priceRange": {
      "name": "priceRange",
      "in": "query",
      "required": false,
      "type": "string",
      "description": "specify a price interval to apply to hotels (ex: 200-300 or -300 or 100) It is mandatory to include a currency when this field is set Warning: this parameter applies on the daily price +/- 10% margin"
    },
    "paymentPolicy": {
      "name": "paymentPolicy",
      "in": "query",
      "description": "specify the requested payment type",
      "required": false,
      "type": "string",
      "enum": [
        "GUARANTEE",
        "DEPOSIT",
        "NONE"
      ]
    },
    "boardType": {
      "name": "boardType",
      "in": "query",
      "description": "it specifies the requested hotel board type",
      "required": false,
      "type": "string",
      "enum": [
        "ROOM_ONLY",
        "BREAKFAST",
        "HALF_BOARD",
        "FULL_BOARD",
        "ALL_INCLUSIVE"
      ]
    },
    "includeClosed": {
      "name": "includeClosed",
      "in": "query",
      "description": "include closed hotels in the response",
      "required": false,
      "type": "boolean",
      "default": false
    },
    "bestRateOnly": {
      "name": "bestRateOnly",
      "in": "query",
      "required": false,
      "type": "boolean",
      "default": true,
      "description": "set to true or false to return all offers or only the cheapest price per hotel"
    },
    "consolidated": {
      "name": "consolidated",
      "in": "query",
      "required": false,
      "type": "boolean",
      "default": false,
      "description": "set to true or false to return the cheapest offer per Hotel when several providers propose offers for the same physical hotel"
    },
    "view": {
      "name": "view",
      "in": "query",
      "description": "hotel descriptive content to include in the response\n\nNONE: geocoordinates, hotel distance\n\nLIGHT: NONE view + city name, phone number, fax, address, postal code, country code, state code, ratings, 1 image\n\nFULL: LIGHT view + hotel description, amenities and facilities\n",
      "required": false,
      "type": "string",
      "enum": [
        "FULL",
        "LIGHT",
        "NONE"
      ],
      "default": "FULL"
    },
    "sort": {
      "name": "sort",
      "in": "query",
      "description": "sort the response according to price or distance. Order by price relies on cache data, thus it is possible that not all properties will be returned",
      "required": false,
      "type": "string",
      "enum": [
        "PRICE",
        "DISTANCE",
        "NONE"
      ],
      "default": "NONE"
    },
    "pageLimit": {
      "name": "pageLimit",
      "in": "query",
      "required": false,
      "type": "integer",
      "minimum": 1,
      "description": "maximum number of items to return in each response"
    },
    "pageOffset": {
      "name": "pageOffset",
      "in": "query",
      "required": false,
      "type": "string",
      "description": "used to specify the next scrolling window if all items could not be returned in the previous response"
    },
    "hotelId": {
      "name": "hotelId",
      "in": "query",
      "required": true,
      "type": "string",
      "pattern": "[A-Z0-9]{8}",
      "description": "hotel id to request",
      "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
    },
    "viewSingle": {
      "name": "view",
      "in": "query",
      "description": "hotel descriptive content to include in the response\n\nNONE: geocoordinates, hotel distance\n\nLIGHT: NONE view + city name, phone number, fax, address, postal code, country code, state code, ratings, 1 image\n\nFULL: LIGHT view + hotel description, amenities and facilities\n\nFULL_ALL_IMAGES: FULL view + all images\n",
      "required": false,
      "type": "string",
      "enum": [
        "FULL_ALL_IMAGES",
        "FULL",
        "LIGHT",
        "NONE"
      ],
      "default": "FULL_ALL_IMAGES"
    },
    "offerId": {
      "name": "offerId",
      "in": "path",
      "required": true,
      "type": "string",
      "pattern": "[A-Z0-9]{64}",
      "description": "offer id to request",
      "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
    },
    "insuranceProviderCodes": {
      "name": "providerCodes",
      "in": "query",
      "description": "The code of the insurance provider on 3 characters. ISO (Alpha-2) code for market can be appended. Final size can be either 3 or 5 characters",
      "required": false,
      "type": "array",
      "items": {
        "type": "string",
        "pattern": "([A-Za-z]{3}|[A-Za-z]{5})"
      },
      "collectionFormat": "csv",
      "maxItems": 5
    },
    "insuranceOfferId": {
      "name": "insuranceOfferId",
      "description": "Identifier of an offer",
      "required": true,
      "in": "path",
      "type": "string",
      "pattern": "[a-zA-Z0-9-]{1,120}",
      "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
    },
    "recommendationTypes": {
      "name": "recommendationTypes",
      "in": "query",
      "required": false,
      "description": "Type of product(s) for which teaser recommendations need to be retrieved",
      "type": "array",
      "items": {
        "type": "string",
        "enum": [
          "car",
          "hotel",
          "insurance"
        ]
      }
    },
    "travelDocumentId": {
      "name": "travelDocumentId",
      "description": "Identifier of a travel document (flight or service related)",
      "required": true,
      "in": "path",
      "type": "string",
      "pattern": "[0-9]{1,20}",
      "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
    },
    "travelerId": {
      "name": "travelerId",
      "description": "Identifier of a traveler (cart / order dependent)",
      "required": true,
      "in": "path",
      "type": "string",
      "pattern": "[a-zA-Z0-9-]{1,20}",
      "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
    },
    "contactId": {
      "name": "contactId",
      "description": "Identifier for a contact (email, phone number, address...)",
      "required": true,
      "in": "path",
      "type": "string",
      "pattern": "[a-zA-Z0-9-]{1,20}",
      "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
    },
    "frequentFlyerCardId": {
      "name": "frequentFlyerCardId",
      "description": "Identifier of a frequent flyer card, whatever its usage [redeem miles, accrue miles...]",
      "required": true,
      "in": "path",
      "type": "string",
      "pattern": "[a-zA-Z0-9-:]{1,20}",
      "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
    },
    "remarkId": {
      "name": "remarkId",
      "description": "Identifier for a remark",
      "required": true,
      "in": "path",
      "type": "string",
      "pattern": "[a-zA-Z0-9-]{1,20}",
      "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
    },
    "optionalPaymentRecordIds": {
      "name": "paymentRecordIds",
      "description": "List of payment records to delete from an Order.",
      "in": "query",
      "required": false,
      "type": "array",
      "items": {
        "type": "string",
        "pattern": "[a-zA-Z0-9]{1,20}"
      },
      "collectionFormat": "csv",
      "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
    },
    "orderChangeId": {
      "name": "orderChangeId",
      "description": "Identifier of an order change sub-resource",
      "required": true,
      "in": "path",
      "type": "string",
      "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
    },
    "specialServiceRequestId": {
      "name": "specialServiceRequestId",
      "description": "Identifier of a special service request",
      "required": true,
      "in": "path",
      "type": "string",
      "pattern": "[a-zA-Z0-9-]{1,50}",
      "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
    },
    "bookingClass": {
      "name": "bookingClass",
      "description": "Booking class for seat reservation. It is used to refine seat map results, compared to the cabin. Eg. \"J\"",
      "required": false,
      "in": "query",
      "type": "string",
      "pattern": "[A-Z]{1,2}"
    },
    "aircraftConfigurationVersion": {
      "name": "aircraftConfigurationVersion",
      "description": "Physical configuration, also called ACV code (aircraft type + fitted configuration)",
      "required": true,
      "type": "string",
      "in": "query",
      "pattern": "[a-zA-Z0-9]{3}"
    },
    "boundId": {
      "name": "boundId",
      "description": "The unique identifier of the disrupted bound in the passengers booking",
      "required": true,
      "in": "query",
      "type": "string",
      "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
    },
    "optionalDepartureDateTime": {
      "name": "departureDateTime",
      "description": "The date and time from which the search should begin [ISO 8601](http://www.w3.org/TR/NOTE-datetime). If not specified the search will be from departure date and time of requested bound. Example: 2027-11-10T10:21:00\n",
      "required": false,
      "in": "query",
      "type": "string",
      "format": "date-time"
    },
    "optionalOriginLocationCode": {
      "name": "originLocationCode",
      "description": "Departure location code of the bound (city or airport code)",
      "required": false,
      "type": "string",
      "pattern": "[a-zA-Z]{3}",
      "in": "query",
      "x-dictionary-name": "location",
      "x-field-name": "originLocation",
      "x-field-type": "LocationDictionaryItem"
    },
    "optionalDestinationLocationCode": {
      "name": "destinationLocationCode",
      "description": "Destination location code (city or airport code) for the search",
      "required": false,
      "type": "string",
      "pattern": "[a-zA-Z]{3}",
      "in": "query",
      "x-dictionary-name": "location",
      "x-field-name": "destinationLocation",
      "x-field-type": "LocationDictionaryItem"
    },
    "includeNearbyCities": {
      "name": "includeNearbyCities",
      "description": "Indicates whether search should be extended to include airports in nearby cities.\nThis query parameter requires a specific implementation and back-end configuration. Please contact your implementation contact point before using this query parameter.\n",
      "required": false,
      "in": "query",
      "type": "boolean",
      "default": false
    },
    "journeyId": {
      "name": "journeyId",
      "description": "Identifier of a journey",
      "required": true,
      "in": "path",
      "type": "string",
      "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
    },
    "areSecurityQuestionsAnswered": {
      "name": "areSecurityQuestionsAnswered",
      "description": "Indicate if the security questions were answered correctly by the travelers",
      "in": "query",
      "required": false,
      "type": "boolean",
      "default": false
    },
    "travelerIds": {
      "name": "travelerIds",
      "description": "List of traveler identifiers",
      "required": true,
      "in": "query",
      "type": "array",
      "items": {
        "type": "string",
        "pattern": "[a-zA-Z0-9-]{1,20}"
      },
      "collectionFormat": "csv",
      "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
    },
    "journeyElementId": {
      "name": "journeyElementId",
      "description": "Identifier of the traveler on a flight",
      "required": true,
      "in": "path",
      "type": "string",
      "pattern": "[0-9]{16}",
      "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
    },
    "baggageIds": {
      "name": "baggageIds",
      "description": "List of baggage identifiers",
      "required": true,
      "in": "query",
      "type": "array",
      "items": {
        "type": "string"
      },
      "collectionFormat": "csv",
      "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
    },
    "paymentRecordId": {
      "name": "paymentRecordId",
      "description": "Identifier of a payment record",
      "required": true,
      "in": "path",
      "type": "string",
      "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
    },
    "queryJourneyId": {
      "name": "journeyId",
      "description": "Identifier of a journey",
      "required": true,
      "in": "query",
      "type": "string",
      "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
    },
    "optionalQueryJourneyId": {
      "name": "journeyId",
      "description": "Identifier of a journey",
      "required": false,
      "in": "query",
      "type": "string",
      "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
    },
    "journeyAlternativeSearchType": {
      "name": "searchType",
      "in": "query",
      "description": "The type of alternative requested Type standbyEarly can only be applied after acceptance, by using POST /journey/{journeyId}/payment-records Type sameDayChange can be applied before or after acceptance, by using POST /journey/{journeyId}/payment-records",
      "required": true,
      "type": "string",
      "enum": [
        "standbyEarly",
        "sameDayChange"
      ]
    },
    "includeMoreCartDetails": {
      "name": "include",
      "description": "Additional data (like baggagePolicies) for this cart will be included in the response.",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "refresh": {
      "name": "refresh",
      "description": "If true the resource will be refreshed and its sub-resources may be removed (i.e. a selected seat could not be available anymore after the refresh) or changed (i.e. higher price for the airOffer).",
      "required": false,
      "in": "query",
      "type": "boolean",
      "default": false
    },
    "formOfIdentificationDetailId": {
      "name": "formOfIdentificationDetailId",
      "description": "Identifier of a form of identification (cart / order dependent)",
      "required": true,
      "in": "path",
      "type": "string",
      "pattern": "[a-zA-Z0-9-]{1,20}",
      "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
    },
    "regulatoryApisDetailId": {
      "name": "regulatoryApisDetailId",
      "description": "Identifier of a regulatory APIS document (cart / order dependent)",
      "required": true,
      "in": "path",
      "type": "string",
      "pattern": "[a-zA-Z0-9-]{1,20}",
      "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
    },
    "extensionId": {
      "in": "path",
      "name": "extensionId",
      "required": true,
      "description": "Id of the extension.",
      "type": "string",
      "pattern": "[a-zA-Z0-9-]{1,20}",
      "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
    },
    "transportationOfferId": {
      "in": "path",
      "name": "transportationOfferId",
      "required": true,
      "description": "Id of the external transportation offer",
      "type": "string",
      "pattern": "[a-zA-Z0-9-]{1,20}",
      "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
    },
    "entitlementDocumentId": {
      "name": "entitlementDocumentId",
      "description": "Identifier of a entitlement document",
      "required": true,
      "in": "path",
      "type": "string",
      "pattern": "[a-zA-Z0-9=]{1,100}",
      "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
    },
    "originCurrencyCode": {
      "name": "currencyCode",
      "description": "This defines the origin currency in ISO currency code (http://www.iso.org/iso/home/standards/currency_codes.htm).",
      "required": true,
      "in": "query",
      "type": "string",
      "pattern": "[A-Z]{3}",
      "x-dictionary-name": "currency",
      "x-field-name": "currency",
      "x-field-type": "CurrencyDictionaryItem"
    },
    "targetCurrencyCode": {
      "name": "targetCurrencyCode",
      "description": "This defines the desired currency in ISO currency code (http://www.iso.org/iso/home/standards/currency_codes.htm).",
      "required": true,
      "in": "query",
      "type": "string",
      "pattern": "[A-Z]{3}",
      "x-dictionary-name": "currency",
      "x-field-name": "currency",
      "x-field-type": "CurrencyDictionaryItem"
    },
    "amounts": {
      "name": "amounts",
      "description": "Amount values to be converted. The amount value expressed as numerical information without decimal separator (e.g. 10085 for an amount of 100.85)",
      "required": false,
      "in": "query",
      "type": "array",
      "items": {
        "type": "string",
        "pattern": "^[1-9]+[0-9]*$",
        "minLength": 1,
        "maxLength": 12
      },
      "maxItems": 30,
      "collectionFormat": "csv"
    },
    "voucherId": {
      "name": "voucherId",
      "in": "path",
      "required": true,
      "description": "Identifier of an asset, it can be the voucher ID or wallet ID",
      "type": "string",
      "pattern": "[0-9]{13,16}",
      "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
    },
    "corporateCodes": {
      "name": "corporateCodes",
      "description": "Corporate code or corporate name are used for targeting specific corporate fares.",
      "required": false,
      "type": "array",
      "items": {
        "type": "string",
        "pattern": "[a-zA-Z][a-zA-Z0-9]{1,9}|\\d{6}"
      },
      "in": "query",
      "collectionFormat": "csv",
      "maxItems": 6
    },
    "frequentFlyerCardHolderLastName": {
      "name": "frequentFlyerCardHolderLastName",
      "description": "Last name associated to the frequent flyer card number provided in request",
      "in": "query",
      "type": "string",
      "pattern": "^[A-Za-z\\u00C0-\\u1FFF\\u3040-\\uD7AF][A-Za-z\\u00C0-\\u1FFF\\u3040-\\uD7AF\\u2019 \\-.]{0,69}$",
      "x-risk-personal-data-field": "PASSENGER_NAME"
    },
    "frequentFlyerCardNumber": {
      "name": "frequentFlyerCardNumber",
      "description": "Frequent flyer card or Loyalty number",
      "required": true,
      "in": "query",
      "type": "string",
      "pattern": "[a-zA-Z0-9]{1,25}",
      "x-risk-personal-data-field": "FREQUENT_FLYER_NUMBER"
    },
    "companyCode": {
      "name": "companyCode",
      "description": "Code of the company emitting the profile account",
      "required": true,
      "in": "query",
      "type": "string",
      "pattern": "[A-Z0-9]{2,3}"
    },
    "otherServiceInformationId": {
      "name": "otherServiceInformationId",
      "description": "Identifier for an OSI element",
      "required": true,
      "in": "path",
      "type": "string",
      "pattern": "[a-zA-Z0-9-]{1,20}",
      "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
    },
    "specialKeywordId": {
      "name": "specialKeywordId",
      "description": "Identifier of a special keyword",
      "required": true,
      "in": "path",
      "type": "string",
      "pattern": "[a-zA-Z0-9-]{1,50}",
      "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
    },
    "challengeId": {
      "name": "challengeId",
      "description": "Identifier of an Authentication challenge",
      "required": true,
      "in": "path",
      "type": "string",
      "pattern": "[a-zA-Z0-9_]{1,50}",
      "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
    }
  },
  "paths": {
    "/search/air-bound-exchanges": {
      "post": {
        "summary": "Construction mode search for air bounds to exchange against a booked trip",
        "description": "This is a re-shopping transaction that returns a list of air bounds corresponding to the provided search criteria which can be used for exchange against the order provided in input criteria.",
        "operationId": "airBoundExchanges",
        "tags": [
          "AirExchange"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/firstName"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "name": "airBoundExchangesInputs",
            "description": "Description of inputs needed to perform the search of reshopping",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AirBoundExchangeSearchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AirBoundExchangeListReply"
            }
          },
          "400": {
            "description": "Bad request Errors or warnings that can be returned by the application:\n|  Code   |           Title                    | Description                                                                         |\n|:-------:|:----------------------------------:|-------------------------------------------------------------------------------------|\n|  39360  | NO FLIGHT FOUND                    | No flight recommendation found                                                      |\n|  39236  | MISSING COMMERCIAL FARE FAMILY     | unexpected attribute.                                                               |\n|  65019  | UNABLE TO PROCESS                  | Technical failure                                                                   |\n|  36916  | INVALID NUMBER OF TRAVELERS        | Too many passenger in request                                                       |\n|  39336  | INVALID LOCATION CODE              | Invalid location code                                                               |\n|  39414  | INVALID ITINERARY                  | Invalid itinerary structure                                                         |\n|  39333  | INVALID DATE                       | Invalid date or date in the past                                                    |\n|  36996  | INVALID FLEXIBILITY                | Invalid flexibility value                                                           |\n|  39333  | LAST NAME SHOULD BE PROVIDED       | Last name in input is mandatory                                                     |\n|  36996  | INVALID TRAVELER ID                | Invalid traveler ID value                                                           |              \n|  40003  | MISSING FREE BAGGAGE DETAILS       |Warning returned when only Free baggage allowance info available but no details available |\n|  39997  | NO FREE BAGGAGE ALLOWANCE          | Warning returned when no Free baggage allowance info nor any details available                                                           |\n|  36895  | TRAVEL DOCUMENT NOT FOUND          | Error message for missing Travel doc                                                     |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Not found Errors or warnings that can be returned by the application:\n|  Code   |           Title                    | Description                                                                         |\n|:-------:|:----------------------------------:|-------------------------------------------------------------------------------------|\n|  36894  | ORDER NOT FOUND                    | Order ID or last name is invalid                                                    |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/search/air-calendar-exchanges": {
      "post": {
        "summary": "Advanced search for air exchange calendars (cheapest price per day)",
        "description": "Air exchange calendar (ATC) enables a customer who has flexible dates to see the cheapest price option per day over a range of days for an exchange.\nThe number of days of flexibility can be sent in input to indicate the number of days before and after the requested date to be searched.\nFor a round trip request, the standard range of days is up to 7, meaning three days before and three days after the requested date.\nFor a one-way request, the range is up to 15 days, meaning seven days before and seven days after the requested date.\nBy default if no travellers are specified, the results are returned for one adult. Also, if no flexibility is specified, for both one way and round-trip the results returned are for a range of seven days, meaning three days before and three days after the requested date.\nThe standard flexibility ranges can be extended using implementation configuration settings.\nNote that only the price is returned, not the details of the flights.\nDictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).\n",
        "operationId": "advancedAirExchangeCalendar",
        "tags": [
          "AirExchangeCalendar"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/firstName"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "name": "advancedExchangeCalendarInputs",
            "description": "Description of inputs needed to perform the advanced search of airExchangeCalendar",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AirExchangeCalendarAdvancedSearchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AirExchangeCalendarReply"
            }
          },
          "400": {
            "description": "Bad request Errors or warnings that can be returned by the application:\n|  Code   |           Title                    | Description                                                                         |\n|:-------:|:----------------------------------:|-------------------------------------------------------------------------------------|\n|  39360  | NO FLIGHT FOUND                    | No flight recommendation found                                                      |\n|  39236  | MISSING COMMERCIAL FARE FAMILY     | unexpected attribute.                                                               |\n|  65019  | UNABLE TO PROCESS                  | Technical failure                                                                   |\n|  36916  | INVALID NUMBER OF TRAVELERS        | Too many passenger in request                                                       |\n|  39336  | INVALID LOCATION CODE              | Invalid location code                                                               |\n|  39414  | INVALID ITINERARY                  | Invalid itinerary structure                                                         |\n|  39333  | INVALID DATE                       | Invalid date or date in the past                                                    |\n|  36996  | INVALID FLEXIBILITY                | Invalid flexibility value                                                           |\n|  39333  | LAST NAME SHOULD BE PROVIDED       | Last name in input is mandatory                                                     |\n|  36996  | INVALID TRAVELER ID                | Invalid traveler ID value                                                           |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Not found Errors or warnings that can be returned by the application:\n|  Code   |           Title                    | Description                                                                         |\n|:-------:|:----------------------------------:|-------------------------------------------------------------------------------------|\n|  36894  | ORDER NOT FOUND                    | Order ID or last name is invalid                                                    |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/shopping/air-bound-exchanges-details": {
      "post": {
        "summary": "Price details for exchange",
        "description": "This is a transaction providing breakdown on the prices of an exchange.",
        "operationId": "airBoundExchangesDetails",
        "tags": [
          "AirExchange"
        ],
        "parameters": [
          {
            "name": "airBoundExchangesDetailsInputs",
            "description": "Description of inputs needed to perform the pricing of the exchange",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AirBoundExchangesDetailsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AirBoundExchangesDetailsReply"
            }
          },
          "400": {
            "description": "Bad request Warnings that can be returned by the application:\n|  Code   |           Title                    | Description                                                                         |\n|:-------:|:----------------------------------:|-------------------------------------------------------------------------------------|\n|  39445  | INVALID BOUND ID                   | Provided bound ids are invalid                                                      |\n|  67407  | MISSING OFFER ID                   | Provided bound ids do not contain an offer id                                       |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Not found Warnings that can be returned by the application:\n|  Code   |           Title                    | Description                                                                         |\n|:-------:|:----------------------------------:|-------------------------------------------------------------------------------------|\n|  36799  | OFFER NOT FOUND                    | Offer not found                                                                     |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/search/air-best-prices": {
      "post": {
        "summary": "Entry point for to search best prices using Instant Search product",
        "description": "Calendar using Instant Search product. This search returns results based on requests that have been pre-computed. After getting prices or flight, a shopping request must be done to get a corresponding air-offer. The following operations are supported: - Calendar with best prices per day - Calendar with best prices by month - Calendar by dates - Open search - City pair search - Search by themes - Budget search Options of currency override, last ticketing date, price in miles (Miles and Cash), prices per bound are also supported. Dictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).\n",
        "operationId": "inspirationAirCalendar",
        "tags": [
          "AirInspiration"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/lang"
          },
          {
            "name": "inspirationCalendarInputs",
            "description": "Description of inputs needed to perform the Instant search request",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AirBestPricesSearchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AirBestPricesReply"
            }
          },
          "400": {
            "description": "Bad request Errors or warnings that can be returned by the application:\n|  Code   |           Title                    | Description                                                                         |\n|:-------:|:----------------------------------:|-------------------------------------------------------------------------------------|\n|  39360  | NO FLIGHT FOUND                    | No flight recommendation found                                                      |\n|  39236  | MISSING COMMERCIAL FARE FAMILY     | unexpected attribute.                                                               |\n|  65019  | UNABLE TO PROCESS                  | Technical failure                                                                   |\n|  36916  | INVALID DURATION                   | Invalid duration value                                                              |\n|  39336  | INVALID LOCATION CODE              | Invalid location code                                                               |\n|  39414  | INVALID ITINERARY                  | Invalid itinerary structure                                                         |\n|  39333  | INVALID DATE                       | Invalid date or date in the past                                                    |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/search/air-offers/{airOfferId}": {
      "get": {
        "tags": [
          "AirOffer"
        ],
        "summary": "Retrieve an offer",
        "description": "Retrieve an Offer based on its Offer id.\nDictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).\n",
        "operationId": "retrieveAirOffer",
        "parameters": [
          {
            "$ref": "#/parameters/airOfferId"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AirOfferReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/shopping/carts/{cartId}/air-offers": {
      "post": {
        "tags": [
          "Cart"
        ],
        "operationId": "addAirOfferToCart",
        "summary": "Add an air offer to the cart",
        "description": "Add an airOffer to a given cart.\nAn offer can be added in the cart either from an airOffer ID or from a list of bound IDs (inputs are mutually exclusive). In that case an offer containing these bounds is created.\nWhen adding an air offer in the cart, a list of traveler sub-resources are created automatically. The created sub-resources contain only the assigned id and the passenger type code (PTC) corresponding to the ones selected when performing the air offer search. Example: if the air offer has been computed for 1 adult and 2 children, then 1 adult and 2 children travelers will be created accordingly.\nIn case the cart contains already travelers, only the missing travelers will be created and a matching based on the PTC is done to associate these travelers to the offer.\nDictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).\n",
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "name": "postAirOfferBody",
            "in": "body",
            "description": "Object containing the references to the air offers to be added into the cart.\n",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AirOfferSelectionRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created\nWarnings that can be returned by the application:\n|  Code   |                   Title                        | Description                                                                                                   |\n|:-------:|:----------------------------------------------:|---------------------------------------------------------------------------------------------------------------|\n|  36800  | NUMBER OF TRAVELERS DOES NOT MATCH THE FLIGHTS | Warning returned when the number of travelers in the cart does not match the number of travelers in the offer |\n|  38866  | UNABLE TO GET BOUND INFORMATION                | Warning returned when the application is uable to compute bounds information                                  |\n",
            "schema": {
              "$ref": "#/definitions/AirOffersInCartReply"
            }
          },
          "400": {
            "description": "Bad request\nErrors that can be returned by the application:\n\n|  Code   |                    Title                    | Description                                                                            |\n|:-------:|:-------------------------------------------:|----------------------------------------------------------------------------------------|\n|  04926  | INVALID DATA RECEIVED                       | It depends on the error, Mandatory field missing, Bad format,etc.                      |\n|  2668   | PARAMETER COMBINATION INVALID/RESTRICTED    | Error returned when both an air offer id and air bound offer ids are provided in input |\nErrors that can be returned by the application with 200 http status code:\n|  Code   |              Title              | Description                                                                                                                   |\n|:-------:|:-------------------------------:|-------------------------------------------------------------------------------------------------------------------------------|\n|  38775  | UNABLE TO RETRIEVE OFFER        | Error returned when the application could not retrieve the offer                                                              |\n|  37264  | INVALID TRAVELER TYPE           | Error returned if an invalid traveler passenger type is given in input when mapping travelers in cart to travelers in offer   |\n|  36865  | INVALID TRAVELER ID             | Error returned if an invalid traveler passenger id is given in input when mapping travelers in cart to travelers in offer     |\n|  39073  | INVALID INFANT ASSOCIATION      | Error returned in case of infant association mismatch between cart and offer                                                  |\n|  39886  | UNABLE TO ADD AIR-OFFER TO CART | Error returned when the application could not add an air offer to cart                                                        |\n|  38414  | MISSING PART OF ITINERARY       | Error raised when bound IDs are valid but the itinerary is incomplete                                                         |\n|  38608  | UNABLE TO MERGE BOUND OFFERS    | Error returned when the application could not merge bound offers or when at least one bound offer departure date is too close | \n|  38411  | INVALID REQUESTED BOUND         | Error returned when an invalid bound offer id is provided in input                                                            |\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "401": {
            "description": "Unauthorized\nErrors that can be returned by the application:\n\n|  Code   |                      Title                    | Description                                                     |\n|:-------:|:---------------------------------------------:|-----------------------------------------------------------------|\n|  36963  | LAST NAME DOES NOT MATCH ANY TRAVELER IN CART | Error returned when no cart was found for the provided cart id  |\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Not Found\nErrors that can be returned by the application:\n\n|  Code   |              Title                   | Description                                                     |\n|:-------:|:------------------------------------:|-----------------------------------------------------------------|\n|  36798  | CART NOT FOUND                       | Error returned when no cart was found for the provided cart id  |\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "500": {
            "description": "Other Error\nErrors that can be returned by the application:\n\n|  Code   |        Title         | Description                                            |\n|:-------:|:--------------------:|--------------------------------------------------------|\n|  11     | UNABLE TO PROCESS    | Error returned in case of a technical failure          |\n|  5042   | SYSTEM ERROR         | Error returned in case of internal system error        |\n|  27565  | ENTRY NOT AUTHORIZED | Error returned in case of invalid office configuration |\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "get": {
        "summary": "Retrieve all offers from a cart",
        "description": "Retrieve all AirOffers from a Cart based on cart id.\nDictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).\n",
        "operationId": "retrieveAirOffersFromCart",
        "tags": [
          "Cart"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AirOffersInCartReply"
            }
          },
          "400": {
            "description": "Bad request\nErrors that can be returned by the application:\n\n|  Code   |         Title         | Description                                |\n|:-------:|:---------------------:|--------------------------------------------|\n|  04926  | INVALID DATA RECEIVED | Error returned in case of input bad format |\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Not Found\nErrors that can be returned by the application:\n\n|  Code   |          Title           | Description                                                                 |\n|:-------:|:------------------------:|-----------------------------------------------------------------------------|\n|  36798  | CART NOT FOUND           | Error returned when no cart was found for the provided cart id              |\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "500": {
            "description": "Other Error\nErrors that can be returned by the application:\n\n|  Code   |        Title         | Description                                            |\n|:-------:|:--------------------:|--------------------------------------------------------|\n|  11     | UNABLE TO PROCESS    | Error returned in case of a technical failure          |\n|  5042   | SYSTEM ERROR         | Error returned in case of internal system error        |\n|  27565  | ENTRY NOT AUTHORIZED | Error returned in case of invalid office configuration |\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/shopping/carts/{cartId}/air-offers/revalidation": {
      "post": {
        "tags": [
          "Cart"
        ],
        "operationId": "revalidateAirOfferInCart",
        "summary": "Revalidate an air offer in the cart with new pricing context",
        "description": "Revalidate an air offer in a given cart while using new pricing context.\n\nExisting offer in the cart is revalidated and updated considering new pricing information provided in the request. Cart content is then updated accordingly.\n\nIn case of the cart contains services and/or seats, they are revalidated considering the updated offer.\n",
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "$ref": "#/parameters/includeWaitlist"
          },
          {
            "name": "revalidateAirOfferBody",
            "in": "body",
            "description": "Object containing the new air offer information to revalidate the air offer present in the cart.\n",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AirOfferRevalidationRequest"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created\nWarnings that can be returned by the application:\n|  Code   |                 Title                | Description                                                                                            |\n|:-------:|:------------------------------------:|--------------------------------------------------------------------------------------------------------|\n|  36806  | OFFER HAS CHANGED                    | Warning returned when the air offer revalidation returns a new offer                                   |\n|  38182  | SERVICES PRICES HAVE CHANGED         | Warning returned when services prices changed following their revalidation along with the offer        |\n|  38183  | SERVICES NO MORE AVAILABLE           | Warning returned when services are no more available following their revalidation along with the offer |\n|  38368  | SEATS PRICES HAVE CHANGED            | Warning returned when seats prices changed following their revalidation along with the offer           |\n|  38369  | SEATS NO MORE AVAILABLE              | Warning returned when seats are no more available following their revalidation along with the offer    |\n|  38809  | LOW AVAILABILITY FOR SOME FLIGHTS    | Warning returned in case of low availability for one or multiple flights with their ids                |\n|  40347  | FLIGHT TIME HAS CHANGED              | Warning returned in case of schedule change for one or multiple flights with their ids                 |\n|  36803  | OFFER EXPIRED                        | Warning returned when the offer is no more available                                                   |\n|  40807  | AIRCRAFT HAS CHANGED                 | Warning returned in case of aircraft type change for one or multiple flights with their ids            |\n|  40900  | PARTIAL INFORMATION RETURNED         | Warning returned when some information has been truncated for maximum length reason                    |\n|  41235  | BOOKING CLASS HAS CHANGED            | Warning returned in case of booking class change for one or multiple flights with their ids            |\n|  41239  | PROMOTION CODE HAS NOT BEEN APPLIED  | Warning returned when AAM promocode has been requested but not applied                                 |\n|  40985  | PROMOTION CODE HAS BEEN REMOVED      | Warning returned when AAM promocode has been removed during the air offer revalidation                 |\n|  40983  | AIR DISCOUNT HAS CHANGED             | Warning returned in case of AAM discount update during the air offer revalidation                      |\n",
            "schema": {
              "$ref": "#/definitions/AirOffersInCartReply"
            }
          },
          "400": {
            "description": "Bad request\nErrors that can be returned by the application:\n\n|  Code   |                Title               | Description                                                                |\n|:-------:|:----------------------------------:|----------------------------------------------------------------------------|\n|  04926  | INVALID DATA RECEIVED              | Error returned in case of input bad format                                 |\n|  32700  | INVALID INPUT DATA                 | Error returned in case of wrong input data                                 |\n|  40928  | CHANGE NUMBER IN PARTY NOT ALLOWED | Changing passenger type from or to infant is not allowed in this operation |\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Not Found\nErrors that can be returned by the application:\n\n|  Code   |     Title      | Description                                                    |\n|:-------:|:--------------:|----------------------------------------------------------------|\n|  36798  | CART NOT FOUND | Error returned when no cart was found for the provided cart id |\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "500": {
            "description": "Other Error\nErrors that can be returned by the application:\n\n|  Code   |        Title         | Description                                            |\n|:-------:|:--------------------:|--------------------------------------------------------|\n|  11     | UNABLE TO PROCESS    | Error returned in case of a technical failure          |\n|  5042   | SYSTEM ERROR         | Error returned in case of internal system error        |\n|  27565  | ENTRY NOT AUTHORIZED | Error returned in case of invalid office configuration |\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/shopping/carts/{cartId}/air-offers/{airOfferId}": {
      "get": {
        "summary": "Retrieve an offer",
        "description": "Retrieve an offer from a cart based on its id.\nDictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).\n",
        "operationId": "retrieveAirOfferFromCart",
        "tags": [
          "Cart"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/airOfferId"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AirOfferReply"
            }
          },
          "400": {
            "description": "Bad request\nErrors that can be returned by the application:\n\n|  Code   |         Title         | Description                                |\n|:-------:|:---------------------:|--------------------------------------------|\n|  04926  | INVALID DATA RECEIVED | Error returned in case of input bad format |\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Not Found\nErrors that can be returned by the application:\n\n|  Code   |          Title           | Description                                                                       |\n|:-------:|:------------------------:|-----------------------------------------------------------------------------------|\n|  36798  | CART NOT FOUND           | Error returned when no cart was found for the provided cart id                    |\n|  36799  | OFFER NOT FOUND          | Error returned when no offer was found in the cart matching the offer id in input |\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "500": {
            "description": "Other Error\nErrors that can be returned by the application:\n\n|  Code   |        Title         | Description                                            |\n|:-------:|:--------------------:|--------------------------------------------------------|\n|  11     | UNABLE TO PROCESS    | Error returned in case of a technical failure          |\n|  5042   | SYSTEM ERROR         | Error returned in case of internal system error        |\n|  27565  | ENTRY NOT AUTHORIZED | Error returned in case of invalid office configuration |\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "summary": "Remove a specific offer from a cart",
        "description": "Specified AirOffer is deleted from the Cart as well as any associated sub-resources as services, seats, travellers, etc.",
        "operationId": "deleteAirOfferFromCart",
        "tags": [
          "Cart"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/airOfferId"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "400": {
            "description": "Bad request\nErrors that can be returned by the application:\n\n|  Code   |         Title         | Description                                |\n|:-------:|:---------------------:|--------------------------------------------|\n|  04926  | INVALID DATA RECEIVED | Error returned in case of input bad format |\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "401": {
            "description": "Unauthorized\nErrors that can be returned by the application:\n\n|  Code   |                      Title                    | Description                                                                            |\n|:-------:|:---------------------------------------------:|----------------------------------------------------------------------------------------|\n|  36963  | LAST NAME DOES NOT MATCH ANY TRAVELER IN CART | Error returned when no traveler was found in the cart matching the last name in input  |\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Not Found\nErrors that can be returned by the application:\n\n|  Code   |          Title           | Description                                                                       |\n|:-------:|:------------------------:|-----------------------------------------------------------------------------------|\n|  36798  | CART NOT FOUND           | Error returned when no cart was found for the provided cart id                    |\n|  36799  | OFFER NOT FOUND          | Error returned when no offer was found in the cart matching the offer id in input |\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "500": {
            "description": "Other Error\nErrors that can be returned by the application:\n\n|  Code   |        Title         | Description                                            |\n|:-------:|:--------------------:|--------------------------------------------------------|\n|  11     | UNABLE TO PROCESS    | Error returned in case of a technical failure          |\n|  5042   | SYSTEM ERROR         | Error returned in case of internal system error        |\n|  27565  | ENTRY NOT AUTHORIZED | Error returned in case of invalid office configuration |\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/shopping/baggage-policies": {
      "get": {
        "summary": "Retrieve mandatory baggage information (MBI) from Cart or Order reference",
        "description": "This is a transaction that returns mandatory baggage information computed according to the content of a Cart or an Order or an Order  under voluntary exchange and pending payment, based on the inputs provided.\nOnly one of these three parameters cartId or orderId or orderId with orderChangeId  has to be requested. The Cart must contain an air offer.\n- The cart id allows to access to the air offer information stored in the cart such as flight characteristics, number of travelers, fare basis etc.\n- The order id allows to access to the information of the flights (air offers) booked and stored in the order.\n- The orderChangeId allows to access to the information of the flights (air offers) of an order under voluntary exchange and pending payment. I.e.  following a call to POST /purchase/orders/{orderId}/air-bound-exchanges-confirmation endpoint with a payment to be collected and no payment method provided. The orderChangeId has to come with orderId.\n",
        "operationId": "getBaggagePolicies",
        "tags": [
          "FareConditions"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/optionalCartId"
          },
          {
            "$ref": "#/parameters/optionalOrderId"
          },
          {
            "$ref": "#/parameters/optionalOrderChangeId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaggagePoliciesReply"
            }
          },
          "400": {
            "description": "Bad request\nErrors that can be returned by the application:\n\n|  Code   |                Title               | Description                                                                |\n|:-------:|:----------------------------------:|----------------------------------------------------------------------------|\n|  04926  | INVALID DATA RECEIVED              | Error returned in case of input bad format                                 |\n|  32700  | INVALID INPUT DATA                 | Error returned in case of wrong input data                                 |          \n|  36962  | LAST NAME SHOULD BE PROVIDED       | Error returned when no last name is provided                               |\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Not found\nErrors that can be returned by the application:\n|  Code   |         Title         | Description                                                                                        |\n|:-------:|:---------------------:|----------------------------------------------------------------------------------------------------|\n|  36798  | CART NOT FOUND          | Error returned when no cart was found for provided cartId                                        |\n|  36894  | ORDER NOT FOUND         | Error returned when no order was found for provided orderId                                      |\n|  37594  | NO FLIGHTS IN THE ORDER | No flight found in PNR.                                                                          |\n|  39836  | ORDER CHANGE NOT FOUND  | Error returned when the OrderChange can't be retrieved                                           |\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/search/air-offer-conditions": {
      "get": {
        "summary": "Retrieve the fare conditions",
        "description": "Retrieve the most important fare condition categories (refundability, exchangeability, advance purchase, minimum/maximum stay) for selected flights retrieved either:\n  - for an air-offer\n  - for an air-offer stored in a cart\n  - for an order\n  - for an order change\n  - for a travel document\n\nOnly 1 of these 5 parameters can be used in the request: airOfferId, cartId or orderId or orderChangeId or travelDocumentId. An error is returned otherwise.\nParameter orderChangeId is used to retrieve the air offer conditions of an order under voluntary exchange and pending payment, i.e. following a call to POST /purchase/orders/{orderId}/air-bound-exchanges-confirmation endpoint with a payment to be collected and no payment method provided.\nThese fare conditions are grouped by priced PTC and are exposed by category, defined for a given flight.\n\nA category can contain a list of situations and is assiacted to a list of mini rule keys defined with localization templates.\n\nFare conditions are expressed in verbal format, localized in desired language.\n\nThe available languages are: AR AZ BG BR CA CN CS DE DK EL ES ET FC FI FO FR GB HE HI HR HU ID IS IT JP KL KO LK MN MY NL NO PL PO RO RU SE SK TA TH TK TW UK US VN. Only GB is officially supported. Upon request, additional validation will be done for each new language to support.\n",
        "operationId": "airOfferConditions",
        "tags": [
          "FareConditions"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/optionalCartId"
          },
          {
            "$ref": "#/parameters/optionalAirOfferId"
          },
          {
            "$ref": "#/parameters/optionalOrderId"
          },
          {
            "$ref": "#/parameters/optionalOrderChangeId"
          },
          {
            "$ref": "#/parameters/optionalTravelDocumentId"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "$ref": "#/parameters/lastName"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned in case of succesfull air offer conditions retrieval or in case of functional error\nWarnings that can be returned by the application:\n|  Code   |                   Title                   | Description                                                                                |\n|:-------:|:-----------------------------------------:|--------------------------------------------------------------------------------------------|\n|  37242  | PARTIAL RESULT, SOME FARE RULES NOT FOUND | Warning returned when offer conditions are found only for part of the records in the Order |\n\nErrors that can be returned by the application:\n|  Code   |             Title             | Description                                                            |\n|:-------:|:-----------------------------:|------------------------------------------------------------------------|\n|  29149  | NO AIR OFFER CONDITIONS FOUND | Error returned in case of no air offer conditions information is found |\n",
            "schema": {
              "$ref": "#/definitions/AirOfferConditionsReply"
            }
          },
          "400": {
            "description": "Bad request\nErrors that can be returned by the application:\n|  Code   |                    Title                     | Description                                                                             |\n|:-------:|:--------------------------------------------:|-----------------------------------------------------------------------------------------|\n|  477    | INVALID FORMAT                               | Error returned when input format is incorrect                                           |\n|  04926   | INVALID DATA RECEIVED                       | Error returned when no input options are specified (one among airOfferId, cartId, orderId should be provided).|\n|  5490   | OPTIONS NOT COMBINABLE                       | Error returned when a mix of reference type is received in input                        |\n|  36962  | LAST NAME SHOULD BE PROVIDED                 | Error returned when no last name is provided when mini rules from order is requested    |\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "403": {
            "description": "Forbidden\nErrors that can be returned by the application:\n|  Code   |         Title         | Description                                                                              |\n|:-------:|:---------------------:|------------------------------------------------------------------------------------------|\n|  38494  | FEATURE NOT ALLOWED   | Error returned when user does not have the correct rights to display the Fare conditions |\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Not found\nErrors that can be returned by the application:\n|  Code   |    Title       | Description                                                                    |\n|:-------:|:--------------:|--------------------------------------------------------------------------------|\n|  36799  | OFFER NOT FOUND| Error returned when no offer was found for the provided offer id or cart id    |\n|  36798  | CART NOT FOUND | Error returned when no cart was found for the provided cart id                 |\n|  36894  | ORDER NOT FOUND| Error returned when no order was found for the provided order id and last name |\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/search/raw-air-offer-conditions": {
      "get": {
        "summary": "Retrieve the full fare conditions in raw format",
        "description": "Retrieve the full fare conditions applicable for the requested travelers either:\n   - for an air-offer stored in a cart\n   - for an order (not yet supported)\n\nFull fare conditions are the representation of the exhaustive list of purchase conditions defined by the airline for a given fare.\nFare conditions are returned in English in raw format ordered by fare categories.\nWarning: retrieving the full fare conditions for too many travelers may have an impact on the API performences by increasing the response time.\nWhen specified, fare conditions are returned only for the sub-set of requested fare categories.",
        "operationId": "rawAirOfferConditions",
        "tags": [
          "FareConditions"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/optionalCartId"
          },
          {
            "$ref": "#/parameters/optionalOrderId"
          },
          {
            "$ref": "#/parameters/optionalOrderChangeId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/optionalTravelerIds"
          },
          {
            "$ref": "#/parameters/optionalCategories"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned in case of succesfull fare conditions retrieval or in case of functional error\nWarnings that can be returned by the application:\n|  Code   |          Title        | Description                                                        |\n|:-------:|:---------------------:|--------------------------------------------------------------------|\n|  39675  | MAXIMUM DATA EXCEEDED | Warning returned when the content to be retrieved exceed 399 lines |\nErrors that can be returned by the application:\n|  Code   |                 Title                 | Description                                                                 |\n|:-------:|:-------------------------------------:|-----------------------------------------------------------------------------|\n|  39533  | UNABLE TO RETRIEVE OFFER CONDITIONS   | Error returned in case of error occurs while retrieving the fare conditions |\n",
            "schema": {
              "$ref": "#/definitions/RawAirOfferConditionsReply"
            }
          },
          "400": {
            "description": "Bad request\nErrors that can be returned by the application:\n|  Code   |             Title             | Description                                                                                                       |\n|:-------:|:-----------------------------:|-------------------------------------------------------------------------------------------------------------------|\n|  04926  | INVALID DATA RECEIVED         | Error returned when one of the provided categories is not valid                                                   |\n|  36962   | LAST NAME SHOULD BE PROVIDED | Error returned when raw air offer conditions are requested for an Order with no last name provided in the request |\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Not found\nErrors that can be returned by the application:\n|  Code   |         Title         | Description                                                                                        |\n|:-------:|:---------------------:|----------------------------------------------------------------------------------------------------|\n|  36798  | CART NOT FOUND          | Error returned when no cart was found for provided cartId                                        |\n|  36894  | ORDER NOT FOUND         | Error returned when no order was found for provided orderId                                      |\n|  37594  | NO FLIGHTS IN THE ORDER | No flight found in PNR.                                                                          |\n|  36799  |\tOFFER NOT FOUND         | No offer found in cart.                                                                          |\n|  36890  | TRAVELER NOT FOUND      | Error returned when provided travelerId does not correspond to any traveler in the cart or order |\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "500": {
            "description": "Internal server error\nErrors that can be returned by the application:\n|  Code   |                 Title                | Description                                                                     |\n|:-------:|:------------------------------------:|---------------------------------------------------------------------------------|\n|   11    | UNABLE TO PROCESS                    | Error returned when no cart was found for provided cartId                       |\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/search/air-bounds": {
      "post": {
        "summary": "Construction mode search for air bounds",
        "description": "This is a shopping transaction that returns a list of air bounds corresponding to the provided search criteria.\nAn 'AirBound' corresponds to a flight proposal for a given bound (i.e. for a round-trip MAD-LON, the first bound is MAD-LON and the second bound is LON-MAD)..\n",
        "operationId": "airBoundsShopping",
        "tags": [
          "AirBound"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/lang"
          },
          {
            "name": "airBoundsInputs",
            "description": "Description of inputs needed to perform the search of airBounds",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AirBoundsSearchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK\nWarnings that can be returned by the application:\n|  Code   |                   Title                        | Description                                                                                          |\n|:-------:|:----------------------------------------------:|---------------------------------------------------------------------------------------------------------------------------|\n|  39571  | WAITLIST DETAILS ARE NOT AVAILABLE FOR FLIGHTS | Warning returned if waitlist status flag is returned at offer level but not returned at flight level                      |\n|  39997  | NO FREE BAGGAGE ALLOWANCE                      | Warning returned when no Free baggage allowance info nor any details available                                            |\n|  40003  | MISSING FREE BAGGAGE DETAILS                   | Warning returned when only Free baggage allowance info available but no details available                                 |\n|  40284  | BOUND PRICE MAY HAVE CHANGED FOR SOME OFFERS   | Warning returned when previous selected bound price has changed in Bound update step compared to the bound calculate step |\nErrors that can be returned by the application:\n|  Code   |    Title                                              | Description                                                                                              |\n|:-------:|:-----------------------------------------------------:|----------------------------------------------------------------------------------------------------------|\n|  2381\t  |  UNKNOWN CITY/AIRPORT                                 |  Error returned when City/Airport in Input is Invalid                                                    |\n|  7959   |  NO FLIGHTS FOUND                               \t    |  Error returned when no flights found for the route                                                      |\n|  36917  |  INVALID COMMERCIAL FARE FAMILY                 \t    |  Error returned when input Commercial Fare Family is Invalid                                             |\n|  37264  |  INVALID TRAVELER TYPE\t                        \t    |  Error returned when Input passenger type is not authorized by Airline                                   |\n|  37652  |\t INVALID NUMBER OF REQUESTED OFFERS              \t    |  Error returned when requested number of offers exceeds the maximum number allowed by the airline.       |\n|  38414  |  MISSING PART OF ITINERARY                      \t    |\t Error raised in OWC when bound IDs are valid but the itinerary is incomplete                            |\n|  38607  |  BOUND OFFERS HAVE EXPIRED                      \t    |  Error returned in Bound update or merge bound if time to live of offer is expired\t                     |\n|  38608  |  UNABLE TO MERGE BOUND OFFERS                   \t    |\t Error raised to catch all other technical errors returned by Combine service                            |\n|  38931  |  MISSING AIRLINE CODE                             \t  |  Error returned when Airline code is missing for features where like promocode or CEM or Frequent Flyer  |\n|  39236  |  MISSING COMMERCIAL FARE FAMILY\t                \t    |  Error returned when Commercial Fare Family is not provided in Input                                     |\n|  39237  |\t COMMERCIAL FARE FAMILIES COMBINATION NOT ALLOWED \t  |  Error returned when Commercial Fare Family is provided for Bound as well as Itinerary                   |\n|  39238  |  MAXIMUM NUMBER OF COMMERCIAL FARE FAMILIES EXCEEDED  |  Error returned when CFFs requested in input is more than allowed                                        |\n|  39393  |\t INVALID TICKETING/SELLING CITY                  \t    |\t Error returned in case Selling or Ticketing Point city are Invalid                                      |\n|  39622  |  FARE FAMILY OPTION NOT ALLOWED                       |  Error returned Fare family benefits are requested but not activated from CS                             |\n|  39632  |  ANCILLARY SERVICE SUBCODES MISSING                   |  Error returned if Ancillaries are requested but Ancillary sub codes are not configured.                 |\n",
            "schema": {
              "$ref": "#/definitions/AirBoundsListReply"
            }
          },
          "400": {
            "description": "Bad request\nErrors that can be returned by the application: |  Code   |    Title                                  | Description                                                                                                                          |\n|:-------:|:-----------------------------------------:|--------------------------------------------------------------------------------------------------------------------------------------|\n|  1      |  CHECK FORMAT                             |  Error returned when input format is invalid e.g. specified Passgenger type code is Invalid or their quantity is Invalid             |\n|  1112\t  |  INVALID ITINERARY                        |  Error returned when Invalid itinerary is requested e.g. same Origin and Destination are provided in Input or date provided is past  |\n|  04926  |  INVALID DATA RECEIVED\t                  |  Error returned when Input received is unexpected e.g. - Number of Bounds requested is more than 6                                   |\n|  09385  |  INVALID NUMBER OF PASSENGER              |  Error returned when Too many passengers requested. The maximum allowed is 9                                                         |\n|  37011  |  INFANT SHOULD TRAVEL WITH AN ADULT\t      |  Error returned when number of Infants are more than number of Adult passengers                                                      |\n|  38119  |  COMBINATION NOT ALLOWED\t                |  Error returned when two contradicted features are requested together e.g. DirectFlight and Stopover     |\n|  38411  |  INVALID REQUESTED BOUND                  |  Invalid Requested Bound in input request<br>OR isRequestedBound is TRUE or FALSE for both bounds<br>OR If Only one isRequestedBound is present, and its value is False<br>OR The selected bound id is not in good format<br>OR The selected bound is Soldout |\n|  38412  |  AIR-BOUNDS RESOURCE NOT SUPPORTED        |  Error returned when the air-bounds resource is not configured                                                                       |\n|  38413  |  DUPLICATED BOUND OFFER IDS               |  Error returned when issue occurred during parallel processing                                                                       |\n|  38415  |  BOUND OFFER IDS FROM MIXED TRANSACTIONS  |  Error returned when OfferId used is from another transaction                                                                        |\n|  38494  |  FEATURE NOT ALLOWED                      |  Error returned when a requested feature is not configured                                               |\n|  38904  |  INVALID OR INCOMPLETE REQUEST            |  Error returned when search context validation fails between a Bound Calculate and Bound Update step.                                |\n|  41211  |  INVALID STAY DURATION                    |  Error returned when stop over stay duration is invalid                                                                              |\n|  65012  |  BOUND NOT FOUND                          |\t Error returned when the selected bound id is not found or expired.                                      |\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/search/air-calendars": {
      "get": {
        "summary": "Retrieve air calendar information (cheapest price per day)",
        "description": "Air calendar enables a customer who has flexible dates to see the cheapest price option per day over a range of days.\nThe number of days of flexibility can be sent in input to indicate the number of days before and after the requested date to be searched.\nFor a round trip request, the standard range of days is up to 7, meaning three days before and three days after the requested date.\nFor a one-way request, the range is up to 15 days, meaning seven days before and seven days after the requested date.\nBy default if no travellers are specified, the results are returned for one adult. Also, if no flexibility is specified, for both one way and round-trip the results returned are for a range of seven days, meaning three days before and three days after the requested date.\nThe standard flexibility ranges can be extended using implementation configuration settings.\nNote that only the price is returned, not the details of the flights.\nDictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).\n",
        "operationId": "airCalendar",
        "tags": [
          "AirCalendar"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/departureDateTime"
          },
          {
            "$ref": "#/parameters/originLocationCode"
          },
          {
            "$ref": "#/parameters/destinationLocationCode"
          },
          {
            "$ref": "#/parameters/returnDateTime"
          },
          {
            "$ref": "#/parameters/flexibility"
          },
          {
            "$ref": "#/parameters/commercialFareFamilies"
          },
          {
            "$ref": "#/parameters/maxPrice"
          },
          {
            "$ref": "#/parameters/travelers"
          },
          {
            "$ref": "#/parameters/departureTimeWindow"
          },
          {
            "$ref": "#/parameters/returnTimeWindow"
          },
          {
            "$ref": "#/parameters/alternateOriginLocationCode"
          },
          {
            "$ref": "#/parameters/alternateDestinationLocationCode"
          },
          {
            "$ref": "#/parameters/corporateCodes"
          },
          {
            "$ref": "#/parameters/directFlights"
          },
          {
            "$ref": "#/parameters/promotionCode"
          },
          {
            "$ref": "#/parameters/promotionAirlineCode"
          },
          {
            "$ref": "#/parameters/showUnavailableEntries"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "description": "OK\n  \nErrors that can be returned by the application:\n|  Code   |    Title                       | Description                                                              |\n|:------:|:-------------------------------:|--------------------------------------------------------------------------|\n|  2381  |  UNKNOWN CITY/AIRPORT           |  Error returned when City/Airport in Input is Invalid\t                  |\n|  7959  |  NO FLIGHTS FOUND               |  Error returned when no flights found for the route                      |\n|  12462 |  INVALID TIME WINDOW            |  Error returned when when Time window value is not in the range 1 and 8  |\n|  39393 |  INVALID TICKETING/SELLING CITY |  Error returned in case Selling or Ticketing Point city are Invalid      |\n|  36917 |  INVALID COMMERCIAL FARE FAMILY |  Error returned when input Commercial Fare Family is Invalid             |\n|  37264 |  INVALID TRAVELER TYPE\t         |  Error returned when Input passenger type is not authorized by Airline   |\n",
            "schema": {
              "$ref": "#/definitions/AirCalendarReply"
            }
          },
          "400": {
            "description": "Bad request\nErrors that can be returned by the application:\n|  Code   |    Title                            | Description                                                                                                                          |\n|:-------:|:-----------------------------------:|--------------------------------------------------------------------------------------------------------------------------------------|\n|  1      |  CHECK FORMAT                       |  Error returned when input format is invalid e.g. specified Passenger type code is Invalid or their quantity is Invalid\t             |\n|  1112\t  |  INVALID ITINERARY                  |  Error returned when Invalid itinerary is requested e.g. same Origin and Destination are provided in Input or date provided is past  |\n|  09385  |  INVALID NUMBER OF PASSENGER        |  Error returned when Too many passengers requested. The maximum allowed is 9                                                         |\n|  36996  |  INVALID FLEXIBILITY                |  Error returned when the flexibility input parameter contains a value outside the supported range of days of flexibility.            |\n|  37011  |  INFANT SHOULD TRAVEL WITH AN ADULT\t|  Error returned when number of Infants are more than number of Adult passengers                                                      |\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "post": {
        "summary": "Advanced search for air calendars (cheapest price per day)",
        "description": "Air calendar enables a customer who has flexible dates to see the cheapest price option per day over a range of days.\nThe number of days of flexibility can be sent in input to indicate the number of days before and after the requested date to be searched.\nFor a round trip request, the standard range of days is up to 7, meaning three days before and three days after the requested date.\nFor a one-way request, the range is up to 15 days, meaning seven days before and seven days after the requested date.\nBy default if no travellers are specified, the results are returned for one adult. Also, if no flexibility is specified, for both one way and round-trip the results returned are for a range of seven days, meaning three days before and three days after the requested date.\nThe standard flexibility ranges can be extended using implementation configuration settings.\nNote that only the price is returned, not the details of the flights.\nDictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).\n",
        "operationId": "advancedAirCalendar",
        "tags": [
          "AirCalendar"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/lang"
          },
          {
            "name": "advancedCalendarInputs",
            "description": "Description of inputs needed to perform the advanced search of airCalendar",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AirCalendarAdvancedSearchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK\nErrors that can be returned by the application:\n|  Code   |    Title                       | Description                                                              |\n|:------:|:-------------------------------:|--------------------------------------------------------------------------|\n|  7959  |  NO FLIGHTS FOUND               |  Error returned when no flights found for the route                      |\n|  36917 |  INVALID COMMERCIAL FARE FAMILY |  Error returned when input Commercial Fare Family is Invalid             |\n|  2381  |  UNKNOWN CITY/AIRPORT           |  Error returned when City/Airport in Input is Invalid\t                  |\n|  37264 |  INVALID TRAVELER TYPE\t       |  Error returned when Input passenger type is not authorized by Airline   |\n|  39393 |  INVALID TICKETING/SELLING CITY |  Error returned in case Selling or Ticketing Point city are Invalid      |\n|  12462 |  INVALID TIME WINDOW            |  Error returned when when Time window value is not in the range 1 and 8  |\n|  65012 |  BOUND NOT FOUND                |  Error returned when the selected bound id is not found or expired.      |\n",
            "schema": {
              "$ref": "#/definitions/AirCalendarReply"
            }
          },
          "400": {
            "description": "Bad request\nErrors that can be returned by the application:\n|  Code   |    Title                            | Description                                                                                                                          |\n|:-------:|:-----------------------------------:|--------------------------------------------------------------------------------------------------------------------------------------|\n|  1      |  CHECK FORMAT                       |  Error returned when input format is invalid e.g. specified Passenger type code is Invalid or their quantity is Invalid\t             |\n|  1112\t  |  INVALID ITINERARY                  |  Error returned when Invalid itinerary is requested e.g. same Origin and Destination are provided in Input or date provided is past  |\n|  04926  |  INVALID DATA RECEIVED\t            |  Error returned when Input received is unexpected e.g. - Number of Bounds requested is more than 6                                   |\n|  09385  |  INVALID NUMBER OF PASSENGER        |  Error returned when Too many passengers requested. The maximum allowed is 9                                                         |\n|  36996  |  INVALID FLEXIBILITY                |  Error returned when the flexibility input parameter contains a value outside the supported range of days of flexibility.            |\n|  37011  |  INFANT SHOULD TRAVEL WITH AN ADULT\t|  Error returned when number of Infants are more than number of Adult passengers                                                      |\n|  38119  |  COMBINATION NOT ALLOWED            |  Error returned when two contradicted features are requested together e.g. DirectFlight and Stopover                                 |\n|  38411  |  INVALID REQUESTED BOUND\t          |  Invalid Requested Bound in input request<br>OR isRequestedBound is TRUE or FALSE for both bounds<br>OR If Only one isRequestedBound is present, and its value is False<br>OR The selected bound id is not in good format<br>OR The selected bound is Soldout |\n|  38494  |  FEATURE NOT ALLOWED                |  Error returned when a requested feature is not configured                                                                           |\n|  38904  |  INVALID OR INCOMPLETE REQUEST      |  Error returned when search context validation fails between a Bound Calculate and Bound Update step                                 |\n|  40636  |  DATE FLEXIBILITY NOT ALLOWED       |  Error returned Date flexibility is provided for a bound with isRequestedBound as False                                              |\n|  40637  |  REQUESTED BOUND MISSING            |  Error Returned when in Mono bound computation flow isRequestedBound is not provided                                                 |\n|  41211  |  INVALID STAY DURATION              |  Error returned when stop over stay duration is invalid                                                                              |\n|  65012 |  BOUND NOT FOUND                     |  Error returned when the selected bound id is not found or expired.                                                                  |\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/search/air-offers": {
      "get": {
        "summary": "Retrieve air offers with additional services",
        "description": "This is a shopping transaction that returns a list of air offers and associated services for a given set of criteria.\nSo far only one way and round trip are supported.\nNote #1: In case the number of travelers is not specified, by default the Digital API returns the result for one adult.\nNote #2: Complex Itinerary and Round the World are not directly supported (they will be supported as multi steps transaction).\nNote #3: Dictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).\n",
        "operationId": "airShopping",
        "tags": [
          "AirOffer"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/departureDateTime"
          },
          {
            "$ref": "#/parameters/originLocationCode"
          },
          {
            "$ref": "#/parameters/destinationLocationCode"
          },
          {
            "$ref": "#/parameters/returnDateTime"
          },
          {
            "$ref": "#/parameters/commercialFareFamilies"
          },
          {
            "$ref": "#/parameters/travelers"
          },
          {
            "$ref": "#/parameters/max"
          },
          {
            "$ref": "#/parameters/maxPrice"
          },
          {
            "$ref": "#/parameters/departureTimeWindow"
          },
          {
            "$ref": "#/parameters/returnTimeWindow"
          },
          {
            "$ref": "#/parameters/alternateOriginLocationCode"
          },
          {
            "$ref": "#/parameters/alternateDestinationLocationCode"
          },
          {
            "$ref": "#/parameters/corporateCodes"
          },
          {
            "$ref": "#/parameters/directFlights"
          },
          {
            "$ref": "#/parameters/promotionCode"
          },
          {
            "$ref": "#/parameters/promotionAirlineCode"
          },
          {
            "$ref": "#/parameters/showSoldOut"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "description": "OK\nErrors that can be returned by the application:\n|  Code  |    Title                                               | Description                                                                                              |\n|:------:|:------------------------------------------------------:|----------------------------------------------------------------------------------------------------------|\n|  2381  |  UNKNOWN CITY/AIRPORT                            \t    |  Error returned when City/Airport in Input is Invalid\t                                                   |\n|  7959  |  NO FLIGHTS FOUND                 \t                    |  Error returned when no flights found for the route                                                      |\n|  36917 |  INVALID COMMERCIAL FARE FAMILY                        |  Error returned when input Commercial Fare Family is Invalid                                             |\n|  37264 |  INVALID TRAVELER TYPE\t                        \t      |  Error returned when Input passenger type is not authorized by Airline                                   |\n|  37652 |\tINVALID NUMBER OF REQUESTED OFFERS              \t    |  Error returned when requested number of offers exceeds the maximum number allowed by the airline        |\n|  38931 |  MISSING AIRLINE CODE                             \t    |  Error returned when Airline code is missing for features where like promocode or CEM or Frequent Flyer  |\n|  39393 |  INVALID TICKETING/SELLING CITY             \t          |\t Error returned in case Selling or Ticketing Point city are Invalid                                      |\n",
            "schema": {
              "$ref": "#/definitions/AirOffersListReply"
            }
          },
          "400": {
            "description": "Bad request\nErrors that can be returned by the application: |  Code  |    Title                             | Description                                                                                                                          |\n|:-------:|:-----------------------------------:|--------------------------------------------------------------------------------------------------------------------------------------|\n|  1      |  CHECK FORMAT                       |  Error returned when input format is invalid e.g. specified Passenger type code is Invalid or their quantity is Invalid\t           |\n|  1112\t  |  INVALID ITINERARY                  |  Error returned when Invalid itinerary is requested e.g. same Origin and Destination are provided in Input or date provided is past  |\n|  04926  |  INVALID DATA RECEIVED\t            |  Error returned when Input received is unexpected e.g. - Number of Bounds requested is more than 6                                   |\n|  09385  |  INVALID NUMBER OF PASSENGER        |  Error returned when Too many passengers requested. The maximum allowed is 9                                                         |\n|  37011  |  INFANT SHOULD TRAVEL WITH AN ADULT\t|  Error returned when number of Infants are more than number of Adult passengers                                                      |\n|  38494 |  FEATURE NOT ALLOWED                 |\t Error returned when a requested feature is not configured in Backend                                    |\n|  38601  |  AIR-OFFERS RESOURCE NOT SUPPORTED  |  Error returned FlexPricer is configured for OWC or Premium mode but Air-offers is requested                                         |\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "post": {
        "summary": "Advanced search for air offers with additional services",
        "description": "This is a shopping transaction that returns a list of air offers and associated services for a given set of criteria.\nThis entry point supports all the advanced use-cases on top of the simple entry point (i.e. all traveler associations, PTC discounts).\n",
        "operationId": "advancedAirShopping",
        "tags": [
          "AirOffer"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/lang"
          },
          {
            "name": "advancedInputs",
            "description": "Description of inputs needed to perform the advanced search of airOffers",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AirOffersAdvancedSearchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK Warnings that can be returned by the application:\n|  Code   |                   Title                        | Description                                                                                          |\n|:-------:|:----------------------------------------------:|------------------------------------------------------------------------------------------------------|\n|  39571  | WAITLIST DETAILS ARE NOT AVAILABLE FOR FLIGHTS | Warning returned if waitlist status flag is returned at offer level but not returned at flight level |\n|  39874  | MISSING PERSONAZILATION INFORMATION            | Warning returned when no personalization will apply as missing information from input                |\nErrors that can be returned by the application:\n|  Code  |    Title                                             | Description                                                                                              |\n|:------:|:----------------------------------------------------:|----------------------------------------------------------------------------------------------------------|\n|  7959  |  NO FLIGHTS FOUND                 \t                  |  Error returned when no flights found for the route                                                      |\n|  36917 |  INVALID COMMERCIAL FARE FAMILY                      |  Error returned when input Commercial Fare Family is Invalid                                             |\n|  2381  |  UNKNOWN CITY/AIRPORT                                |  Error returned when City/Airport in Input is Invalid\t                                                   |\n|  37264 |  INVALID TRAVELER TYPE\t                              |  Error returned when Input passenger type is not authorized by Airline                                   |\n|  39393 |  INVALID TICKETING/SELLING CITY                      |  Error returned in case Selling or Ticketing Point city are Invalid                                      |\n|  37652 |  INVALID NUMBER OF REQUESTED OFFERS                  |  Error returned when requested number of offers exceeds the maximum number allowed by the airline        |\n|  38494 |  FEATURE NOT ALLOWED                                 |  Error returned when a requested feature is not configured in Backend                                    |\n|  38931 |  MISSING AIRLINE CODE                                |  Error returned when Airline code is missing for features where like promocode or CEM or Frequent Flyer  |\n|  39237 |  COMMERCIAL FARE FAMILIES COMBINATION NOT ALLOWED    |  Error returned when Commercial Fare Family is provided for Bound as well as Itinerary                   |\n|  37652 |  INVALID NUMBER OF REQUESTED OFFERS                  |  Error returned when requested number of offers exceeds the maximum number allowed by the airline        |\n|  39238 |  MAXIMUM NUMBER OF COMMERCIAL FARE FAMILIES EXCEEDED |  Error returned when CFFs requested in input is more than allowed                                        |\n",
            "schema": {
              "$ref": "#/definitions/AirOffersListReply"
            }
          },
          "400": {
            "description": "Bad request\nErrors that can be returned by the application: |  Code  |    Title                                   | Description                                                                                                                          |\n|:-------:|:-----------------------------------------:|--------------------------------------------------------------------------------------------------------------------------------------|\n|  38904  |  INVALID OR INCOMPLETE REQUEST            |\t Error returned when input is Invalid.                                                                                               |\n|  1      |  CHECK FORMAT                             |  Error returned when input format is invalid e.g. specified Passenger type code is Invalid or their quantity is Invalid\t         |\n|  1112\t  |  INVALID ITINERARY                        |  Error returned when Invalid itinerary is requested e.g. same Origin and Destination are provided in Input or date provided is past  |\n|  09385  |  INVALID NUMBER OF PASSENGER              |  Error returned when Too many passengers requested. The maximum allowed is 9                                                         |\n|  04926  |  INVALID DATA RECEIVED\t                  |  Error returned when Input received is unexpected e.g. - Number of Bounds requested is more than 6                                   |\n|  37011  |  INFANT SHOULD TRAVEL WITH AN ADULT\t      |  Error returned when number of Infants are more than number of Adult passengers                                                      |\n|  40156  |  MISMATCH IN BOUND ID                     |  Error returned when TID in Show More Flights does not match with the Itinerary                                                      |\n|  40155  |  UNABLE TO RETRIEVE OFFER                 |  Error returned when Base Offer ID is not valid                                                                                      |\n|  40154  |  TID SKIP NOT ALLOWED                     |  Error Returned in Find more flight when bound in Input is not tagged with valid TID                                                 |\n|  40157  |  MISSING MORE FLIGHTS INFO                |  Error Returned when more flights info is missing                                                                                    |\n|  40151  |  TOO MANY REQUESTED SEGMENTS              |  Error returned when Backend is not configured for complex Itinerary and more than 2 bounds are requested                            |\n|  40153  |  INVALID NUMBER OF BOUNDS                 |  Error returned when showMoreFlights is available in search preference but requested number of bounds is 2 or less                   |\n|  612477 |  DUPLICATE BOUNDS NOT ALLOWED             |  Error returned in case of open jaw or complex itinerary 2 bounds with same details are provided in Input                            |\n|  612478 |  DATES ARE NOT IN THE CHRONOLOGICAL ORDER |  Error returned in case of open jaw or complex itinerary if the date of the bounds are not in chronological order.                   |\n|  38601  |  AIR-OFFERS RESOURCE NOT SUPPORTED        |  Error returned FlexPricer is configured for OWC or Premium mode but Air-offers is requested                                         |\n|  38119  |  COMBINATION NOT ALLOWED                  |  Error returned when two contradicted features are requested together e.g. DirectFlight and Stopover                                 |\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/search/air-offers/by-offer": {
      "post": {
        "summary": "Advanced search for air offers with additional services by air-offer",
        "operationId": "advancedAirshoppingByOffer",
        "tags": [
          "AirOffer"
        ],
        "description": "This is a shopping transaction that returns a list of air offers and associated services searched by air-offer.",
        "parameters": [
          {
            "$ref": "#/parameters/lang"
          },
          {
            "name": "advancedInputs",
            "description": "Description of inputs needed to perform the advanced search of airOffers by airOffer",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AirOffersAdvancedSearchRequestByOffer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK\n",
            "schema": {
              "$ref": "#/definitions/AirOffersListReply"
            }
          },
          "400": {
            "description": "Bad Request\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/search/air-offers/from-offer/{airOfferId}/more-flights": {
      "post": {
        "summary": "Advanced search to get more flights solutions in case of complex trip",
        "operationId": "advancedAirShoppingMoreFlights",
        "tags": [
          "AirOffer"
        ],
        "description": "This is a shopping transaction that returns a list of air offers and associated services searched by air-offer.\n",
        "parameters": [
          {
            "$ref": "#/parameters/airOfferId"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "name": "advancedInputs",
            "description": "Description of inputs needed to perform the more flights search of airOffers by airOffer",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AirShoppingMoreFlightsSearchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK\n",
            "schema": {
              "$ref": "#/definitions/AirOffersListReply"
            }
          },
          "400": {
            "description": "Bad Request\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/search/air-offers/from-offer/{airOfferId}/upsells": {
      "post": {
        "summary": "Advanced search that enables upsell to higher fare family",
        "operationId": "advancedAirshoppingUpsell",
        "tags": [
          "AirOffer"
        ],
        "description": "This is a shopping transaction that returns a list of air offers and associated services searched by air-offer.\n",
        "parameters": [
          {
            "$ref": "#/parameters/airOfferId"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "name": "advancedInputs",
            "description": "Description of inputs needed to upgrade of fare family",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AirOffersUpgradeOfferSearchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK\n",
            "schema": {
              "$ref": "#/definitions/AirOffersListReply"
            }
          },
          "400": {
            "description": "Bad Request\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/shopping/carts/{cartId}/services": {
      "get": {
        "summary": "Retrieve services from a cart",
        "description": "Retrieve services currently stored in the cart.\nService dictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).\n",
        "operationId": "retrieveServicesFromCart",
        "tags": [
          "Cart"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lastName"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ServicesReply"
            }
          },
          "400": {
            "description": "** Error Codes **\n\ncode    | title\n------- | -----------------------\n111     | Check format\n2222    | Mandatory data missing\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "summary": "Add services to a cart",
        "description": "Add a service (chosen from the catalogue of services) to the cart.\nService dictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).\n",
        "operationId": "addServicesToCart",
        "tags": [
          "Cart"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/refreshAncillaries"
          },
          {
            "name": "postServicesBody",
            "in": "body",
            "description": "Service details",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServiceItemRequest"
              }
            }
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ServicesReply"
            }
          },
          "400": {
            "description": "** Error Codes **\n\ncode    | title\n------- | -----------------------\n111     | Check format\n2222    | Mandatory data missing\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "patch": {
        "summary": "Partial update of existing services in cart",
        "description": "Partial update of existing services in the cart.\nService dictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).\n",
        "operationId": "patchServicesInCart",
        "tags": [
          "Cart"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "name": "patchServicesBody",
            "in": "body",
            "description": "Service details",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UpdateServiceItemsRequest"
              }
            }
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ServicesReply"
            }
          },
          "400": {
            "description": "** Error Codes **\n\ncode    | title\n------- | -----------------------\n111     | Check format\n2222    | Mandatory data missing\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "summary": "Remove services from a cart",
        "description": "Delete services from a cart.",
        "operationId": "deleteServicesFromCart",
        "tags": [
          "Cart"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/refreshAncillaries"
          },
          {
            "name": "serviceIds",
            "description": "List of services to delete from a cart.",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "[a-zA-Z0-9-]{1,50}"
            },
            "collectionFormat": "csv"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/shopping/carts/{cartId}/services/{serviceId}": {
      "get": {
        "summary": "Retrieve a service from a cart",
        "description": "Retrieve a service currently stored in the cart.\nService dictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).\n",
        "operationId": "retrieveServiceFromCart",
        "tags": [
          "Cart"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "$ref": "#/parameters/serviceId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ServiceReply"
            }
          },
          "400": {
            "description": "** Error Codes **\n\ncode    | title\n------- | -----------------------\n111     | Check format\n2222    | Mandatory data missing\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "patch": {
        "summary": "Update a service from a cart",
        "description": "Update a service currently stored in the cart.\nService dictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).\n",
        "operationId": "patchServiceFromCart",
        "tags": [
          "Cart"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "$ref": "#/parameters/serviceId"
          },
          {
            "name": "patchServiceBody",
            "in": "body",
            "description": "Service or seat details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateServiceItemRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ServiceReply"
            }
          },
          "400": {
            "description": "** Error Codes **\n\ncode    | title\n------- | -----------------------\n111     | Check format\n2222    | Mandatory data missing\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "summary": "Delete service from a cart",
        "description": "Delete service from a cart.",
        "operationId": "deleteServiceFromCart",
        "tags": [
          "Cart"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "$ref": "#/parameters/serviceId"
          },
          {
            "$ref": "#/parameters/refreshAncillaries"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/purchase/orders/{orderId}/services": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Retrieve all services from an order",
        "description": "Retrieve a list of services from an order.\nService dictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).\n",
        "operationId": "retrieveServicesFromOrder",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/firstName"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OrderServicesReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "post": {
        "summary": "Add services to an order",
        "description": "Add services (chosen from the catalogue of services) to an order.\nService dictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).\n",
        "operationId": "addServicesToOrder",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/firstName"
          },
          {
            "name": "postOrderServicesBody",
            "in": "body",
            "description": "Services and payment details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostOrderServiceRequest"
            }
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/OrderServicesReply"
            }
          },
          "400": {
            "description": "** Error Codes **\n\ncode    | title\n------- | -----------------------\n111     | Check format\n2222    | Mandatory data missing\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "summary": "Remove services from an order",
        "description": "Delete services from an order.",
        "operationId": "deleteServicesFromOrder",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/firstName"
          },
          {
            "name": "serviceIds",
            "description": "List of services to delete from an order.",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "[a-zA-Z0-9-]{1,50}"
            },
            "collectionFormat": "csv"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/purchase/orders/{orderId}/services/{serviceId}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Retrieve a specific service from an order",
        "description": "Retrieve a service item from an order.\nService dictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).\n",
        "operationId": "retrieveServiceFromOrder",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/firstName"
          },
          {
            "$ref": "#/parameters/serviceId"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OrderServiceReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete service from an order",
        "description": "Delete service from an order.",
        "operationId": "deleteServiceFromOrder",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/firstName"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "$ref": "#/parameters/serviceId"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/shopping/carts/{cartId}/seats": {
      "get": {
        "summary": "Retrieve seats from a cart",
        "description": "Retrieve seats currently present in the cart.\n",
        "operationId": "retrieveSeatsFromCart",
        "tags": [
          "Cart"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lastName"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SeatsReply"
            }
          },
          "400": {
            "description": "** Error Codes **\n\ncode    | title\n------- | -----------------------\n111     | Check format\n2222    | Mandatory data missing\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "summary": "Add seats to a cart",
        "description": "Add seats (from the seatmap) to the cart.\n",
        "operationId": "addSeatsToCart",
        "tags": [
          "Cart"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/refreshAncillaries"
          },
          {
            "name": "postSeatsBody",
            "in": "body",
            "description": "Seats details",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SeatItemRequest"
              }
            }
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/SeatsReply"
            }
          },
          "400": {
            "description": "** Error Codes **\n\ncode    | title\n------- | -----------------------\n111     | Check format\n2222    | Mandatory data missing\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "patch": {
        "summary": "Partial update of existing seats in cart",
        "description": "Partial update of seats in the cart.\n",
        "operationId": "patchSeatsInCart",
        "tags": [
          "Cart"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "name": "patchSeatsBody",
            "in": "body",
            "description": "Seats details",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UpdateSeatItemsRequest"
              }
            }
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SeatsReply"
            }
          },
          "400": {
            "description": "** Error Codes **\n\ncode    | title\n------- | -----------------------\n111     | Check format\n2222    | Mandatory data missing\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "summary": "Remove seats from a cart",
        "description": "Delete seats from a cart.",
        "operationId": "deleteSeatsFromCart",
        "tags": [
          "Cart"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/refreshAncillaries"
          },
          {
            "name": "seatIds",
            "description": "List of seats to delete from a cart.",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "[a-zA-Z0-9-]{1,50}"
            },
            "collectionFormat": "csv"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/shopping/carts/{cartId}/seats/{seatId}": {
      "get": {
        "summary": "Retrieve a seat from a cart",
        "description": "Retrieve a seat currently stored in the cart.\n",
        "operationId": "retrieveSeatFromCart",
        "tags": [
          "Cart"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "$ref": "#/parameters/seatId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SeatReply"
            }
          },
          "400": {
            "description": "** Error Codes **\n\ncode    | title\n------- | -----------------------\n111     | Check format\n2222    | Mandatory data missing\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "patch": {
        "summary": "Update a seat in a cart",
        "description": "Update a seat currently stored in the cart.\n",
        "operationId": "patchSeatFromCart",
        "tags": [
          "Cart"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "$ref": "#/parameters/seatId"
          },
          {
            "name": "patchSeatBody",
            "in": "body",
            "description": "Seat details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateSeatItemRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SeatReply"
            }
          },
          "400": {
            "description": "** Error Codes **\n\ncode    | title\n------- | -----------------------\n111     | Check format\n2222    | Mandatory data missing\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "summary": "Delete seat from a cart",
        "description": "Delete seat from a cart.",
        "operationId": "deleteSeatFromCart",
        "tags": [
          "Cart"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "$ref": "#/parameters/seatId"
          },
          {
            "$ref": "#/parameters/refreshAncillaries"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/purchase/orders/{orderId}/seats": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Retrieve all seats from an order",
        "description": "Retrieve the list of seats from an order.\n",
        "operationId": "retrieveSeatsFromOrder",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/firstName"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OrderSeatsReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "post": {
        "summary": "Add seats to an order",
        "description": "Add a seat (from the seatmap) to the order. Both chargeable and free items can be added.\n",
        "operationId": "addSeatsToOrder",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/firstName"
          },
          {
            "name": "postOrderSeatsBody",
            "in": "body",
            "description": "Seats and payment details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostOrderSeatRequest"
            }
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/OrderSeatsReply"
            }
          },
          "400": {
            "description": "** Error Codes **\n\ncode    | title\n------- | -----------------------\n111     | Check format\n2222    | Mandatory data missing\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "summary": "Remove seats from a an order",
        "description": "Delete seats from an order.",
        "operationId": "deleteSeatsFromOrder",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/firstName"
          },
          {
            "name": "seatIds",
            "description": "List of seats to delete from an order.",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "[a-zA-Z0-9-:]{1,50}"
            },
            "collectionFormat": "csv"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/purchase/orders/{orderId}/seats/{seatId}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Retrieve a specific seat from an order",
        "description": "Retrieve a seat from an order.\n",
        "operationId": "retrieveSeatFromOrder",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/firstName"
          },
          {
            "$ref": "#/parameters/seatId"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OrderSeatReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete seat from an order",
        "description": "Delete seat from an order.",
        "operationId": "deleteSeatFromOrder",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/firstName"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "$ref": "#/parameters/seatId"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/shopping/services/by-cart": {
      "get": {
        "summary": "Retrieve catalogue of services from Cart reference",
        "description": "This is a shopping transaction that returns a catalogue of services computed according to the content of a Cart.\nThe cart id allows to access to the air offers stored in the cart such as flight characteristics, number of travelers, etc.\n\nThank to the showMilesPrice query parameter, the services prices can be shown in cash currency and in miles currency.  The frequentFlyerCardNumber or the frequentFlyerId parameters can be  used to get customized conversion rate as per the frequent flyer profile. \n\nThe query parameters travelerIds and flightIds can be used to retrict the scope of the response. When provided in the request, only the services applying to the selection are returned.\n",
        "operationId": "servicesCatalogueFromCart",
        "tags": [
          "Service"
        ],
        "parameters": [
          {
            "name": "cartId",
            "description": "Identifier of the cart",
            "required": true,
            "in": "query",
            "type": "string",
            "pattern": "[a-zA-Z0-9]{1,20}",
            "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
          },
          {
            "name": "airOfferId",
            "description": "Identifier of an offer. If offer id is provided, the list of services is generated according to the information stored in the offer object.",
            "required": false,
            "in": "query",
            "type": "string",
            "pattern": "[a-zA-Z0-9-]{1,120}",
            "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
          },
          {
            "$ref": "#/parameters/serviceTags"
          },
          {
            "$ref": "#/parameters/catalogueType"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "$ref": "#/parameters/promotionCode"
          },
          {
            "$ref": "#/parameters/promotionAirlineCode"
          },
          {
            "$ref": "#/parameters/enableBundleDiscountRules"
          },
          {
            "$ref": "#/parameters/showMilesPrice"
          },
          {
            "$ref": "#/parameters/optionalFrequentFlyerCardNumber"
          },
          {
            "$ref": "#/parameters/optionalCompanyCode"
          },
          {
            "$ref": "#/parameters/optionalFrequentFlyerCardId"
          },
          {
            "$ref": "#/parameters/optionalTravelerIds"
          },
          {
            "$ref": "#/parameters/optionalFlightIds"
          }
        ],
        "responses": {
          "200": {
            "description": "OK\nWarnings that can be returned by the application:\n|  Code   |              Title                   | Description                                                                                                                                                     |\n|:-------:|:------------------------------------:|-----------------------------------------------------------------------------------------------------------------------------------------------------------------|\n|   2038  | INVALID LANGUAGE CODE                | Warning returned when the language code in input is unknown                                                                                                     |\n|  39042  | PROMOTION CODE MISSING               | Warning returned when the request contains promotionAirlineCode but without promotionCode. In such case, the catalog request is done without any promotion code |\n|  39126  | NON BLOCKING CATALOG ISSUE DETECTED  | Warning returned when an issue, that does not prevent to return service catalogue, has been found (e.g. requested promocode has not been applied).              | |         |                                      | More information regarding the issue faced is provided in the detail.                                                                                           |\n",
            "schema": {
              "$ref": "#/definitions/ServicesCatalogueReply"
            }
          },
          "400": {
            "description": "Bad request\nErrors that can be returned by the application:\n|  Code   |              Title                   | Description                                                                                                                   |\n|:-------:|:------------------------------------:|-------------------------------------------------------------------------------------------------------------------------------|\n|     11  | UNABLE TO PROCESS                    | Error returned in case of a technical failure                                                                                 |\n|  04926  | INVALID DATA RECEIVED                | Error returned when some of the information provided in the request are not valid (e.g. cartId, catalog type)                 |\n|  36798  | CART NOT FOUND                       | Error returned when the application could not retrieve the service catalogue as the requested cart is not available           |\n|  36799  | OFFER NOT FOUND                      | Error returned when the offer related to the requested cart is not available                                                  |\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Not found\nErrors that can be returned by the application:\n|  Code   |              Title                   | Description                                                                                                                   |\n|:-------:|:------------------------------------:|-------------------------------------------------------------------------------------------------------------------------------|\n|  36799  | OFFER NOT FOUND                      | Offer does not exist, which is needed to know itinerary and pricing information to get service recommendations                |\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/shopping/services/by-order": {
      "get": {
        "summary": "Retrieve catalogue of services from Order reference",
        "description": "This is a shopping transaction that returns a catalogue of services computed according to the content of an Order.\nThe orderId is mandatory in any case. If both orderId and orderChangeId are in input, the catalogue of services is retrieved from the order  currenly under modification (e.g. during a voluntary exchange).  However, if only the orderId is in input, the catalogue of services is retrieved from the order as it is persisted.\nThank to the showMilesPrice query parameter, the services prices can be shown in cash currency and in miles currency.  The frequentFlyerCardNumber or the frequentFlyerId parameters can be  used to get customized conversion rate as per the frequent flyer profile. \nThe query parameters travelerIds and flightIds can be used to retrict the scope of the response. When provided in the request, only the services applying to the selection are returned.\n",
        "operationId": "servicesCatalogueFromOrder",
        "tags": [
          "Service"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/queryOrderId"
          },
          {
            "$ref": "#/parameters/optionalOrderChangeId"
          },
          {
            "name": "currencyCode",
            "description": "ISO currency code(http://www.iso.org/iso/home/standards/currency_codes.htm) to be used for services pricing. For points (or miles) the code associated is MIL. This currency code will not be used while calling POST /purchase/orders/{orderId}/services; instead the default currency will be used there (taken from SERVICES_AND_SEATS_CURRENCY_OVERRIDE).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/serviceTags"
          },
          {
            "$ref": "#/parameters/catalogueType"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "$ref": "#/parameters/promotionCode"
          },
          {
            "$ref": "#/parameters/promotionAirlineCode"
          },
          {
            "$ref": "#/parameters/enableBundleDiscountRules"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/showMilesPrice"
          },
          {
            "$ref": "#/parameters/optionalFrequentFlyerCardNumber"
          },
          {
            "$ref": "#/parameters/optionalCompanyCode"
          },
          {
            "$ref": "#/parameters/optionalFrequentFlyerCardId"
          },
          {
            "$ref": "#/parameters/optionalTravelerIds"
          },
          {
            "$ref": "#/parameters/optionalFlightIds"
          }
        ],
        "responses": {
          "200": {
            "description": "OK\nWarnings that can be returned by the application:\n|  Code   |              Title                   | Description                                                                                                                                                     |\n|:-------:|:------------------------------------:|-----------------------------------------------------------------------------------------------------------------------------------------------------------------|\n|   2038  | INVALID LANGUAGE CODE                | Warning returned when the language code in input is unknown                                                                                                     |\n|  39042  | PROMOTION CODE MISSING               | Warning returned when the request contains promotionAirlineCode but without promotionCode. In such case, the catalog request is done without any promotion code |\n|  39126  | NON BLOCKING CATALOG ISSUE DETECTED  | Warning returned when an issue, that does not prevent to return service catalogue, has been found (e.g. requested promocode has not been applied).              | |         |                                      | More information regarding the issue faced is provided in the detail.                                                                                           |\n",
            "schema": {
              "$ref": "#/definitions/ServicesCatalogueReply"
            }
          },
          "400": {
            "description": "Bad request\nErrors that can be returned by the application:\n|  Code   |              Title                   | Description                                                                                                                   |\n|:-------:|:------------------------------------:|-------------------------------------------------------------------------------------------------------------------------------|\n|     11  | UNABLE TO PROCESS                    | Error returned in case of a technical failure                                                                                 |\n|  04926  | INVALID DATA RECEIVED                | Error returned when some of the information provided in the request are not valid (e.g. orderId, catalog type)                |\n|  36894  | ORDER NOT FOUND                      | Error returned when the application could not retrieve the service catalogue as the order in input is not available           |\n|  36962  | LAST NAME SHOULD BE PROVIDED         | Error returned when last name is provided in input even though it is required.                                                |\n|  37594  | NO FLIGHTS IN ORDER                  | Error returned when order contains no itinerary                                                                               |\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/purchase/orders/{orderId}": {
      "get": {
        "summary": "Retrieves an order",
        "description": "Retrieves an order based on its id. Ex : /purchase/orders/AB23ED.\nDictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).\n",
        "operationId": "retrieveOrder",
        "parameters": [
          {
            "name": "orderId",
            "description": "Identifier of an order (Record Locator, Other Airline Record Locator or Numeric Record Locator)",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[a-zA-Z0-9]{6}|[0-9]{7,16}",
            "x-risk-personal-data-field": "PNR_RECORD_LOCATOR"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/firstName"
          },
          {
            "$ref": "#/parameters/showOrderEligibilities"
          },
          {
            "$ref": "#/parameters/includeMoreOrderDetails"
          }
        ],
        "tags": [
          "Order"
        ],
        "responses": {
          "200": {
            "description": "A specific order.",
            "schema": {
              "$ref": "#/definitions/OrderReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "delete": {
        "summary": "Cancel an order",
        "description": "Cancel an unpaid order or an order with no associated travel documents.\n",
        "operationId": "cancelOrder",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/firstName"
          }
        ],
        "tags": [
          "Order"
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/purchase/orders": {
      "get": {
        "summary": "Retrieves an order by Travel Document Number",
        "description": "Retrieves an order based on its travelDocumentId. Ex : /purchase/orders?travelDocumentId=123456789. Currently, only single order response is supported. End-point has been designed to return multiple orders for future purposes.\n\nDictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).\n",
        "operationId": "retrieveOrderBy",
        "parameters": [
          {
            "$ref": "#/parameters/queryTravelDocumentId"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/firstName"
          },
          {
            "$ref": "#/parameters/showOrderEligibilities"
          },
          {
            "$ref": "#/parameters/includeMoreOrderDetails"
          }
        ],
        "tags": [
          "Order"
        ],
        "responses": {
          "200": {
            "description": "Specific orders.\nWarnings that can be returned by this endpoint\n|  Code  |              Title                                     | Description                                                                                                                   |\n|:------:|:------------------------------------------------------:|----------------------------------------------------------------------------------------------------------------|\n|  40160 | INVALID TRAVEL DOCUMENT                                | Warning raised when the the last name check is enabled and invalid last name is provided                       | \n|  37180 | UNABLE TO RETRIEVE A TRAVEL DOCUMENT                   | Warning raised when travel document (e-ticket or EMD) could not be retrieved even though it exists in the Order|\n|  65021 | ORDER CONTAINS UNCONFIRMED PAYMENT RECORDS             | Warning to indicate that payment-records are not confirmed                                                     |            \n|  65227 | FLIGHT DISRUPTION HAS OCCURED: CHECK THE ORDER CONTENT | Warning to indicate that there has been a disruption in the Order                                              |                        \n|  64938 | NO ACTIVE ITINERARY IN ORDER                           | Warning to indicate that there is no itinerary in the Order                                                    |                        \n|  39611 | UNABLE TO RETRIEVE APIS DOCUMENTS                      | Warning raised when APIS could not be retrieved even though it exists in the Order                             |                                    \n|  40995 | UNABLE_TO_RETRIEVE_DISCOUNT_DETAILS                    | Warning raised when discount details could not be retrieved even though it exists in the Order                 |                                                \n|  40929 | NO OFFER FOUND IN ORDER                                | Warning raised when either no offer is stored in the Order (e.g. other channel PNR) either offer stored in the Order cannot be retrieved (technical issue)    |                                                            \nErrors that can be returned by the endpoint:\n|  Code   |              Title              | Description                                                                                                             |\n|:-------:|:-------------------------------:|-------------------------------------------------------------------------------------------------------------------------|\n|  64931  | SEVERAL RECORDS FOUND           | Error raised when several records found for input travel document                                                       |\n|  38497  | UNABLE TO DISPLAY GROUP ORDER   | Error raised when lastName is not provided for group PNR or several matched passengers found for lastName and firstName |\n|  37179  | UNABLE TO DISPLAY ORDER         | Error raised when Order could not be displayed                                                                          |            \n",
            "schema": {
              "$ref": "#/definitions/OrdersReply"
            }
          },
          "400": {
            "description": "Bad request<br/>\n**Error codes**\n|Code | Title                                         | Description                                           |\n|:---:|:---------------------------------------------:|-------------------------------------------------------|\n|04926| INVALID DATA RECEIVED                         | Error raised when travel document number not provided |\n|36962| LAST NAME SHOULD BE PROVIDED                  | Error raised when lastName is not provided            |            \n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Not found<br/>\n**Error codes**\n|Code | Title                                         | Description                                                            |\n|:---:|:---------------------------------------------:|------------------------------------------------------------------------|\n|36894| ORDER NOT FOUND                               | Error raised when No PNR is found for the given travel document number |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "post": {
        "summary": "Create an order",
        "description": "The order is created from the cart content provided in input. Travel Documents can be issued.\nDictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).\n",
        "operationId": "createOrder",
        "parameters": [
          {
            "name": "cartId",
            "description": "Cart identifier. Ex : 1.",
            "required": true,
            "in": "query",
            "type": "string",
            "pattern": "[a-zA-Z0-9]{1,20}",
            "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "name": "createOrderBody",
            "description": "Body for the creation of an order",
            "required": false,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/PostOrderRequest"
            }
          }
        ],
        "tags": [
          "Order"
        ],
        "responses": {
          "200": {
            "description": "OK\nWarnings that can be returned by the application\n|  Code   |               Title                   | Description                                                                                                                                  |\n|:-------:|:-------------------------------------:|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n|  37527  | NOT ALL THE SSR HAVE BEEN BOOKED      | Warning raised when if some services from the Cart could not be booked in the PNR |\n|  37512  | NOT ALL REQUESTED SEATS ARE CONFIRMED | Returned if some seats from the Cart could not be booked in the PNR and Configuration parameter CHARGSEAT_BOOKING_FAILURE_ALLOWED = true or FREESEAT_BOOKING_FAILURE_ALLOWED = true |\n\nErrors that can be returned by the application\n|  Code   |                                   Title                                | Description                                                                                                                             |\n|:-------:|:----------------------------------------------------------------------:|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n|  37357  |  UNABLE TO CREATE ORDER - MISSING OFFERS                                | Returned if no offer is found in the Cart |\n|  37181  | UNABLE TO CREATE ORDER                                                 | Error raised while creating order due to some possible issues:<br/>- 34651 SEGMENT SELL FAILURE<br/>- 10162 PRICING IMPOSSIBLE<br/>- 39810 DISCOUNT INCONSISTENT BETWEEN PNR AND OFFER<br/>- 2114 SEATS NOT RESERVED<br/>- 37370 SEAT PRICE DISCREPANCY<br/>- 37371 SERVICE PRICE DISCREPANCY<br/>- 37376 UNABLE TO BOOK SERVICE<br/>- 36892 SERVICE NOT FOUND<br/>- 8900 FQTV NUMBER NOT ACCEPTED<br/>- 37937 INVALID FLIGHT STATUS<br/>- 37200 PRICE DISCREPANCY<br/>- 40710 PRICING NOT CONFIRMED<br/>- 1892 INVALID FORMAT/NOT ENTERED<br/>- 32700 INVALID INPUT DATA<br/>- 3DS is not supported at checkout Cart etc.                                                                                                             |\n|  32399  | PAYMENT FAILED                                                         | Payment process failure. Some possible issues are:<br/>- Invalid Credit Card Details<br/>- Authorization error<br/>- Insufficient funds |\n|  36798  | CART NOT FOUND  Invalid Cart ID                                        | Error returned when no cart was found for the provided cart id |\n|  37513  | MISSING PAYMENT METHOD                                                 | Error if no payment methods have been provided eg.Pre-order is disabled and the DAPI user tries to create an order without payment |\n|  37576  | INVALID PAYMENT METHOD                                                 | Error raised when the payment method provided in input is not valid e.g. the CC might be expired, etc. This error also be thrown in case of custom payment method validation with the site configuration(VALID_GMOP_ONLINE_LIST) |\n|  37182  | UNABLE TO CREATE ORDER - CHECK TRAVELERS                               | Error returned when there is no traveller in the cart |\n|  37357  | UNABLE TO CREATE ORDER - MISSING OFFERS                                 | Error returned when there is no flight offer in the cart |\n|  37148  | ORDER NOT CREATED - CHECK CONTACTS                                     | Error returned when there is no contact in the cart |\n|  37183  | UNABLE TO CREATE ORDER - TRAVELERS DISCREPANCY                         | Error returned when the number of passenger in the offer and in the cart are not the same |\n|  67394  | MANUAL APPROVAL CODE NOT ENABLED                                       | Error raised when manual approval code is not expected in input but has been provided in input for payment with Payment card  |\n|  67395  | MISSING MANUAL APPROVAL CODE                                           | Error  raised when manual approval code is expected in input but has not been provided in input for payment with Payment card  |\n|  39187  |  UNABLE TO CREATE ORDER - INVALID PROMOTION CODE                         | An error concerning promo code is detected, namely when :PoPA returns an NTP promocode error |\n|  67398  | INVALID PARAMETER VALUE                                                 | Error returned when a custom payment has been attempted using a parameter with a value which does not match the specified format from the verb |\n|  67399  | MISSING PARAMETER                                                     | Error returned when a custom payment has been attempted and a mandatory parameter is missing from input |\n|  39341  | BILLING ADDRESS SHOULD BE PROVIDED                                     | The credit card address provided is not of type \"billing\"(or) If the AVS/fraud screening verification for credit card address is enabled, but the credit card address is not provided  |\n|  39656  |  INVALID SEAT STATUS                                                    | Seat in order is chargeable and it's status is not present in configuration|\n|  39698  | REMARK NOT ALLOWED                                                     | Error when remark is included in request but not allowed |\n|  39700  | SPECIAL KEYWORD NOT ALLOWED                                             | Error when special keyword is included in request but not allowed |\n|  39701  | SPECIAL SERVICE REQUEST NOT ALLOWED                                     | Error when special service request is included in request but not allowed |\n|  39702  | OTHER SERVICE INFORMATION NOT ALLOWED                                  | Error when other service information is included in request but not allowed |\n|  37936  | INVALID SERVICE STATUS                                                 | If there is unconfirmed chargeable service in order with payment details in request body.  If service is unconfirmed (status not present in configuration) and chargeable then order cannot be paid |\n|  39797  | NUMERIC ID ALREADY USED. PLEASE ENTER A NEW ONE OR USE RECOMMENDED ONE | If numeric reservation number provided in body is already associated with another PNR. A suggested reservation number will be given in the details section of the error |\n|  39803  | FUNCTIONALITY NOT ENABLED                                             | If a reservation number is given in the body of a create orders request and the PNR_CreateReservationNumber verb replies with the NOT ALLOWED error, then the airline has not activated this functionality with the backend |\n|  39804  |  UNABLE TO USE PROVIDED NUMERIC ID                                      |  Error raised when issue while creating or length of the number is different to the expected |\n|  39867  | UNABLE TO CREATE ORDER - CHECK DISCOUNTS IN OFFER                      | Returns if  All travelers must benefit from the same discounts ; Discounts should be applied for all passengers |\n|  39744  | UNABLE TO CREATE ORDER - CHECK ENTITLEMENT DOCUMENTS                   | If Offer in Cart contains resident or large family discounts but not all travellers have the necessary entitlement documents |\n|  39841  | ENTITLEMENT DOCUMENT NAME DOES NOT MATCH WITH TRAVELER NAME            | If the name comparison fails between Entitlement document for the Spanish Resident Discount |\n|  39842  | ENTITLEMENT DOCUMENT LAST NAME DOES NOT MATCH WITH TRAVELER NAME       | If the last name comparison fails between Entitlement document for the Spanish Resident Discount |\n|  40367  | PAYMENT METHOD NOT ALLOWED                                             | Error raised when provided method of payment is not allowed |\n|  40324  | FLIGHT DEPARTURE TOO SOON                                              | Error raised when time is less than the allowed time between now and first flight departure|\n",
            "schema": {
              "$ref": "#/definitions/OrdersListReply"
            }
          },
          "201": {
            "description": "Created\nWarnings that can be returned by the application\n|  Code   |                             Title                                | Description                                                                                                                             |\n|:-------:|:----------------------------------------------------------------:|-----------------------------------------------------------------------------------------------------------------------------------------|\n|  40929  | NO OFFER FOUND IN ORDER                                          | Warning returned when the retrieval of the order persisted offer is failing |\n|  38907  | SSR FQTV ADDITION FAILED                                         | Returned based on the value of the configuration parameter|\n|  37184  | UNABLE TO CREATE TRAVEL DOCUMENT                                 | Warning if the order cannot be issued|\n|  38126  | UNABLE TO QUEUE                                                  | Warning raised when queuing the PNR to the desired queue fails due to invalid queue ID or queue number or any other technical reason |\n|  65214  | ASYNCHRONOUS PAYMENT                                             | Asynchronous payment needed - Order on hold |\n|  612488 | PAYMENT HAS BEEN IGNORED AS ORDER CONTAINS UNCONFIRMED FLIGHT(S) | Warning appears when payment ignored during create order due to one of the flight is is unconfirmed HL status , however, pre-order created |\n|  39870  | YOUR RESIDENT NAME HAS BEEN TRUNCATED                            | It the resident name with lastname have a length upper than 121, they will be truncated, in case of Spanish Resident Discount |\n|  39869  | SPANISH RESIDENT CARD COULD NOT BE VALIDATED                     | Your Spanish resident card has not been validated. Your Resident card will be requested at the airport prior to boarding |\n|  40677  | FOID REQUESTS IN INPUT ARE IGNORED                               | Warning raised when mandatory field missing, invalid ID provided, duplicate request, technical error raised  etc. |\n|  40347  | FLIGHT TIME HAS CHANGED                                          | Warning raised when flight time has changed |\n|  40600  | CHECK MINIMUM CONNECTION TIME                                    |  Warning raised when two segements for which the connection time may not be enough |\n|  40599  | INFANT AGE MAY EXCEED FOR SOME SEGMENTS                          | Warning raised when the passenger qualifies as an infant for some segments but not for others |\n|  40555  | PAYMENT HAS BEEN IGNORED AS ORDER CONTAINS NON-TICKETABLE FARE   | Returned when payment method is provided in checkout request for an order with non-ticketable fares |\n",
            "schema": {
              "$ref": "#/definitions/OrdersListReply"
            }
          },
          "400": {
            "description": "Bad request\nErrors that can be returned by the application\n|  Code   |                   Title                    | Description                                                                                        |\n|:-------:|:------------------------------------------:|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n|  39747  |  AT LEAST ONE NAME MUST BE SET AS PREFERRED |  Error raised when either both native and universal names set as preferred or none |\n|  40130  | FUNCTIONALITY NOT ENABLED                 | Error raised when IP address is passed through request body but not allowed |\n|  41070  |  INVALID DATE OF BIRTH                      | Returned when a UMNR PAX has been entered with a date of birth that does not match their PTC or the date of birth does not fall within the age range specific within the DB  |\n|  4926   | INVALID DATA RECEIVED                     | Returned when malicious content is added in freetext of remarks |\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/purchase/order-eligibilities": {
      "get": {
        "summary": "Compute order eligibility for the target actions selected in the query.",
        "description": "Once an order has been created, it can be eligible for certain actions ( simple cancellation, cancellation & refund, change, self reaccommodation, etc).\nOnly cancellation & refund is supported, simple cancellation is in scope of the operation DELETE /purchase/orders/{orderId}. The response will return the eligibilities for the selected targetAction.\nEligibility for 'cancelAndRefund' describes the possibility to cancel the air itinerary and receive a refund of a part or the full amount paid.\n",
        "operationId": "getOrderEligibilities",
        "parameters": [
          {
            "$ref": "#/parameters/queryOrderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/orderEligibilitiesTargetAction"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "tags": [
          "Order"
        ],
        "responses": {
          "200": {
            "description": "Eligibility information for the requested targetAction parameter.\n\n**Warning codes**\n|Code | Title                                 | Description                                                                                                                                                                |\n|:---:|:-------------------------------------:|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n|39446| ORDER NOT ELIGIBLE FOR REFUND         | The Order is not refundable. See nonEligibilityReason for more details.                                                                                                    |\n|39448| YOUR SEATS WILL NOT BE REFUNDED       | The Order contains chargeable seats and their refund is not activated (ASC Refund).                                                                                        |\n|39449| YOUR SERVICES WILL NOT BE REFUNDED    | The Order contains chargeable services and their refund is not activated (ASC Refund).                                                                                     |\n|39450| ORDER CONTAINS INSURANCE RESERVATION  | The Order contains an insurance but its refund is not possible online.                                                                                                     |\n|39451| ORDER CONTAINS CAR RESERVATION        | The Order contains a Car but its refund is not possible online.                                                                                                            |\n|39452| ORDER CONTAINS HOTEL RESERVATION      | The Order contains an Hotel but its refund is not possible online.                                                                                                         |\n|39545| ORDER ELIGIBLE FOR MANUAL REFUND      | The Order is refundable, but it will require manual processing. If cancellation is confirmed, it will be queued for manual processing.                                     |\n|39585| ORDER WITH CHECKED-IN PASSENGER       | The Order is refundable but contains checked-in passengers. Proceeding with the refund will lead to the deletion of all boarding passes.                                   |\n|40546| REFUND BREAKDOWN NOT AVAILABLE        | The detailed refund amounts over the paymentMethods cannot be displayed. This warning is returned when at least one form of payment is not recognized by Digital Commerce. |",
            "schema": {
              "$ref": "#/definitions/OrderEligibilitiesReply"
            }
          },
          "400": {
            "description": "Bad request\n\n**Error codes**\n|Code | Title                         | Description                                                                                                                            |\n|:---:|:-----------------------------:|----------------------------------------------------------------------------------------------------------------------------------------|\n|36962| LAST NAME SHOULD BE PROVIDED  | The last name is mandatory in request but is not provided.                                                                             |\n|32700| INVALID INPUT DATA            | Provided inputs are not correct. Some examples (not exhaustive):<br/>- No target action provided<br/>- Invalid target action provided. |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Not found\n\n**Error codes**\n|Code | Title               | Description                  |\n|:---:|:-------------------:|------------------------------|\n|36894| ORDER NOT FOUND     | Provided Order id not found. |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/purchase/orders/{orderId}/cancellation": {
      "post": {
        "summary": "Cancel and refund of an Order.",
        "description": "Performs the refund of the flight tickets and the cancellation of the air itinerary for all the passengers in the order. Only some forms of payment are refundable online, based on airline\nPartially flown orders (outbound flown or no-show) can be refunded.\n\nThis entry point performs several transactions:\n- Refund flight tickets\n- Cancel air itinerary\n- Queue the order<br/> - Queue for successful refund<br/> - Queue for refund failure<br/> - Queue for refund of order containing services/seats, insurance, car, hotel<br/>\n\nNon air elements like seats, services, car, hotel or insurance will not be refunded. A warning will be returned to indicate the presence of such non-air elements in the order. However the order will be refunded and queued.\n",
        "operationId": "cancelAndRefundOrder",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "name": "orderCancelAndRefundRequest",
            "description": "Request to perform the cancel and refund of an order.",
            "required": false,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/OrderCancelAndRefundRequest"
            }
          }
        ],
        "tags": [
          "Order"
        ],
        "responses": {
          "201": {
            "description": "Order has been refunded and air itinerary cancelled.\n\n**Warning codes**\n|Code | Title                                           | Description                                                                                                                                                                |\n|:---:|:-----------------------------------------------:|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n|39468| SEATS NOT REFUNDED                              | The Order contained chargeable seats and their refund is not activated (ASC Refund).                                                                                       |\n|41283| SOME OF YOUR SEATS ARE NOT REFUNDED             | Some of travel documents related to seats cannot be refunded online due to airline policies.                                                                               |\n|39469| SERVICES NOT REFUNDED                           | The Order contained chargeable services and their refund is not activated (ASC Refund).                                                                                    |\n|41284| SOME OF YOUR SERVICES ARE NOT REFUNDED          | Some of travel documents related to services cannot be refunded online due to airline policies.                                                                            |\n|41285| SOME OF YOUR DOCUMENTS ARE NOT REFUNDED         | Some of miscellaneous travel documents (EMD not related to seats nor services) cannot be refunded due to airline policies.                                                 |\n|39471| INSURANCE NOT REFUNDED                          | The Order contained an insurance but its refund is not possible online.                                                                                                    |\n|39472| CAR NOT REFUNDED                                | The Order contained a Car but its refund is not possible online.                                                                                                           |\n|39473| HOTEL NOT REFUNDED                              | The Order contained an Hotel but its refund is not possible online.                                                                                                        |\n|39654| MANUAL REFUND REQUEST SENT                      | The Order is refundable offline and has been queued for manual processing.                                                                                                 |\n|40546| REFUND BREAKDOWN NOT AVAILABLE                  | The detailed refund amounts over the paymentMethods cannot be displayed. This warning is returned when at least one form of payment is not recognized by Digital Commerce. |\n|41296| YOUR MISCELLANEOUS DOCUMENTS CANNOT BE REFUNDED | Some miscellaneous travel documents (EMD) cannot be refunded due to technical issues.                                                                                      |",
            "schema": {
              "$ref": "#/definitions/OrderCancelAndRefundReply"
            }
          },
          "400": {
            "description": "Bad request\n\n**Error codes**\n|Code | Title                                         | Description                                                                                                                                                                 |\n|:---:|:---------------------------------------------:|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n|36865| INVALID TRAVELER ID                           | Traveler id(s) provided: [<list of traveler ids>] do not exist in the Order. Raised in case of partial refund.                                                              |\n|36962| LAST NAME SHOULD BE PROVIDED                  | The last name is mandatory in request but is not provided.                                                                                                                  |\n|40583| REFUND METHOD OPTION NOT ALLOWED              | One of the provided refund option id is not correct.                                                                                                                        |\n|39465| UNABLE TO REFUND ORDER                        | The Order is not eligible for refund. The detail of the error highlights the reason.                                                                                        |\n|36874| INVALID CONTACT ID                            | One of the provided contact id for refund notifications doesn't exist in the Order.                                                                                         |\n|04926| INVALID DATA RECEIVED                         | Error raised when provided inputs are not compatible with the Order. Some reasons (not exhaustive):<br/>- Refund notifications cannot be sent for manuallyRefundable ticket |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Not found\n\n**Error codes**\n|Code | Title               | Description                  |\n|:---:|:-------------------:|------------------------------|\n|36894| ORDER NOT FOUND     | Provided Order id not found. |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/shopping/carts/{cartId}/car-offers": {
      "post": {
        "tags": [
          "Cart"
        ],
        "operationId": "addCarOffersToCart",
        "summary": "Add one or several car offers to the cart",
        "description": "Add one or several car offers to a given cart. CarOffers content is returned.\nDictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).\n",
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "name": "postCarOfferBody",
            "in": "body",
            "description": "A car offer contains mandatory and non mandatory elements.\nBy default, optional elements are considered as not selected by the end user.\nNon mandatory elements status can be specified / updated if selected by the end user.\n",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CarOffersSelectionRequest"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returned in case of successful Car creation.\nPossible warnings that can be returned by the API with 201 http status code:\n|  Code  |           Title   | Description                                                                                |\n|:------:|:-----------------:|--------------------------------------------------------------------------------------------|\n|  38275 | INVALID OPTION ID | Warning returned when The special equipment or bookable option id <optionId> is not valid. |\n\nPossible Errors that can be returned by the API with 200 http status code:\n|  Code   |           Title                    | Description                                                             |\n|:-------:|:----------------------------------:|-------------------------------------------------------------------------|\n|  36804  | TOO MANY ELEMENTS OF A GIVEN TYPE  |                                                                         |\n",
            "schema": {
              "$ref": "#/definitions/CarOffersListReply"
            }
          },
          "400": {
            "description": "Errors returned by the application:\n|  Code   |           Title       | Description                                                                    |\n|:-------:|:---------------------:|--------------------------------------------------------------------------------|\n|  37693  | INVALID CAR OFFER ID  | Error returned when The requested car id does not correspond to any valid car. |\n|  04926   | INVALID DATA RECEIVED | Error returned when invalid data received in input.                            |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Errors returned by the application:\n|  Code   |           Title                    | Description                                                                    |\n|:-------:|:----------------------------------:|--------------------------------------------------------------------------------|\n|  36798  | CART NOT FOUND                     | Error returned when requested cart is not found.                        |\n|  36799  | OFFER NOT FOUND                    | Error returned when the inputted offer is not found.                    |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Errors returned by the application:\n|  Code   |           Title                    | Description                                                             |\n|:-------:|:----------------------------------:|-------------------------------------------------------------------------|\n|  11     | UNABLE TO PROCESS                  | Unexpected Error .                                                      |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "summary": "Remove car offers from a cart",
        "description": "Delete car offers from a cart.",
        "operationId": "deleteCarOffersFromCart",
        "tags": [
          "Cart"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "name": "carOfferIds",
            "description": "List of car offers to delete from a cart.",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "400": {
            "description": "Errors returned by the application:\n|  Code   |           Title       | Description                                                 |\n|:-------:|:---------------------:|-------------------------------------------------------------|                                                                       |\n|  04926   | INVALID DATA RECEIVED | Error returned when invalid data recieved in input.         |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Errors returned by the application:\n|  Code   |           Title   | Description                                                 |\n|:-------:|:-----------------:|-------------------------------------------------------------|                                                                       |\n|  36798  | CART NOT FOUND    | Error returned when requested cart is not found.            |\n|  37689  | CAR NOT FOUND     | Error returned when requested Car is not found in the cart. |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Errors returned by the application:\n|  Code   |           Title       | Description                                         |\n|:-------:|:---------------------:|-----------------------------------------------------|                                                                       |\n|  11     | UNABLE TO PROCESS     | Unexpected Error .                                  |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "get": {
        "summary": "Retrieve all car offers from a cart",
        "description": "Retrieve all CarOffers from a Cart based on cart id.\nDictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).",
        "operationId": "retrieveCarOffersFromCart",
        "tags": [
          "Cart"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CarOffersListReply"
            }
          },
          "400": {
            "description": "Errors returned by the application:\n|  Code   |           Title       | Description                                         |\n|:-------:|:---------------------:|-----------------------------------------------------|\n|  04926   | INVALID DATA RECEIVED | Error returned when invalid data received in input. |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Errors returned by the application:\n|  Code   |           Title   | Description                                                     |\n|:-------:|:-----------------:|-----------------------------------------------------------------|\n|  36798  | CART NOT FOUND    | Error returned when requested cart is not found.                |\n|  37689  | CAR NOT FOUND     | Error returned when the requested car is not found in the cart. |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Errors returned by the application:\n|  Code   |           Title   | Description                                                     |\n|:-------:|:-----------------:|-----------------------------------------------------------------|\n|  11     | UNABLE TO PROCESS | Unexpected Error .                                              |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/shopping/carts/{cartId}/car-offers/{carOfferId}": {
      "get": {
        "summary": "Retrieve a car offer",
        "description": "Retrieve a car offer from a cart based on its id.\nDictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).\n",
        "operationId": "retrieveCarOfferFromCart",
        "tags": [
          "Cart"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/carOfferId"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CarOfferReply"
            }
          },
          "400": {
            "description": "** Error Codes **\n\ncode    | title\n------- | -----------------------\n111     | Check format\n2222    | Mandatory data missing\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "summary": "Remove a specific car offer from a cart",
        "description": "Delete car offer from a cart.",
        "operationId": "deleteCarOfferFromCart",
        "tags": [
          "Cart"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/carOfferId"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/search/car-offers": {
      "get": {
        "tags": [
          "CarOffer"
        ],
        "summary": "Retrieve catalog of Car rentals",
        "description": "This is a shopping transaction that returns a list of car offers. The minimum input parameters to use are pickUpDateTime, dropOffDateTime and the pickup location (e.g. pickUpLocationCode or providerPickUpLocationCode).\nLanguage codes to used are defined [here](http://www.lingoes.net/en/translator/langcode.htm). e.g. en-GB for English (United Kingdom)\n",
        "operationId": "carAvailability",
        "parameters": [
          {
            "$ref": "#/parameters/providerCodes"
          },
          {
            "$ref": "#/parameters/pickUpDateTime"
          },
          {
            "$ref": "#/parameters/dropOffDateTime"
          },
          {
            "$ref": "#/parameters/pickUpLocationCode"
          },
          {
            "$ref": "#/parameters/dropOffLocationCode"
          },
          {
            "$ref": "#/parameters/providerPickUpLocationCodes"
          },
          {
            "$ref": "#/parameters/providerDropOffLocationCodes"
          },
          {
            "$ref": "#/parameters/acrissCodes"
          },
          {
            "$ref": "#/parameters/acrissCodesExclusion"
          },
          {
            "$ref": "#/parameters/vehicleImageSizes"
          },
          {
            "$ref": "#/parameters/providerLogoSizes"
          },
          {
            "$ref": "#/parameters/driverAge"
          },
          {
            "$ref": "#/parameters/rateClass"
          },
          {
            "$ref": "#/parameters/currencyCode"
          },
          {
            "$ref": "#/parameters/carLoyaltyNumbers"
          },
          {
            "$ref": "#/parameters/isUnlimitedMileage"
          },
          {
            "$ref": "#/parameters/minPrice"
          },
          {
            "$ref": "#/parameters/maxPrice"
          },
          {
            "$ref": "#/parameters/pickUpLatitude"
          },
          {
            "$ref": "#/parameters/pickUpLongitude"
          },
          {
            "$ref": "#/parameters/dropOffLatitude"
          },
          {
            "$ref": "#/parameters/dropOffLongitude"
          },
          {
            "$ref": "#/parameters/pickUpRadius"
          },
          {
            "$ref": "#/parameters/dropOffRadius"
          },
          {
            "$ref": "#/parameters/radiusUnit"
          },
          {
            "$ref": "#/parameters/bookingAgencies"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "description": "Success request",
            "schema": {
              "$ref": "#/definitions/CarOffersListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/search/car-offers/{carOfferId}": {
      "get": {
        "tags": [
          "CarOffer"
        ],
        "summary": "Retrieve the details of the car associated to the referenced car offer",
        "description": "This is a shopping transaction that returns the details of the car associated to the referenced car offer. The 'carOfferId' parameter should refer to one of the car offers returned by the GET /search/car-offers operation.\n",
        "operationId": "carTermsFromAvailability",
        "parameters": [
          {
            "$ref": "#/parameters/carOfferId"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "description": "Success request However, in certain cases, the response will contain the minimum amount of information (similar as the GET /search/car-offers) to continue the shopping and booking flows. This might be due to an error while retrieving the details from the provider (i.e. service outage) and it will be identified by a warning.\n",
            "schema": {
              "$ref": "#/definitions/CarOfferReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/purchase/orders/{orderId}/cars": {
      "post": {
        "tags": [
          "Order"
        ],
        "operationId": "addCarsToOrder",
        "summary": "Add one or several cars to the order",
        "description": "Add one or several cars to a given order. Cars content is returned.\nDictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "name": "postCarBody",
            "in": "body",
            "description": "A car object contains mandatory and non mandatory elements.\nBy default, optional elements are considered as not selected by the end user.\nNon mandatory elements status can be specified / updated if selected by the end user.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostOrderCarRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CarsListReply"
            }
          },
          "400": {
            "description": "Errors returned by the application:\n|  Code   |           Title       | Description                                                                    |\n|:-------:|:---------------------:|--------------------------------------------------------------------------------|\n|  41224  | UNABLE TO BOOK CAR    | Unable to retrieve Details of the Offer.                                       |\n|  37693  | INVALID CAR OFFER ID  | Error returned when The requested car id does not correspond to any valid car. |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Errors returned by the application:\n|  Code   |           Title       | Description                                                                    |\n|:-------:|:---------------------:|--------------------------------------------------------------------------------|\n|  36894  | ORDER NOT FOUND       |                                                                                |\n|  36890  | TRAVELER NOT FOUND    |                                                                                |\n|  7425   | FLIGHT NOT FOUND      |                                                                                |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/purchase/orders/{orderId}/cars/cancellation": {
      "post": {
        "tags": [
          "Order"
        ],
        "operationId": "deleteCarsFromOrder",
        "summary": "Delete one or several cars from a given order",
        "description": "Delete one or several cars from a given order.",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "name": "deleteCarBody",
            "in": "body",
            "description": "A CarCancelRequest object contains an array of carIds to be deleted.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CarCancelRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CarCancelReply"
            }
          },
          "400": {
            "description": "Errors returned by the application:\n|  Code   |           Title       | Description                                                                    |\n|:-------:|:---------------------:|--------------------------------------------------------------------------------|\n|         | UNABLE TO DELETE CAR  |                                                                                |\n|  37693  | INVALID CAR OFFER ID  | Error returned when The requested car id does not correspond to any valid car. |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Errors returned by the application:\n|  Code   |           Title       | Description                                                                    |\n|:-------:|:---------------------:|--------------------------------------------------------------------------------|\n|  36894  | ORDER NOT FOUND       |                                                                                |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/communication/user-notifications/by-order": {
      "post": {
        "tags": [
          "Communication"
        ],
        "summary": "Send user notifications",
        "description": "This entry point triggers a notification to the contacts provided in the request. Group PNRs are not supported.\n",
        "operationId": "sendNotifications",
        "parameters": [
          {
            "name": "getNotificationRequestBody",
            "description": "Send notification parameters",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/StandaloneNotificationRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/search/flight-details": {
      "get": {
        "tags": [
          "FlightInformation"
        ],
        "summary": "Get Flight Information",
        "description": "Return the flight information for a given flight number.\n",
        "operationId": "standaloneFlightInfo",
        "parameters": [
          {
            "$ref": "#/parameters/marketingAirlineCode"
          },
          {
            "$ref": "#/parameters/marketingFlightNumber"
          },
          {
            "$ref": "#/parameters/optionalDepartureDate"
          }
        ],
        "responses": {
          "200": {
            "description": "Flight information by flight number",
            "schema": {
              "$ref": "#/definitions/FlightInformationReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/search/flight-details/by-order": {
      "get": {
        "tags": [
          "FlightInformation"
        ],
        "summary": "Get Flight Information by order",
        "description": "Return the flight information for a given Order and flight id.\n",
        "operationId": "flightInformationByOrder",
        "parameters": [
          {
            "$ref": "#/parameters/queryOrderId"
          },
          {
            "$ref": "#/parameters/queryFlightId"
          },
          {
            "$ref": "#/parameters/lastName"
          }
        ],
        "responses": {
          "200": {
            "description": "Flight information by order and flightid",
            "schema": {
              "$ref": "#/definitions/FlightInformationReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/search/flight-timetables": {
      "get": {
        "tags": [
          "FlightInformation"
        ],
        "summary": "Get Flight timetables",
        "description": "Display existing flights and the day(s) of the week they operate for a given departure and destination and from a 7 days range starting from the date given in input . If no date is specified, the current date is taken. This entry point does not provide seats availability for the returned flights. A display by departing, arrival or elapsed time can be specified, else a neutral order is provided. The Neutral display sorting depends on your market regulations.\n   - Neutral EU display (World except North and Latin America)\n    1. Non stop flights, by departure time (earliest to latest)\n    2. Direct flights by elapsed flying time (EFT)\n    3. Change of gauge, 2 and 3 segment connections by EFT\n    4. Four segment connections by EFT\n    5. Five segment connections by EFT\n   - Neutral DOT display (North and Latin America)\n    1. Non stop flights by departure time\n    2. Change of equipment and Direct flights by elapsed flying time (EFT)\n    3. Two segments online connections by EFT\n    4. Two segments interline connections by EFT\n    5. Three segments connections by EFT\n    6. Four segments connections by EFT\n    7. Five segments connections by EFT\nA maximum number of entries to be returned can be specified.\n",
        "operationId": "standaloneFlightTimetable",
        "parameters": [
          {
            "$ref": "#/parameters/originLocationCode"
          },
          {
            "$ref": "#/parameters/destinationLocationCode"
          },
          {
            "$ref": "#/parameters/departureDate"
          },
          {
            "$ref": "#/parameters/arrangeBy"
          },
          {
            "$ref": "#/parameters/maxTimetable"
          }
        ],
        "responses": {
          "200": {
            "description": "Flight timetable information",
            "schema": {
              "$ref": "#/definitions/FlightTimetableListReply"
            }
          },
          "400": {
            "description": "Bad request Errors or warnings that can be returned by the application:\n|  Code   |           Title                    | Description                                                                         |\n|:-------:|:----------------------------------:|-------------------------------------------------------------------------------------|\n|  39333  | INVALID DATE                       | Invalid date.                                                                       |\n|  39360  | NO FLIGHT FOUND                    | No flight found for the given route and date.                                       |\n|  65019  | UNABLE TO PROCESS                  | Technical error.                                                                    |\n|  04926  | INVALID DATA RECEIVED              | Max parameter value must be between 1 and 600.                                      |\n|  67400  | INVALID INPUT                      | Invalid value for arrangeBy and max.                                                |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/shopping/carts/{cartId}/hotel-offers": {
      "post": {
        "tags": [
          "Cart"
        ],
        "operationId": "addHotelOffersToCart",
        "summary": "Add one or several hotel offers to the cart",
        "description": "Add one or several hotel offers to a given cart. The list of added HotelOffers is returned.\n",
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "name": "postHotelOfferBody",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HotelOffersSelectionRequest"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returned in case of successful Hotel creation.\nPossible warnings that can be returned by the API:\n|  Code  |           Title                 | Description                                                              |\n|:------:|:-------------------------------:|--------------------------------------------------------------------------|\n|  39542 | HOTEL PRICE DISCREPANCY         | Warning returned if there a price discrepancy detected                   |\n|  39566 | CANCELLATION POLICY DISCREPANCY | Warning returned if a discrepancy is detected in the cancellation policy.|\n",
            "schema": {
              "$ref": "#/definitions/HotelOffersListReply"
            }
          },
          "400": {
            "description": "Errors returned by the application:\n|  Code   |           Title       | Description                                                 |\n|:-------:|:---------------------:|-------------------------------------------------------------|\n|  04926   | INVALID DATA RECEIVED | Generic error returned when invalid data recieved in input. |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Errors returned by the application:\n \n |  Code   |           Title     | Description                                                                                             |\n \n |:-------:|:-------------------:|---------------------------------------------------------------------------------------------------------|\n \n |  36798  | CART NOT FOUND      | Error returned when cart is not found.                                                                  |\n \n |  38512  | HOTEL NOT FOUND     | Error returned when The requested hotelOffer id does not correspond to any valid hotel offer.             |\n ",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Errors returned by the application:\n|  Code   |           Title     | Description                                                                                             |\n|:-------:|:-------------------:|---------------------------------------------------------------------------------------------------------|\n|  11     | UNABLE TO PROCESS   | Unexpected Error.                                                                                       |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "summary": "Remove hotel offers from a cart",
        "description": "Delete hotel offers from a cart.",
        "operationId": "deleteHotelOffersFromCart",
        "tags": [
          "Cart"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "name": "hotelOfferIds",
            "description": "List of hotel offers to delete from a cart.",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "400": {
            "description": "Errors returned by the application:\n|  Code   |           Title       | Description                                           |\n|:-------:|:---------------------:|-------------------------------------------------------|\n|  04926   | INVALID DATA RECEIVED | Error returned when invalid data is present in input. |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Errors returned by the application:\n|  Code   |           Title | Description                                              |\n|:-------:|:---------------:|----------------------------------------------------------|\n|  38512  | HOTEL NOT FOUND | Error returned when the requested hotel cannot be found. |\n|  36798  | CART NOT FOUND  | Error returned when the requested cart cannot be found.  |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Errors returned by the application:\n|  Code   |           Title       | Description                                           |\n|:-------:|:---------------------:|-------------------------------------------------------|\n|  11     | UNABLE TO PROCESS     |Unexpected Error.                                      |\n ",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "get": {
        "summary": "Retrieve all hotel offers from a cart",
        "description": "Retrieve all HotelOffers from a Cart based on cart id.\n",
        "operationId": "retrieveHotelOffersFromCart",
        "tags": [
          "Cart"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HotelOffersListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Errors returned by the application:\n|  Code   |           Title       | Description                                              |\n|:-------:|:---------------------:|----------------------------------------------------------|\n|  04926   | INVALID DATA RECEIVED | Error returned when invalid data is present in input.    |\n|  38512  | HOTEL NOT FOUND       | Error returned when the requested hotel cannot be found. |\n|  36798  | CART NOT FOUND        | Error returned when the requested cart cannot be found.  |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Errors returned by the application:\n|  Code   |           Title       | Description                                              |\n|:-------:|:---------------------:|----------------------------------------------------------|\n|  11     | UNABLE TO PROCESS     |Unexpected Error.                                         |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/shopping/carts/{cartId}/hotel-offers/{hotelOfferId}": {
      "get": {
        "summary": "Retrieve a specific hotel offer from a cart",
        "description": "Retrieve the hotel offer corresponding to the given hotelOfferId from a cart.\n",
        "operationId": "retrieveHotelOfferFromCart",
        "tags": [
          "Cart"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/hotelOfferId"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HotelOffersListReply"
            }
          },
          "400": {
            "description": "** Error Codes **\n\ncode    | title\n------- | -----------------------\n111     | Check format\n2222    | Mandatory data missing\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "summary": "Remove a specific hotel offer from a cart",
        "description": "Delete the hotel offer corresponding to the given hotelOfferId from a cart.\n",
        "operationId": "deleteHotelOfferFromCart",
        "tags": [
          "Cart"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/hotelOfferId"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/search/hotel-offers": {
      "get": {
        "summary": "Search for hotels and retrieve availability and rates information",
        "tags": [
          "HotelShopping"
        ],
        "description": " This method returns a list of hotels with multiple shopping offers around a city center or geolocation for a given date range.\n\n Alternatively, it is also possible to ask for a specific list of hotels.\n\n The user can refine the search criteria by asking for specific hotel categories, hotel chains or hotel facilities, such as parking or restaurant.\n\n It is also possible to ask for a specific meal or budget.\n\n By default, only available hotels are returned, with the cheapest available option for each hotel. It is however also possible to retrieve details about the closed properties, and to retrieve all available offers per hotel at this stage.\n\n Language codes to used are defined [here](http://www.lingoes.net/en/translator/langcode.htm).\n e.g. en-GB for English (United Kingdom) \n\n -------------------------------------------------------------\n\n Warning: at this step only preleminary prices are returned.\n\n Minimum mandatory parameters for this search: at least one of the following criteria (which are mutually exclusive): - cityCode - longitude and latitude - list of hotels -------------------------------------------------------------\n\n",
        "operationId": "GetMultiHotelOffers",
        "parameters": [
          {
            "$ref": "#/parameters/optionalCartId"
          },
          {
            "$ref": "#/parameters/optionalOrderId"
          },
          {
            "$ref": "#/parameters/cityCode"
          },
          {
            "$ref": "#/parameters/latitude"
          },
          {
            "$ref": "#/parameters/longitude"
          },
          {
            "$ref": "#/parameters/hotelIds"
          },
          {
            "$ref": "#/parameters/checkInDate"
          },
          {
            "$ref": "#/parameters/checkOutDate"
          },
          {
            "$ref": "#/parameters/adults"
          },
          {
            "$ref": "#/parameters/childAges"
          },
          {
            "$ref": "#/parameters/countryOfResidence"
          },
          {
            "$ref": "#/parameters/radius"
          },
          {
            "$ref": "#/parameters/radiusUnit"
          },
          {
            "$ref": "#/parameters/hotelName"
          },
          {
            "$ref": "#/parameters/hotelProviderCodes"
          },
          {
            "$ref": "#/parameters/rateCodes"
          },
          {
            "$ref": "#/parameters/preferredProviderCodes"
          },
          {
            "$ref": "#/parameters/roomQuantity"
          },
          {
            "$ref": "#/parameters/amenities"
          },
          {
            "$ref": "#/parameters/ratings"
          },
          {
            "$ref": "#/parameters/priceRange"
          },
          {
            "$ref": "#/parameters/currencyCode"
          },
          {
            "$ref": "#/parameters/paymentPolicy"
          },
          {
            "$ref": "#/parameters/boardType"
          },
          {
            "$ref": "#/parameters/includeClosed"
          },
          {
            "$ref": "#/parameters/bestRateOnly"
          },
          {
            "$ref": "#/parameters/consolidated"
          },
          {
            "$ref": "#/parameters/view"
          },
          {
            "$ref": "#/parameters/sort"
          },
          {
            "$ref": "#/parameters/pageLimit"
          },
          {
            "$ref": "#/parameters/pageOffset"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of hotel offers, ie. hotels with their attributes plus available rates at each returned hotel.",
            "schema": {
              "$ref": "#/definitions/MultiHotelsOffers"
            }
          },
          "400": {
            "description": "code    | title                                  ------- | -------------------------------------  23      | PASSENGER TYPE NOT SUPPORTED 61      | INVALID CURRENCY CODE 137     | INVALID ADULTS OCCUPANCY REQUESTED 145     | DURATION PERIOD OR DATES INCORRECT 195     | SERVICE RESTRICTION 249     | INVALID RATE CODE 377     | MAX STAY DURATION IS EXCEEDED 381     | INVALID CHECK-IN DATE 382     | INVALID CHECK-OUT DATE 383     | INVALID CITY CODE 392     | INVALID HOTEL CODE 397     | INVALID NUMBER OF ADULTS 400     | INVALID PROPERTY CODE 402     | INVALID ROOM TYPE 404     | CHECK_OUT DATE MUST BE FURTHER IN THE FUTURE THAN CHECK-IN DATE 424     | NO HOTELS FOUND WHICH MATCH THIS INPUT 431     | CHECK-OUT DATE IS TOO FAR IN THE FUTURE 450     | INVALID PROVIDER RESPONSE 451     | INVALID CREDENTIALS 562     | RESTRICTED ACCESS FOR THE REQUESTED RATES AND CHAINS 784     | TIME OUT 790     | NO PROPERTIES FOUND WITHIN THIS RADIUS 795     | NO SIMILAR NAME FOUND, PLEASE ENLARGE YOUR SEARCH CRITERIA 842     | RATE SECURITY NOT LOADED\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/search/hotel-offers/by-hotel": {
      "get": {
        "summary": "Get one hotel and its available offers",
        "tags": [
          "HotelShopping"
        ],
        "description": " This method will return all available offers for a given hotel at a given date range.\n\n The user can refine the search criteria by asking for a specific meal or budget, or other parameters as described in this documentation.\n\n The returned list of offers can show different prices due to different room types (a luxury suite should be more expensive than a standard room), board type (a rate can include or not a breakfast or a dinner), or rate code (for example, some specific discount can apply for senior guests)\n\n Language codes to used are defined [here](http://www.lingoes.net/en/translator/langcode.htm).\n e.g. en-GB for English (United Kingdom) \n -------------------------------------------------------------\n\n Warning: at this step, only preliminary prices are returned.\n\n",
        "operationId": "GetSingleHotelOffers",
        "parameters": [
          {
            "$ref": "#/parameters/optionalCartId"
          },
          {
            "$ref": "#/parameters/optionalOrderId"
          },
          {
            "$ref": "#/parameters/hotelId"
          },
          {
            "$ref": "#/parameters/checkInDate"
          },
          {
            "$ref": "#/parameters/checkOutDate"
          },
          {
            "$ref": "#/parameters/adults"
          },
          {
            "$ref": "#/parameters/childAges"
          },
          {
            "$ref": "#/parameters/countryOfResidence"
          },
          {
            "$ref": "#/parameters/rateCodes"
          },
          {
            "$ref": "#/parameters/roomQuantity"
          },
          {
            "$ref": "#/parameters/currencyCode"
          },
          {
            "$ref": "#/parameters/paymentPolicy"
          },
          {
            "$ref": "#/parameters/boardType"
          },
          {
            "$ref": "#/parameters/viewSingle"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "description": "Details of a single offer on a given hotel.",
            "schema": {
              "$ref": "#/definitions/SingleHotelOffers"
            }
          },
          "400": {
            "description": "code    | title                                  ------- | -------------------------------------  23      | PASSENGER TYPE NOT SUPPORTED 61      | INVALID CURRENCY CODE 137     | INVALID ADULTS OCCUPANCY REQUESTED 145     | DURATION PERIOD OR DATES INCORRECT 195     | SERVICE RESTRICTION 249     | INVALID RATE CODE 377     | MAX STAY DURATION IS EXCEEDED 381     | INVALID CHECK-IN DATE 382     | INVALID CHECK-OUT DATE 383     | INVALID CITY CODE 392     | INVALID HOTEL CODE 397     | INVALID NUMBER OF ADULTS 400     | INVALID PROPERTY CODE 402     | INVALID ROOM TYPE 404     | CHECK_OUT DATE MUST BE FURTHER IN THE FUTURE THAN CHECK-IN DATE 424     | NO HOTELS FOUND WHICH MATCH THIS INPUT 431     | CHECK-OUT DATE IS TOO FAR IN THE FUTURE 450     | INVALID PROVIDER RESPONSE 451     | INVALID CREDENTIALS 562     | RESTRICTED ACCESS FOR THE REQUESTED RATES AND CHAINS 784     | TIME OUT 790     | NO PROPERTIES FOUND WITHIN THIS RADIUS 795     | NO SIMILAR NAME FOUND, PLEASE ENLARGE YOUR SEARCH CRITERIA 842     | RATE SECURITY NOT LOADED\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Hotel not found",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/search/hotel-offers/{offerId}": {
      "get": {
        "summary": "Get room and rate details",
        "tags": [
          "HotelShopping"
        ],
        "description": "Return all available details of a specific offer for a specific property.\nReturned details mainly includes:\n - accepted methods of payment\n - cancellation policies\n - guaranteed pricing\n - descriptions about the meal, room, and rate plan.\n\n",
        "operationId": "GetOfferPricing",
        "parameters": [
          {
            "$ref": "#/parameters/optionalCartId"
          },
          {
            "$ref": "#/parameters/optionalOrderId"
          },
          {
            "$ref": "#/parameters/offerId"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "description": "Details of a single offer on a given hotel.",
            "schema": {
              "$ref": "#/definitions/SingleHotelOffers"
            }
          },
          "400": {
            "description": "code    | title                                  ------- | -------------------------------------  23      | PASSENGER TYPE NOT SUPPORTED 61      | INVALID CURRENCY CODE 137     | INVALID ADULTS OCCUPANCY REQUESTED 145     | DURATION PERIOD OR DATES INCORRECT 195     | SERVICE RESTRICTION 249     | INVALID RATE CODE 377     | MAX STAY DURATION IS EXCEEDED 381     | INVALID CHECK-IN DATE 382     | INVALID CHECK-OUT DATE 383     | INVALID CITY CODE 392     | INVALID HOTEL CODE 397     | INVALID NUMBER OF ADULTS 400     | INVALID PROPERTY CODE 402     | INVALID ROOM TYPE 404     | CHECK_OUT DATE MUST BE FURTHER IN THE FUTURE THAN CHECK-IN DATE 424     | NO HOTELS FOUND WHICH MATCH THIS INPUT 431     | CHECK-OUT DATE IS TOO FAR IN THE FUTURE 450     | INVALID PROVIDER RESPONSE 451     | INVALID CREDENTIALS 562     | RESTRICTED ACCESS FOR THE REQUESTED RATES AND CHAINS 784     | TIME OUT 790     | NO PROPERTIES FOUND WITHIN THIS RADIUS 795     | NO SIMILAR NAME FOUND, PLEASE ENLARGE YOUR SEARCH CRITERIA 842     | RATE SECURITY NOT LOADED\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Hotel or offer not found",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/search/insurance-offers": {
      "get": {
        "operationId": "retrieveInsuranceOffers",
        "summary": "Retrieve multiple insurance offers",
        "description": "Returns a list of Insurance Offers. Under Implementation.\n",
        "tags": [
          "InsuranceOffer"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/queryOrderId"
          },
          {
            "$ref": "#/parameters/insuranceProviderCodes"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "name": "travelerResidenceCountryCode",
            "description": "Country of residence in ISO 3166-1",
            "required": false,
            "in": "query",
            "type": "string",
            "pattern": "[a-zA-Z0-9]{2}",
            "x-risk-personal-data-field": "ADDRESS"
          },
          {
            "name": "travelerResidenceStateCode",
            "description": "State code of residence(two character standard IATA state code)",
            "required": false,
            "in": "query",
            "type": "string",
            "pattern": "[a-zA-Z0-9]{1,2}",
            "x-risk-personal-data-field": "ADDRESS"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/InsuranceOffersReply"
            }
          },
          "400": {
            "description": "Bad request Warnings that can be returned by the application:\n|  Code   |           Title                    | Description                                                                         |\n|:-------:|:----------------------------------:|-------------------------------------------------------------------------------------|\n|  1      | CHECK FORMAT                       | Regular expression not matched                                                      |\n|  5041   | ZZZ/APPLICATION ERROR              | Details were sent to the insurance provider's backend, yet were not compatible with a valid search. This could mean parameters are incorrect, or missing.|",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "500": {
            "description": "Unexpected error Warnings that can be returned by the application:\n|  Code   |           Title                    | Description                                                                         |\n|:-------:|:----------------------------------:|-------------------------------------------------------------------------------------|\n|  11      | UNABLE TO PROCESS                 | Unexpected error                                                                    |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/search/insurance-offers/{insuranceOfferId}": {
      "get": {
        "operationId": "retrieveInsuranceOffer",
        "summary": "Retrieve an insurance offer",
        "description": "Returns the details of a specific Insurance Offer.\n",
        "tags": [
          "InsuranceOffer"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/insuranceOfferId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/InsuranceOfferReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/merchandising/teasers/by-cart": {
      "get": {
        "tags": [
          "Teaser"
        ],
        "summary": "Get the merchandising teasers.",
        "description": "Returns a list of non-air teasers computed according to the content of a cart (cartId provided in input) and based on rules defined in AAM for a given airline. For more details about AAM please see Amadeus Anytime Merchandising.\n        \nReturns a list of teaser items computed according to the AAM matching rules for the provided cart. Each teaser item is made of: - a set of teaser common attributes (teaserId, recommendationType, priorityOrder, mediaId ...) - a set search request criteria for the type of recommended product (car, hotel, insurance ...)\nNote: at this step no actual non-air offer is returned.\n",
        "operationId": "retrieveTeaserInfoByCart",
        "parameters": [
          {
            "name": "cartId",
            "description": "Identifier of the cart",
            "required": true,
            "in": "query",
            "type": "string",
            "pattern": "[a-zA-Z0-9]{1,20}",
            "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
          },
          {
            "$ref": "#/parameters/recommendationTypes"
          }
        ],
        "responses": {
          "200": {
            "description": "The merchandising teaser information for a given cart\nWarnings that can be returned by the application:\n|  Code   |           Title                | Description                                                                         |\n|:-------:|:------------------------------:|-------------------------------------------------------------------------------------|\n|  38783  | INVALID PRODUCT TYPE           | Warning returned when Product type <recommendationType> is not recognized.          |\n|  38799  | NO TEASER FOR REQUESTED TYPE   | Warning returned when No teaser item found for specified type <recommendationType>. |",
            "schema": {
              "$ref": "#/definitions/TeasersListReply"
            }
          },
          "400": {
            "description": "Errors that can be returned by the application:\n|  Code   |           Title       | Description                                                                                                                     |\n|:-------:|:---------------------:|---------------------------------------------------------------------------------------------------------------------------------|\n|  04926   | INVALID DATA RECEIVED | Error returned when Mandatory input criteria is missing in the request or when input parameter is not matching expected format. |\n|  38797  | INVALID PRODUCT TYPE  | Error returned when None of the specified product type is recognized.                                                                            |",
            "schema": {
              "$ref": "#/definitions/WarningMessage"
            }
          },
          "404": {
            "description": "Errors that can be returned by the application:\n|  Code   |           Title              | Description                                                                 |\n|:-------:|:----------------------------:|-----------------------------------------------------------------------------|\n|  36798  | CART NOT FOUND               | Error returned when Cart is not found.                                      |\n|  38784  | NO TEASER FOR REQUESTED TYPE | Error returned when No teaser item is found for any specified product type. |",
            "schema": {
              "$ref": "#/definitions/WarningMessage"
            }
          },
          "default": {
            "description": "Errors that can be returned by the application:\n|  Code   |           Title              | Description                                                                 |\n|:-------:|:----------------------------:|-----------------------------------------------------------------------------|\n|  11     | UNABLE TO PROCESS            | Unexpected error.                                                           |",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        }
      }
    },
    "/merchandising/teasers/by-order": {
      "get": {
        "tags": [
          "Teaser"
        ],
        "summary": "Get the merchandising teasers.",
        "description": "Returns a list of non-air teasers computed according to the content of an order (orderId provided in input) and based on rules defined in AAM for a given airline. For more details about AAM please see Amadeus Anytime Merchandising.\nReturns a list of teaser items computed according to the AAM matching rules for the provided order. Each teaser item is made of: - a set of teaser common attributes (teaserId, recommendationType, priorityOrder, mediaId ...) - a set search request criteria for the type of recommended product (car, hotel, insurance ...)\nNote: at this step no actual non-air offer is returned.\n",
        "operationId": "retrieveTeaserInfoByOrder",
        "parameters": [
          {
            "$ref": "#/parameters/queryOrderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/recommendationTypes"
          }
        ],
        "responses": {
          "200": {
            "description": "The merchandising teaser information for a given order\nWarnings that can be returned by the application:\n|  Code   |           Title                | Description                                                                         |\n|:-------:|:------------------------------:|-------------------------------------------------------------------------------------|\n|  38783  | INVALID PRODUCT TYPE           | Warning returned when Product type <recommendationType> is not recognized.          |\n|  38799  | NO TEASER FOR REQUESTED TYPE   | Warning returned when No teaser item found for specified type <recommendationType>. |\n ",
            "schema": {
              "$ref": "#/definitions/TeasersListReply"
            }
          },
          "400": {
            "description": "Errors that can be returned by the application:\n|  Code   |           Title       | Description                                                                                                                     |\n|:-------:|:---------------------:|---------------------------------------------------------------------------------------------------------------------------------|\n|  04926   | INVALID DATA RECEIVED | Error returned when Mandatory input criteria is missing in the request or when input parameter is not matching expected format. |\n|  38797  | INVALID PRODUCT TYPE  | Error returned when None of the specified product type is recognized.                                                                            |",
            "schema": {
              "$ref": "#/definitions/WarningMessage"
            }
          },
          "404": {
            "description": "Errors that can be returned by the application:\n|  Code   |           Title              | Description                                                                 |\n|:-------:|:----------------------------:|-----------------------------------------------------------------------------|\n|  36894  | ORDER NOT FOUND              | Error returned when Order is not found.                                     |\n|  38784  | NO TEASER FOR REQUESTED TYPE | Error returned when No teaser item is found for any specified product type. |",
            "schema": {
              "$ref": "#/definitions/WarningMessage"
            }
          },
          "default": {
            "description": "Errors that can be returned by the application:\n|  Code   |           Title              | Description                                                                 |\n|:-------:|:----------------------------:|-----------------------------------------------------------------------------|\n|  11     | UNABLE TO PROCESS            | Unexpected error.                                                           |",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        }
      }
    },
    "/merchandising/teasers": {
      "post": {
        "tags": [
          "Teaser"
        ],
        "summary": "Get the teaser details.",
        "description": "\nReturns a list of teasers with a rich set of details: third party providers information, search criteria and recommendations.\nThe carLoyaltyNumbers parameter can be used to apply special discounts.\n",
        "operationId": "retrieveTeaserDetails",
        "parameters": [
          {
            "name": "inputParams",
            "description": "Teaser input parameters",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/TeaserRequest"
            }
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "$ref": "#/parameters/currencyCode"
          }
        ],
        "responses": {
          "200": {
            "description": "The merchandising teaser information for a given order\nWarnings that can be returned by the application:\n|  Code   |           Title                         | Description                                                                                                |\n|:-------:|:---------------------------------------:|------------------------------------------------------------------------------------------------------------|\n|  38801  | INVALID TEASER ID                       | Warning returned when teaserId is not valid.                                                               |\n|  38804  | NO CAR OFFER FOR REQUESTED TEASER       | Warning returned when No Car offer has been retrieved for specified teaser id.                             |\n|  38806  | NO HOTEL OFFER FOR REQUESTED TEASER     |  Warning returned when No Hotel offer has been retrieved for specified teaser id.                          |\n|  38803  | NO INSURANCE OFFER FOR REQUESTED TEASER |  Warning returned when No Insurance offer has been retrieved for specified teaser id.                      |\n|  38802  | INVALID TEASER MODE                     | Warning returned when Teaser mode <teaserMode> is not recognized. Default behavior applies.                |\n|  41229  | TEASER MODE NOT APPLICABLE TO CAR       | Warning returned when requested searchMode does not apply to a Car teaser. Default behavior applies.       |\n|  41230  | TEASER MODE NOT APPLICABLE TO HOTEL     | Warning returned when requested searchMode does not apply to a Hotel teaser. Default behavior applies.     |\n|  41232  | TEASER MODE NOT APPLICABLE TO INSURANCE | Warning returned when requested searchMode does not apply to a Insurance teaser. Default behavior applies. |",
            "schema": {
              "$ref": "#/definitions/TeasersListReply"
            }
          },
          "400": {
            "description": "Errors that can be returned by the application:\n|  Code   |           Title       | Description                                                                                                                     |\n|:-------:|:---------------------:|---------------------------------------------------------------------------------------------------------------------------------|\n|  04926   | INVALID DATA RECEIVED | Error returned when Mandatory input criteria is missing in the request or when input parameter is not matching expected format. |\n|  38800  | INVALID TEASER ID     | Error returned when None of the provided teaser id are valid.                                                                   |",
            "schema": {
              "$ref": "#/definitions/WarningMessage"
            }
          },
          "404": {
            "description": "Errors that can be returned by the application:\n|  Code   |           Title               | Description                                                            |\n|:-------:|:-----------------------------:|------------------------------------------------------------------------|\n|  38805  | NO OFFER FOR REQUESTED TEASER | Error returned when No offer is retrieved for any specified teaser id. |\n|  36798  | CART NOT FOUND                | Error returned when Cart is not found.                                 |",
            "schema": {
              "$ref": "#/definitions/WarningMessage"
            }
          },
          "default": {
            "description": "Errors that can be returned by the application:\n|  Code   |           Title               | Description                                                            |\n|:-------:|:-----------------------------:|------------------------------------------------------------------------|\n|  11     | UNABLE TO PROCESS             | Unexpected error.                                                      |",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        }
      }
    },
    "/purchase/payment-methods": {
      "post": {
        "summary": "Get payment method(s) and split payment options that can be used to pay",
        "description": "This entry point returns the list of payment methods available to pay the order provided in input, as well the remaining amount to pay.\nThe following PaymentMethods are supported: - PaymentCard - ExternalPayment - MilesPayment - AlternativePaymentMethod\n----- ### Split payment\nIn case the API user wishes to split the payment across several payment methods, the API user can send one or several payment methods with an associated amount in the body and the API will return the remaining amount to pay if the payment methods do not cover the full amount to be paid, and a summary of what will be charged on each provided payment methods.\n\nThe following combinations of PaymentMethod for Split Payment are supported: - PaymentCard and MilesPayment - ExternalPayment and MilesPayment\n----- ### PaymentCard\nIn case the PaymentMethod sent in input is a PaymentCard, the API returns  the amount covered by the card as well as the card fees that will apply if the user proceeds with the payment later on.\n----- ### Note This is just an informative entry point: it does NOT trigger any payment transaction (authorization, debit, etc.).\nLast name of one of the travelers may be required for security reasons.\n",
        "operationId": "searchAndValidatePaymentMethods",
        "parameters": [
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "name": "createPaymentRecordsBody",
            "description": "Request to validate the split payment for an order.",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ValidatePaymentMethodsRequest"
            }
          }
        ],
        "tags": [
          "Payment"
        ],
        "responses": {
          "200": {
            "description": "Details and payment options available for the provided payment methods.<br/>\n**Error codes**\n|Code | Title                                            | Description                                                                                                                                                                                                                                                                       |\n|:---:|:------------------------------------------------:|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n|27802|VOUCHER NOT ACTIVE                                | The voucher status is not valid for usage.                                                                                                                                                                                                                                        |\n|32700|INVALID INPUT DATA                                | Seat and services can't be combined with orderChangeId.                                                                                                                                                                                                                           |\n|36864|FREQUENT FLYER CARD NOT FOUND                     | MilesPayment: a frequent flyer card is required in input.                                                                                                                                                                                                                         |\n|36892|SERVICE NOT FOUND                                 | The service or seat does not exist in the order.                                                                                                                                                                                                                                  |\n|36907|INVALID FREQUENT FLYER CARD                       | The provided frequent flyer card is invalid (MilesPayment use cases).                                                                                                                                                                                                             |\n|37129|VOUCHER IS NOT AVAILABLE FOR USAGE                | The provided VoucherPayment doesn't have a valid status for payment.                                                                                                                                                                                                              |\n|37513|MISSING PAYMENT METHOD                            | No payment methods have been provided in input.                                                                                                                                                                                                                                   |\n|37514|ORDER CONTAINS PAYMENT RECORDS                    | The order already contains a payment record.                                                                                                                                                                                                                                      |\n|37515|ORDER CONTAINS TRAVEL DOCUMENTS                   | The order doesn't contain a payment-record but already contains a travel document.                                                                                                                                                                                                |\n|37516|INVALID CHECKSUM                                  | The checksum sent in input for the ExternalPayment does not match the one computed internally.                                                                                                                                                                                    |\n|37576|INVALID PAYMENT METHOD                            | At least one of the provided payment methods is not valid. Some use cases:<br/>- Missing some parameters (e.g. callback URLs)<br/>- Incompatible payment method with the current flow (e.g. asynchronous payment for an ATC Exchange)<br/>- Provided payment method not activated |\n|37581|UNABLE TO GET PAYMENT METHODS                     | The available methods of payment cannot be retrieved. Also applicable to the retrieval of Miles&Cash ranks.                                                                                                                                                                       |\n|37582|NO PAYMENT METHOD AVAILABLE                       | Unable to find any available payment method for the provided order.                                                                                                                                                                                                               |\n|37594|NO FLIGHTS IN THE ORDER                           | The order to pay doesn't contain any flight segments (e.g. after order cancellation).                                                                                                                                                                                             |\n|37595|UNABLE TO PAY ORDER: FLIGHT OR NAME CHANGE        | The order contains a TST that cannot be issued: the traveler(s)/flight(s) have been modified after the pricing.                                                                                                                                                                   |\n|37933|MISSING PRICE FOR SERVICES                        | A chargeable service/seat does not have any associated TSMs.                                                                                                                                                                                                                      |\n|37934|SERVICE ALREADY ISSUED                            | A chargeable service/seat requested to pay is already issued.                                                                                                                                                                                                                     |\n|37935|UNABLE TO PAY ORDER: SERVICE OR PRICE CHANGE      | The seats and/or services in the order have not been modified after the TSM creation.                                                                                                                                                                                             |\n|37936|INVALID SERVICE STATUS                            | Payment is not allowed if the order contains unconfirmed chargeable services.                                                                                                                                                                                                     |\n|37937|INVALID FLIGHT STATUS                             | The order to pay contains unconfirmed flights.                                                                                                                                                                                                                                    |\n|37938|ORDER EXPIRED                                     | The TST has expired.                                                                                                                                                                                                                                                              |\n|37939|MISSING PRICE FOR FLIGHTS                         | The flights in the order do not have pricing information (TST).                                                                                                                                                                                                                   |\n|37940|SERVICE ALREADY PAID                              | The requested seat(s)/service(s) to pay have already been paid.                                                                                                                                                                                                                   |\n|37941|MISSING TRAVEL DOCUMENT FOR FLIGHTS               | A service/seat cannot be issued if flight tickets are also not issued (not applicable to \"Time To Think\" service issuance).                                                                                                                                                       |\n|38014|LAST NAME DOES NOT MATCH ANY TRAVELER IN ORDER    | Last name not found in Order.                                                                                                                                                                                                                                                     |\n|38300|SERVICE NOT CHARGEABLE                            | A service/seat requested for payment that is not chargeable (i.e. free service).                                                                                                                                                                                                  |\n|38353|PAYMENT METHODS NOT COMBINABLE                    | Provided payment methods cannot be combined together (e.g. AlternativePaymentMethod and ExternalPayment).                                                                                                                                                                         |\n|39096|UNABLE TO CREATE PAYMENT METHOD SPLIT             | Unable to identify a valid split payment method for the given request. Please provide a valid methods to split.                                                                                                                                                                   |\n|40508|UNABLE TO CREATE MILES AND CASH PAYMENT METHOD    | Provided paymentMethod(s) for Miles&Cash payment are not valid to pay a service or seat. For instance, when paying services/seats with miles:<br/>- Only one revenue method of payment is allowed<br/>- Either all travelers or none can be paid in miles                         |\n|612474|PAYMENT METHODS COMBINATION DOES NOT SUPPORT 3DS | Several PaymentCards have been provided and are enrolled in 3DSv2.                                                                                                                                                                                                                |\n|65210|UNABLE TO CALCULATE CHECKSUM                      | For ExternalPayment: unable to calculate checksum.                                                                                                                                                                                                                                |\n|65213|CHECKSUM KEY HAS EXPIRED                          | For ExternalPayment: checksum keys have expired.                                                                                                                                                                                                                                  |\n|67412|INVALID INPUT FOR INSTALLMENTS                    | The requested number of instalments is not available.                                                                                                                                                                                                                             |\n**Warning codes**\n|Code | Title                                               | Description                                                                                                                                                                                                                                               |\n|:---:|:---------------------------------------------------:|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n|40072|UNABLE TO PROCESS PARTIAL ITINERARY                  | \"Time To Think\" fee must be paid for all travelers and all flights at once.                                                                                                                                                                               |\n|40271|UNABLE TO IDENTIFY VENDOR CODE                       | Unable to identify automatically the vendor code of a PaymentCard.                                                                                                                                                                                        |\n|41181|ORDER CONTAINS UNCONFIRMED CHARGEABLE SERVICES/SEATS | Unconfirmed services/seats are present in the order, and their payment is not possible.                                                                                                                                                                   |\n|67413|NO INSTALLMENT PLANS AVAILABLE                       | No instalment is available for the elements to pay in the provided order. Some use cases:<br/>- Instalments are not supported in post-booking flows<br/>- Instalments are only supported for PaymentCard<br/>- No instalment plan proposal could be found |",
            "schema": {
              "$ref": "#/definitions/ValidatePaymentMethodsReply"
            }
          },
          "400": {
            "description": "Bad request<br/>\n**Error codes**\n|Code | Title                       | Description                                        |\n|:---:|:---------------------------:|----------------------------------------------------|\n|36962|LAST NAME SHOULD BE PROVIDED | The lastName query parameter needs to be provided. |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Not found<br/>\n**Error codes**\n|Code | Title            | Description                                                         |\n|:---:|:----------------:|---------------------------------------------------------------------|\n|36894|ORDER NOT FOUND   | The order to pay cannot be found.                                   |\n|38828|VOUCHER NOT FOUND | The provided VoucherPayment id was not foundto perform the payment. |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/purchase/payment-methods/miles-payment": {
      "get": {
        "summary": "Retrieve proposals to split the payment between Miles and Cash when using the payment method MilesPayment.",
        "description": "This method provides a list of Miles and Cash splits for a given cart or order.\nA cartId or an orderId must be provided for which the list of Miles and Cash splits will be provided.\nLast name of one of the travelers may be required for security reasons when orderId is provided in input.\nEach split describes a combination of monetary and miles amounts that together can be used when choosing Miles & Cash payment\nThe result will always contain at least 2 splits:\n - The first split in the list is the one where a minimal amount is paid using miles.\n - The last split in the list is the one where the highest possible amount is paid using miles. The highest possible amount can still contain a monetary amount (if the airline does not convert taxes, fees etc.)\nSplits that are in between first and last, if exist, will follow the progression from minimum to maximum miles amount.\n\nAll splits in the result:\n - The miles amount is always a whole number, which denotes the number of miles used when paying with this option.\n - The monetary amounts are always given in the currency of the given cart or order.\n    - convertedAmount: By redeeming miles, the monetary amount has been reduced by this amount.\n    - nonConvertedAmount: This amount will not be paid in miles, it denotes the amount to be paid using a monetary payment method, e.g. Credit Card.\n\nBy referencing a Frequent Flyer Card (that was previously added to the cart or order) using frequentFlyerCardId, you can benefit from more accurate results for Frequent Flyer benefits.\nThe referenced Frequent Flyer Card should be the one that will later be used by the Miles & Cash payment method.\nIf there is no Frequent Flyer information available (yet), the Miles & Cash options are calculated using the default Frequent Flyer program and tier level.\n",
        "operationId": "getPaymentMethodMilesCash",
        "parameters": [
          {
            "$ref": "#/parameters/optionalCartId"
          },
          {
            "$ref": "#/parameters/optionalOrderId"
          },
          {
            "$ref": "#/parameters/optionalFrequentFlyerCardId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "name": "milesAmountToBeIncluded",
            "description": "Miles amount to be included in the Miles and Cash splits.\n\nThis query parameter is used if the API user wishes to get the remaining cash amount  to pay if the traveler spends the miles amount provided in this query parameter.  \n\nIf `milesAmountToBeIncluded` is used, parameter `cashAmountToBeIncluded` cannot be used.\n\nIf this query parameter is used, the reply of the endpoint will contain a `MilesCashSplitListItem` with the field `isMatchingRequestedAmount` set to true.\n\n`Warning`: the usage of this query parameter is restricted and limited to a subset of airlines. It requires a specific/bespoke implementation on the airline side for the subsequent payment calls, as the feature is not supported in the payment-record endpoints. Please contact your implementation contact point before using this query parameter.",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "cashAmountToBeIncluded",
            "description": "Cash amount to be included in the Miles and Cash splits.\n\nThis query parameter is used if the API user wishes to get the remaining miles amount  to pay if the traveler spends the cash amount provided in this query parameter.  \n\nIf `cashAmountToBeIncluded` is used, parameter `milesAmountToBeIncluded` cannot be used.\n\nExample: if the requested cash amount is 140.00, the value to be provided should be 14000.\n\nIf this query parameter is used, the reply of the endpoint will contain a `MilesCashSplitListItem` with the field `isMatchingRequestedAmount` set to true.\n\n`Warning`: the usage of this query parameter is restricted and limited to a subset of airlines. It requires a specific/bespoke implementation on the airline side for the subsequent payment calls, as the feature is not supported in the payment-record endpoints. Please contact your implementation contact point before using this query parameter.",
            "in": "query",
            "required": false,
            "type": "integer"
          }
        ],
        "tags": [
          "Payment"
        ],
        "responses": {
          "200": {
            "description": "List of possible payment options when using the Miles & Cash payment method.\nWarnings that can be returned by this endpoint\n|  Code  |                Title                            | Description                               \t\t\t\t\t\t\t   \t\t\t\t\t\t    |\n|:------:|:-----------------------------------------------:|------------------------------------------------------------------------------------------------|\n|  39417 | MILES CONVERSION FOR SEAT/SERVICE NOT SUPPORTED | Warning raised when the slider is requested for a cart containing chargeable services or seats | \n|  39266 | OFFER CONTAINS UNSUPPORTED SURCHARGES           | Warning raised when the slider is requested for an order containing Q surcharges               |\n|  41549 | REQUESTED AMOUNT WAS ROUNDED                    | Warning raised when the slider is requested with `cashAmountToBeIncluded` or `milesAmountToBeIncluded` and the amount returned by the slider processing does not match the requested amount. A `MilesCashSplitListItem` is however still identified with the field `isMatchingRequestedAmount`, so that the API user can find easily the additional `MilesCashSplitListItem`|\n|  41551 | REQUESTED AMOUNT IS NOT PRESENT IN SLIDER OUTPUT | Warning raised when the amount in `milesAmountToBeIncluded` is greater than the maximum miles amount or the amount in `cashAmountToBeIncluded` is lower than the minimum cash amount allowed by the slider|\nErrors that can be returned by the endpoint:\n|  Code   |              Title              | Description                                                   |\n|:-------:|:-------------------------------:|---------------------------------------------------------------|\n|  37581  | UNABLE TO GET PAYMENT METHODS   | Error raised when the slider is not enabled or misconfigured  |",
            "schema": {
              "$ref": "#/definitions/MilesCashSplitListReply"
            }
          },
          "400": {
            "description": "Bad request\nErrors that can be returned by this endpoint\n|  Code  |          Title               | Description                                            \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t|\n|:------:|:----------------------------:|---------------------------------------------------------------------------------------------------------------------------|\n|  04926 | INVALID DATA RECEIVED\t \t| Error rasied when the request violates swagger spec (e.g. parameter missing or not mathcing expected format) \t\t\t\t|\n|  36907 | INVALID FREQUENT FLYER CARD \t| Error raised when frequent flyer card is missing in the request or no valid profile can be retrieved for the provided card| \n|  36962 | LAST NAME SHOULD BE PROVIDED\t| Error raised when no last name is provided in the request \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t|\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Not found\nErrors that can be returned by this endpoint\n|  Code  |         Title            | Description                                            \t\t\t    \t\t\t\t\t\t\t\t|\n|:------:|:------------------------:|-------------------------------------------------------------------------------------------------------|\n|  36798 | CART NOT FOUND         \t| Error rasied when requested cart id does not exist or is otherwise not available for security reasons |\n|  36894 | ORDER NOT FOUND          | Error returned when the order could not be found. The order id or last name might be invalid          | \n|  36907 | OFFER NOT FOUND          | Error raised when requested cart exists, but it contains no air offer                                 |\n|  37594 | NO FLIGHTS IN THE ORDER\t| Error raised when requested order exists, but it contains no flight\t\t\t\t\t\t\t        |\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/purchase/payment-methods/alternative-currency-payment": {
      "post": {
        "summary": "Retrieve currency conversion proposals.",
        "description": "There are two types of currency conversion available: Dynamic Currency Conversion (DCC): the currency used corresponds to the one associated to the credit card Multiple Currency Proposal (MCP): the conversion is done against a list of currencies as defined by APP (Amadeus Payment Platform) http://www.amadeus.com/airlineit/solutions/sol_2stand_4payment_7currencyconverter.html\n",
        "operationId": "getPaymentCurrencyConversionProposals",
        "parameters": [
          {
            "$ref": "#/parameters/lang"
          },
          {
            "name": "getcurrencyConversionProposalsBody",
            "description": "Request to validate the split payment for an order.",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/PaymentCurrencyConversionProposalListRequest"
            }
          }
        ],
        "tags": [
          "Payment"
        ],
        "responses": {
          "200": {
            "description": "List of possible currency conversion Proposals.\n            \nWarnings that can be returned by the application:\n|  Code   |              Title            | Description                                                        |\n|:-------:|:-----------------------------:|--------------------------------------------------------------------|\n|  39246  | NO DCC/MCP PROPOSAL AVAILABLE | Warning returned when no offer can be provided for the credit card |\n\nErrors that can be returned by the application:\n|  Code   |              Title              | Description                                                        |\n|:-------:|:-------------------------------:|--------------------------------------------------------------------|\n|  39245  | UNABLE TO GET DCC/MCP PROPOSALS | Generic order error raised when no offer can be retrieved from APP |",
            "schema": {
              "$ref": "#/definitions/PaymentCurrencyConversionProposalListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/purchase/order-previews": {
      "get": {
        "summary": "Retrieve the list of orders associated to a frequent flyer card or travel document number.",
        "description": "Retrieve the list of orders associated to a frequent flyer card or a travel document number.\nEither 'frequentFlyerCardNumber' + 'companyCode' or 'travelDocumentId' + 'lastName' are required.\nEach order preview contains the basic information extracted from a corresponding order: please use the GET /purchase/orders/{orderId} entry point for a full view of the order.\nIn case of group PNR, only the traveler matching the input criteria is returned.\n",
        "operationId": "getListOfOrderPreviews",
        "parameters": [
          {
            "$ref": "#/parameters/optionalFrequentFlyerCardNumber"
          },
          {
            "$ref": "#/parameters/optionalCompanyCode"
          },
          {
            "$ref": "#/parameters/optionalTravelDocumentId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/firstName"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "tags": [
          "Order"
        ],
        "responses": {
          "200": {
            "description": "List of order previews",
            "schema": {
              "$ref": "#/definitions/OrderPreviewsListReply"
            }
          },
          "400": {
            "description": "Invalid inputs.",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/purchase/orders/{orderId}/travel-documents": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Retrieve all travel documents for a given order",
        "description": "Retrieve travel documents associated to an order based on the order id.\nDictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).\n",
        "operationId": "retrieveTravelDocuments",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/firstName"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TravelDocumentsListReply"
            }
          },
          "400": {
            "description": "Bad request\nErrors that can be returned by the application:\n\n|  Code   |                    Title                    | Description                                                                            |\n|:-------:|:-------------------------------------------:|----------------------------------------------------------------------------------------|\n|  04926  | INVALID DATA RECEIVED                       | It depends on the error, Mandatory field missing, Bad format,etc.                      |\n|  36962  | LAST NAME SHOULD BE PROVIDED                | Error returned when passenger name missing.                                            |\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Not Found\nErrors returned by the application:\n|  Code   |                    Title                    | Description                                                                            |\n|:-------:|:-------------------------------------------:|----------------------------------------------------------------------------------------|\n|  36894  | ORDER NOT FOUND                             | Error returned when the order could not be found. The order id or last name might be invalid. |\n|  36893  | TRAVEL DOCUMENT NOT FOUND                   | Error returned when the travel document could not be found in order.                   |\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "summary": "Create the travel documents for a given order",
        "description": "Create the travel documents by issuing ETKT (Electronic ticket) and [EMD](https://en.wikipedia.org/wiki/Electronic_Miscellaneous_Document).\nDictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).\n",
        "operationId": "issueTravelDocuments",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "name": "createTravelDocumentsBody",
            "description": "Body for the creation of travel documents",
            "required": false,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/TravelDocumentsRequest"
            }
          }
        ],
        "tags": [
          "Order"
        ],
        "responses": {
          "200": {
            "description": "OK\nErrors that can be returned by the application:\n\n|  Code   |                    Title                    | Description                                                                            |\n|:-------:|:-------------------------------------------:|----------------------------------------------------------------------------------------|\n|  38484  | FEATURE NOT ALLOWED                         | Error if the order is not eligible for issuance.                                       |\nWarnings that can be returned by the application\n|  Code   |                    Title                    | Description                                                                            |\n|:-------:|:-------------------------------------------:|----------------------------------------------------------------------------------------|\n|  37184  | UNABLE TO CREATE A TRAVEL DOCUMENT          | Warning if at least one travel document could not be created.                          |\n|  38706  | AT LEAST ONE NOTIFICATION FAILED            | Warning if at least one document notification could not be performed.                  |            \n|  38126  | UNABLE TO QUEUE                             | Warning if error occurred while trying to queue the PNR to the desired queue.          |       \n",
            "schema": {
              "$ref": "#/definitions/TravelDocumentsListReply"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TravelDocumentsListReply"
            }
          },
          "400": {
            "description": "Bad request\nErrors that can be returned by the application:\n\n|  Code   |                    Title                    | Description                                                                            |\n|:-------:|:-------------------------------------------:|----------------------------------------------------------------------------------------|\n|  04926  | INVALID DATA RECEIVED                       | It depends on the error, Mandatory field missing, Bad format,etc.                      |\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Not Found\nErrors returned by the application:\n|  Code   |                    Title                    | Description                                                                            |\n|:-------:|:-------------------------------------------:|----------------------------------------------------------------------------------------|\n|  36894  | ORDER NOT FOUND                             | Error returned when the order could not be found. The order id or last name might be invalid. |\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/purchase/orders/{orderId}/travel-documents/{travelDocumentId}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Retrieve a specific travel document for a given order",
        "description": "Retrieve a travel documents associated to an order based on the order id and document id.\nDictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).\n",
        "operationId": "retrieveTravelDocument",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/firstName"
          },
          {
            "$ref": "#/parameters/travelDocumentId"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TravelDocumentReply"
            }
          },
          "400": {
            "description": "Bad request\nErrors that can be returned by the application:\n\n|  Code   |                    Title                    | Description                                                                            |\n|:-------:|:-------------------------------------------:|----------------------------------------------------------------------------------------|\n|  04926  | INVALID DATA RECEIVED                       | It depends on the error, Mandatory field missing, Bad format,etc.                      |\n|  36962  | LAST NAME SHOULD BE PROVIDED                | Error returned when passenger name missing.                                            |\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Not Found\nErrors returned by the application:\n|  Code   |                    Title                    | Description                                                                            |\n|:-------:|:-------------------------------------------:|----------------------------------------------------------------------------------------|\n|  36894  | ORDER NOT FOUND                             | Error returned when the order could not be found. The order id or last name might be invalid. |\n|  36893  | TRAVEL DOCUMENT NOT FOUND                   | Error returned when the travel document could not be found in order.                   |\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/purchase/orders/{orderId}/travel-documents/notifications": {
      "post": {
        "summary": "Deliver new notifications of already issued travel documents.",
        "description": "This entry point triggers new deliveries of travel document notifications, following the format  defined by the airline.\nAs for document notifications handled during issuance process, two formats can be delivered (as per airline policies):\n- Email\n- Link toward a PDF file\n",
        "operationId": "deliverTravelDocumentNotifications",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "name": "travelDocumentNotificationsRequest",
            "description": "Request to deliver new travel-document notification(s).",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TravelDocumentNotificationsRequest"
              }
            }
          }
        ],
        "tags": [
          "Order"
        ],
        "responses": {
          "200": {
            "description": "Delivery status for the requested travel documents.<br/>\n**Error codes**\n| Code  | Title                    | Description                                                             |\n|:-----:|:------------------------:|-------------------------------------------------------------------------|\n| 39433 | NOTIFICATION(S) NOT SENT | None of the requested notification was delivered for technical reasons. |\n**Warning codes**\n| Code  | Title                            | Description                                                                                       |\n|:-----:|:--------------------------------:|---------------------------------------------------------------------------------------------------|\n| 41520 | SOME NOTIFICATIONS NOT TRIGGERED | Notifications for some requested travel documents were not delivered due to airline policies.     |\n| 41521 | NOTIFICATIONS NOT TRIGGERED      | No notification delivery is available according to airline policy.                                |\n| 38706 | AT LEAST ONE NOTIFICATION FAILED | Not all requested notifications can be delivered (due to airline policies or technical reasons).  |",
            "schema": {
              "$ref": "#/definitions/TravelDocumentNotificationsReply"
            }
          },
          "400": {
            "description": "Bad request<br/>\n**Error codes**\n| Code  | Title                           | Description                                                                                                                   |\n|:-----:|:-------------------------------:|-------------------------------------------------------------------------------------------------------------------------------|\n| 36962 | LAST NAME SHOULD BE PROVIDED    | The lastName query parameter needs to be provided.                                                                            |\n| 36874 | INVALID CONTACT ID              | No contact id was usable to deliver notifications (e.g. invalid id, no email inside the Order...). No notification delivered. |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Not found<br/>\n**Error codes**\n| Code    | Title                             | Description                                                                                   |\n|:-------:|:---------------------------------:|-----------------------------------------------------------------------------------------------|\n|  36894  | ORDER NOT FOUND                   | Error returned when the order could not be found. The order id or last name might be invalid. |\n|  36893  | TRAVEL DOCUMENT NOT FOUND         | One requested travel document could not be found in order.                                    |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/purchase/orders/{orderId}/travelers": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Retrieve all travelers from an order",
        "description": "Retrieve all travelers from an order based on order id.\nDictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).\n",
        "operationId": "retrieveTravelers",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/firstName"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TravelersListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "patch": {
        "summary": "Update the travelers in the order",
        "description": "Update the travelers in the order.\nThe order must not have been paid. Only the first name element is supported. New travelers cannot be added to the order, the id field is therefore mandatory. Travelers associated to a frequent flyer card cannot be updated.\n",
        "operationId": "patchOrderTravelers",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "name": "patchTravelersBody",
            "description": "Update several travelers in an order",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PatchTraveler"
              }
            }
          }
        ],
        "tags": [
          "Order"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TravelersListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/purchase/orders/{orderId}/travelers/{travelerId}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Retrieve a specific traveler from an order",
        "description": "Retrieve a traveler from an order based on its id.\nDictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).\n",
        "operationId": "retrieveTravelersFromOrder",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/firstName"
          },
          {
            "$ref": "#/parameters/travelerId"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TravelerReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "patch": {
        "summary": "Update the traveler in the order",
        "description": "Update a traveler in the order\nThe order must not have been paid. Only the first name element is supported. New travelers cannot be added to the order, the id field is therefore mandatory. Travelers associated to a frequent flyer card cannot be updated.\n",
        "operationId": "patchOrderTraveler",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/travelerId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "name": "patchTravelerBody",
            "in": "body",
            "description": "traveler details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PatchTraveler"
            }
          }
        ],
        "tags": [
          "Order"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TravelerReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/purchase/orders/{orderId}/form-of-identification-details": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Retrieve FOID data from an order",
        "description": "Retrieve Form of Identification data from an order.\nThe data can contain a regulatory document, a frequent flyer card or a payment card.\n",
        "operationId": "retrieveFOIDFromOrder",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/firstName"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "description": "OK Errors or warnings that can be returned by the application:\n|  Code   |           Title                    | Description                                                                         |\n|:-------:|:----------------------------------:|-------------------------------------------------------------------------------------|\n|  38497  | UNABLE TO DISPLAY GROUP ORDER      | Invalid last name or several matches exist for a group PNR                          |",
            "schema": {
              "$ref": "#/definitions/FormOfIdentificationDetailListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Not found Errors or warnings that can be returned by the application:\n|  Code   |           Title                    | Description                                                                         |\n|:-------:|:----------------------------------:|-------------------------------------------------------------------------------------|\n|  36894  | ORDER NOT FOUND                    | Order ID or last name is invalid                                                    |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Add FOID information in the order.",
        "description": "Add some Form of identification details (regulatory document, frequent flyer or payment card) in the order for a list of travelers.\n",
        "operationId": "addFOIDToOrder",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/firstName"
          },
          {
            "name": "postFOIDBody",
            "description": "FOID(s) to create",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FormOfIdentificationDetail"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/FormOfIdentificationDetailListReply"
            }
          },
          "400": {
            "description": "Bad request Errors or warnings that can be returned by the application:\n|  Code   |           Title                    | Description                                                                         |\n|:-------:|:----------------------------------:|-------------------------------------------------------------------------------------|\n|  37659  | INVALID TID                        | Order ID or last name is invalid                                                    |\n|  36875  | INVALID FREQUENT FLYER ID          | Frequent flyer ID provided in input is invalid                                      |\n|  38277  | INVALID REGULATORY DOCUMENT ID     | regulatory document ID provided in input is invalid                                 |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Not found Errors or warnings that can be returned by the application:\n|  Code   |           Title                    | Description                                                                         |\n|:-------:|:----------------------------------:|-------------------------------------------------------------------------------------|\n|  36894  | ORDER NOT FOUND                    | Order ID or last name is invalid                                                    |\n|  36890  | TRAVELER NOT FOUND                 | Passenger association is invalid                                                    |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete the given FOID(s) from the order.",
        "description": "Delete the form of Identification from the order.",
        "operationId": "deleteFOIDFromOrder",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/firstName"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "name": "formOfIdentificationDetailIds",
            "description": "FOID to delete from the order",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "[a-zA-Z0-9-]{1,20}"
            },
            "collectionFormat": "csv"
          }
        ],
        "responses": {
          "200": {
            "description": "Bad request Errors or warnings that can be returned by the application:\n|  Code   |           Title                    | Description                                                                         |\n|:-------:|:----------------------------------:|-------------------------------------------------------------------------------------|\n|  38295  | UNABLE TO DELETE FOID REQUESTS     | Order ID or last name is invalid                                                    |\n|  38296  | INVALID FOID REQUEST ID            | FOID ID provided in input is invalid                                                |\n|  38497  | UNABLE TO DISPLAY GROUP ORDER      | Invalid last name or several matches exist for a group PNR                          |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "204": {
            "description": "No content"
          },
          "404": {
            "description": "Not found Errors or warnings that can be returned by the application:\n|  Code   |           Title                    | Description                                                                         |\n|:-------:|:----------------------------------:|-------------------------------------------------------------------------------------|\n|  36894  | ORDER NOT FOUND                    | Order ID or last name is invalid                                                    |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/purchase/orders/{orderId}/travelers/{travelerId}/regulatory-details": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Retrieve the regulatory information for a specific traveler from an Order (APIS data)",
        "description": "Retrieve Advance Passenger Information regulatory details for a specific traveler from an Order.\nThe data can contain the passport, the visa and/or the residence/destination address information.\n",
        "operationId": "retrieveAPISFromOrder",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/firstName"
          },
          {
            "$ref": "#/parameters/travelerId"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RegulatoryApisDetailListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Add some regulatory information in the Order (APIS data).",
        "description": "Add Advance Passenger Information regulatory details (passport, visa, residence or destination addresses) in the Order.\n",
        "operationId": "addAPISToOrder",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/firstName"
          },
          {
            "$ref": "#/parameters/travelerId"
          },
          {
            "name": "postAPISBody",
            "description": "APIS(s) to create",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RegulatoryApisDetail"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RegulatoryApisDetailListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete regulatory information from the order.",
        "description": "Delete Advance Passenger Information regulatory details from the order for the given traveler.",
        "operationId": "deleteAPISFromOrder",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/firstName"
          },
          {
            "$ref": "#/parameters/travelerId"
          },
          {
            "name": "regulatoryApisDetailIds",
            "description": "List of APIS request IDs to delete from the order",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "[a-zA-Z0-9-]{1,20}"
            },
            "collectionFormat": "csv"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/purchase/orders/{orderId}/contacts": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Retrieve contacts information",
        "description": "Retrieve a list of contacts for an order based on the order id.\nThere are three types of contact: phone, email and address.\nFor more information on a specific type of contact, please see the page [Contacts documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/contacts.html#/ContactType/get_).\nDictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).\n",
        "operationId": "retrieveContactsFromOrder",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/firstName"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ContactsListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Add Contacts in the order.",
        "description": "Add Contact(s) in the order: Emails, Phones and/or Addresses.\nFor more information on a specific type of contact, please see the page [Contacts documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/contacts.html#/ContactType/get_).\nDictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).\n",
        "operationId": "addContactsToOrder",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/firstName"
          },
          {
            "name": "postContactsBody",
            "description": "Contacts to create",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Contact"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ContactsListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Order"
        ],
        "operationId": "updateContactsInOrder",
        "summary": "Update Contacts information in an Order",
        "description": "Update contacts in the order. This operation allows a partial update of some elements of the list.\nLimitations for any type of contact:\n- The contact type, category and purpose cannot be changed e.g. modify an email into a phone, or a phone business to a phone home.\nLimitations for Phones:\n- Only the countryPhoneExtension, the areaCode and the number can be modified.\nLimitations for Addresses:\n- The PNR format of an address in the PNR (structured or freetext address) is kept by updating any field of the address.\n",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/firstName"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "name": "patchContactsBody",
            "description": "Update several contacts in an Order",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Contact"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ContactsListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Contacts from the order.",
        "description": "Delete Contacts from the order.",
        "operationId": "deleteContactsFromOrder",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/firstName"
          },
          {
            "name": "contactIds",
            "description": "List of Contacts to delete from the order",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "[a-zA-Z0-9-]{1,20}"
            },
            "collectionFormat": "csv"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/purchase/orders/{orderId}/contacts/{contactId}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Retrieve contact information",
        "description": "Retrieve contact information from an order based on its id.\nThere are three types of contact: phone, email and address.\nFor more information on a specific type of contact, please see the page [Contacts documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/contacts.html#/ContactType/get_).\nDictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).\n",
        "operationId": "retrieveContactFromOrder",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/firstName"
          },
          {
            "$ref": "#/parameters/contactId"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ContactReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "patch": {
        "summary": "Update a Contact in Order",
        "description": "Update a Contact in the order. This operation allows a partial update of a contact.\nLimitations for any tpe of contact:\n- The contact type, category and purpose cannot be changed e.g. modify an email into a phone, or a phone business to a phone home.\nLimitations for Phones:\n- Only the countryPhoneExtension, the areaCode and the number can be modified.\nLimitations for Addresses:\n- The format of an address (structured or not) can not be changed. By updating an address content, the format is kept. All information that needs to be kept needs to be provided in input.\n",
        "operationId": "updateContactInOrder",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/firstName"
          },
          {
            "$ref": "#/parameters/contactId"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "name": "patchContactBody",
            "in": "body",
            "description": "Content of the contact to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ContactReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a Contact from the order",
        "description": "Delete a Contact from the order.",
        "operationId": "deleteContactFromOrder",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/firstName"
          },
          {
            "$ref": "#/parameters/contactId"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/purchase/orders/{orderId}/frequent-flyer-cards": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Retrieve frequent flyer cards information",
        "description": "Retrieve a list of frequent flyer cards from an order based on the order id.\nDictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).\n",
        "operationId": "retrieveFrequentFlyerCardsFromOrder",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/firstName"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FrequentFlyerCardsListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Add Frequent flyer card in the order.",
        "description": "Add frequent flyer card(s) in the order for miles accrual or servicing.\nA list of requests can be specified to either add new card or add a new usage to an existing card.\nTo specify many usages for a same card, several requests needs to be created.\nFor each card, several service requests (SSR) can be created in the order.\n",
        "operationId": "addFrequentFlyerCardsToOrder",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/firstName"
          },
          {
            "name": "postFrequentFlyerCardsBody",
            "description": "Frequent flyer cards to create",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FrequentFlyerCardRequest"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FrequentFlyerCardRequestsListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Frequent flyer cards from the order.",
        "description": "Delete Frequent flyer cards from the order.\nAccording the operation type, one or several service requests containing the card number can be deleted.\n",
        "operationId": "deleteFrequentFlyerCardsFromOrder",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/firstName"
          },
          {
            "name": "frequentFlyerCardsIds",
            "description": "List of Frequent flyer cards to delete from the order.\nWhen a card is deleted from an order, all service requests related to this card (miles accrual / servicing) are removed.\n",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "[a-zA-Z0-9-]{1,20}",
              "x-risk-personal-data-field": "FREQUENT_FLYER_NUMBER"
            },
            "collectionFormat": "csv"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/purchase/orders/{orderId}/frequent-flyer-cards/{frequentFlyerCardId}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Retrieve frequent flyer card information",
        "description": "Retrieve frequent flyer card information from an order based on its id.\nDictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).\n",
        "operationId": "retrieveFrequentFlyerCardFromOrder",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/firstName"
          },
          {
            "$ref": "#/parameters/frequentFlyerCardId"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FrequentFlyerCardReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a frequent flyer card from the order",
        "description": "Delete a frequent flyer card from the order. When deleting a card, all the service requests (miles accrual / servicing) associated to the card are removed.",
        "operationId": "deleteFrequentFlyerCardFromOrder",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/firstName"
          },
          {
            "$ref": "#/parameters/frequentFlyerCardId"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/purchase/orders/{orderId}/remarks": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Retrieve remarks data",
        "description": "Retrieve a list of remarks for an order based on the order id.\nThere are three types of remarks: general, corporate and confidential.\n",
        "operationId": "retrieveRemarksFromOrder",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RemarksListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Add Remarks in the order.",
        "description": "Add Remark(s) in the order: General Remarks, Corporate Remarks and/or Confidential Remarks.\n",
        "operationId": "addRemarksToOrder",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "name": "postRemarksBody",
            "description": "Remarks to create",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Remark"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RemarksListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Order"
        ],
        "operationId": "updateRemarksInOrder",
        "summary": "Update remarks in an Order",
        "description": "Update remarks in the order. This operation allows a partial update of some elements of the list.\n",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "name": "patchRemarksBody",
            "description": "Update several remarks in an Order",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Remark"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RemarksListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Remarks from the order.",
        "description": "Delete Remarks from the order.",
        "operationId": "deleteRemarksFromOrder",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "name": "remarkIds",
            "description": "List of Remarks to delete from the order",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "[a-zA-Z0-9-]{1,20}",
              "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
            },
            "collectionFormat": "csv"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/purchase/orders/{orderId}/remarks/{remarkId}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Retrieve a specific remark",
        "description": "Retrieve a remark from an order based on its id.\nThere are three types of remarks: general, corporate and confidential.\n",
        "operationId": "retrieveRemarkFromOrder",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/remarkId"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RemarkReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "patch": {
        "summary": "Update a Remark",
        "description": "Update a Remark in the order.\n\nLimitations for all Remark type:\n- The remark type cannot be changed e.g. modify a GeneralRemark into a ConfidentialRemark.\n\nLimitations for GeneralRemark:\n- The category cannot be changed\n- A GeneralRemark with passenger association cannot be updated to a GeneralRemark without passenger asssociation. It is however possible to update the passenger association with new values.\n- A GeneralRemarl with segment association cannot be updated to a GeneralRemark without segment association. It is however possible to update the segment association with new values.\n\nLimitations for ConfidentialRemark:\n- The security options cannot be changed\n- A ConfidentialRemark with passenger association cannot be updated to a ConfidentialRemark without passenger asssociation. It is however possible to update the passenger association with new values.\n\nLimitations for CorporateRemark:\n- A CorporateRemark with passenger association cannot be updated to a CorporateRemark without passenger asssociation. It is however possible to update the passenger association with new values.\n- A CorporateRemark with segment association cannot be updated to a CorporateRemark without segment association. It is however possible to update the segment association with new values.\n",
        "operationId": "updateRemarkInOrder",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/remarkId"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "name": "patchRemarkBody",
            "in": "body",
            "description": "Content of the remark to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Remark"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RemarkReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a Remark from the order",
        "description": "Delete a Remark from the order.",
        "operationId": "deleteRemarkFromOrder",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/remarkId"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/purchase/orders/{orderId}/payment-records": {
      "post": {
        "summary": "Performs the payment of the order.",
        "description": "Performs the payment for the order.\nThis entry point performs several transactions:\n- authorize the payment method for PaymentCard (based on configuration)\n- create the payment records in the order\n- return redirection URL (in case of AlternativePaymentMethod with redirection)\n- create the travel documents (if configured to chain issuance after successful payment). The travel documents could also be created later by using POST orders/{orderId}/travelDocuments.\nPayment Methods are provided in the HTTP body of the request. PaymentCard, ExternalPayment, MilesPayment and AlternativePaymentMethod are supported\nThe API user can request:\n- the payment of an order: API will trigger the payment as well as issuance of all the order content. If there are any payment records (FP), travel documents or invalid order content, an error is raised.\n- the payment of specific seats and/or services in an order: the API user should in this case send the itemIds of seats/services that he wishes to pay.\nLast name of one of the travelers may be required for security reasons.\n",
        "operationId": "createPaymentRecords",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "name": "createPaymentRecordsBody",
            "description": "Request to perform payment for an order.",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/OrderPaymentRequest"
            }
          }
        ],
        "tags": [
          "Order"
        ],
        "responses": {
          "201": {
            "description": "Payment records created and confirmed.<br/>\n**Error codes**\n|Code | Title                                         | Description                                                                                                                                                                                                                                                                                  |\n|:---:|:---------------------------------------------:|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n|27802|VOUCHER NOT ACTIVE                             | The voucher status is not valid for usage.                                                                                                                                                                                                                                                   |\n|32399|PAYMENT FAILED                                 | Payment process failure. Some possible issues are:<br/>- Invalid Credit Card Details<br/>- Authorization error<br/>- Insufficient funds                                                                                                                                                      |\n|36865|INVALID TRAVELER ID                            | The travelerId given in input doesn't exist in the order.                                                                                                                                                                                                                                    |\n|36892|SERVICE NOT FOUND                              | The service or seat does not exist in the order.                                                                                                                                                                                                                                             |\n|37513|MISSING PAYMENT METHOD                         | No payment methods have been provided in input.                                                                                                                                                                                                                                              |\n|37514|ORDER CONTAINS PAYMENT RECORDS                 | The order already contains a payment record.                                                                                                                                                                                                                                                 |\n|37515|ORDER CONTAINS TRAVEL DOCUMENTS                | The order doesn't contain a payment-record but already contains a travel document.                                                                                                                                                                                                           |\n|37516|INVALID CHECKSUM                               | The checksum sent in input for the ExternalPayment does not match the one computed internally.                                                                                                                                                                                               |\n|37576|INVALID PAYMENT METHOD                         | At least one of the provided payment methods is not valid. Some use cases:<br/>- Missing some parameters (e.g. callback URLs)<br/>- Incompatible payment method with the current flow (e.g. asynchronous payment for an ATC Exchange)<br/>- Provided payment method not activated            |\n|37594|NO FLIGHTS IN THE ORDER                        | The order to pay doesn't contain any flight segments (e.g. after order cancellation).                                                                                                                                                                                                        |\n|37595|UNABLE TO PAY ORDER: FLIGHT OR NAME CHANGE     | The order contains a TST that cannot be issued: the traveler(s)/flight(s) have been modified after the pricing.                                                                                                                                                                              |\n|37933|MISSING PRICE FOR SERVICES                     | A chargeable service/seat does not have any associated TSMs.                                                                                                                                                                                                                                 |\n|37934|SERVICE ALREADY ISSUED                         | A chargeable service/seat requested to pay is already issued.                                                                                                                                                                                                                                |\n|37935|UNABLE TO PAY ORDER: SERVICE OR PRICE CHANGE   | The seats and/or services in the order have not been modified after the TSM creation.                                                                                                                                                                                                        |\n|37936|INVALID SERVICE STATUS                         | Payment is not allowed if the order contains unconfirmed chargeable services.                                                                                                                                                                                                                |\n|37937|INVALID FLIGHT STATUS                          | The order to pay contains unconfirmed flights.                                                                                                                                                                                                                                               |\n|37938|ORDER EXPIRED                                  | The TST has expired.                                                                                                                                                                                                                                                                         |\n|37939|MISSING PRICE FOR FLIGHTS                      | The flights in the order do not have pricing information (TST).                                                                                                                                                                                                                              |\n|37940|SERVICE ALREADY PAID                           | The requested seat(s)/service(s) to pay have already been paid.                                                                                                                                                                                                                              |\n|37941|MISSING TRAVEL DOCUMENT FOR FLIGHTS            | A service/seat cannot be issued if flight tickets are also not issued (not applicable to \"Time To Think\" service issuance).                                                                                                                                                                  |\n|38300|SERVICE NOT CHARGEABLE                         | A service/seat requested for payment that is not chargeable (i.e. free service).                                                                                                                                                                                                             |\n|38353|PAYMENT METHODS NOT COMBINABLE                 | Provided payment methods cannot be combined together (e.g. AlternativePaymentMethod and ExternalPayment).                                                                                                                                                                                    |\n|39096|UNABLE TO CREATE PAYMENT METHOD SPLIT          | Unable to identify a valid split payment method for the given request. Please provide a valid methods to split.                                                                                                                                                                              |\n|39125|UNABLE TO SPLIT PAYMENT FOR TRAVELERS          | An invalid combination of travelers is provided request.                                                                                                                                                                                                                                     |\n|39341|BILLING ADDRESS SHOULD BE PROVIDED             | Billing address is required for the requested payment. Possible sub-use cases are:<br/>- The PaymentCard address provided is not of type \"billing\"<br/>- the fraud screening verification for PaymentCard address is required but no address was not provided                                |\n|39656|INVALID SEAT STATUS                            | Payment is not allowed if the order contains unconfirmed chargeable seats.                                                                                                                                                                                                                   |\n|40072|UNABLE TO PROCESS PARTIAL ITINERARY            | \"Time To Think\" fee must be paid for all travelers and all flights at once.                                                                                                                                                                                                                  |\n|40367|PAYMENT METHOD NOT ALLOWED                     | The provided payment method is not allowed (filtered by Amadeus business rules or unrecognized PaymentCard id).                                                                                                                                                                              |\n|40508|UNABLE TO CREATE MILES AND CASH PAYMENT METHOD | Provided paymentMethod(s) for Miles&Cash payment are not valid to pay a service or seat. For instance, when paying services/seats with miles:<br/>- Only one revenue method of payment is allowed<br/>- Either all travelers or none can be paid in miles                                    |\n|67394|MANUAL APPROVAL CODE NOT ENABLED               | A PaymentCard with manual approval code is provided in input and the airline configuration doesn't allow it.                                                                                                                                                                                 |\n|67395|MISSING MANUAL APPROVAL CODE                   | A PaymentCard was provided without a manual approval code whereas the airline configuration states it as mandatory.                                                                                                                                                                          |\n|67398|INVALID PARAMETER VALUE                        | The value of a provided paymentMethod's parameter is invalid (e.g. not matching the expected format).                                                                                                                                                                                        |\n|67399|MISSING PARAMETER                              | A mandatory parameter was not provided with the associated paymentMethod sent in input.                                                                                                                                                                                                      |\n|67400|INVALID PARAMETER                              | A provided parameter is not expected (e.g. duplicated/empty parameters, unknown parameter).                                                                                                                                                                                                  |\n|67411|INSTALLMENTS NOT ALLOWED                       | PaymentCard Instalment not supported for this transaction. Some possible reasons:<br/>- Payment with instalments is not allowed with multiple payment request<br/>- Instalments are only supported for total amount of the order                                                             |\n|67412|INVALID INPUT FOR INSTALLMENTS                 | The requested number of instalments is not available.|\n**Warning codes**\n|Code | Title                                         | Description                                                                                                               |\n|:---:|:---------------------------------------------:|---------------------------------------------------------------------------------------------------------------------------|\n|37184|UNABLE TO CREATE TRAVEL DOCUMENT               | After payment, the order cannot be issued.                                                                                |\n|40255|CREATION OF SERVICES EXPIRY EXEMPTION FAILED   | The creation of the technical exemption services (SK EXAS) linked to \"Time To Think\" failed.                              |\n|38126|UNABLE TO QUEUE                                | Order cannot be queued as expected.                                                                                       |\n|39869|SPANISH RESIDENT CARD COULD NOT BE VALIDATED   | Your Spanish resident card has not been validated. Your Resident card will be requested at the airport prior to boarding. |",
            "schema": {
              "$ref": "#/definitions/PaymentRecordsReply"
            }
          },
          "202": {
            "description": "Payment created but awaiting confirmation.<br/>\n**Warning codes**\n|Code | Title                                                       | Description                                                                                                               |\n|:---:|:-----------------------------------------------------------:|---------------------------------------------------------------------------------------------------------------------------|\n|41082|UNCONFIRMED CHARGEABLE SERVICES/SEATS ARE DELETED FROM ORDER | The unconfirmed seats/services are deleted, and the payment-records have been added to rest of the elements in the order. |\n|65020|YOUR PAYMENT NEEDS REDIRECTION                               | The order is put on-hold and the payment-record requires a web redirection.                                               |\n|65214|ASYNCHRONOUS PAYMENT                                         | The order is put on-hold and requires an asynchronous payment.                                                            |\n|65222|YOUR PAYMENT REQUIRES 3D SECURE                              | The order is put on-hold and the payment-record requires a 3DS authentication.                                            |",
            "schema": {
              "$ref": "#/definitions/PaymentRecordsReply"
            }
          },
          "400": {
            "description": "Bad request<br/>\n**Error codes**\n|Code | Title                                          | Description                                                                                          |\n|:---:|:----------------------------------------------:|------------------------------------------------------------------------------------------------------|\n|04926|INVALID DATA RECEIVED                            | The data in the request is not valid (e.g. format).                                                  |\n|6207|SUM OF FOP AMOUNTS MUST BE EQUAL TO TOTAL AMOUNT | The provided payment split doesn't cover the full amount of the elements to pay.                     |\n|6323|INVALID CURRENCY CODE                            | The currency of the provided VoucherPayment is different from the elements to pay.                   |\n|36962|LAST NAME SHOULD BE PROVIDED                    | The lastName query parameter needs to be provided.                                                   |\n|37129|VOUCHER IS NOT AVAILABLE FOR USAGE              | The provided VoucherPayment doesn't have a valid status for payment.                                 |\n|39698|REMARK NOT ALLOWED                              | Remarks cannot be included in the request as per airline configuration.                              |\n|39700|SPECIAL KEYWORD NOT ALLOWED                     | Special keywords cannot be included in the request as per airline configuration.                     |\n|39701|SPECIAL SERVICE REQUEST NOT ALLOWED             | Special Service Requests cannot be included in the request as per airline configuration.             |\n|39702|OTHER SERVICE INFORMATION NOT ALLOWED           | Other Special Information cannot be included in the request as per airline configuration.            |\n|40130|FUNCTIONALITY NOT ENABLED                       | The requested functionality is not allowed as per airline configuration: sending IP address in input |\n|40496|ORDER CONTAINS NON-TICKETABLE FARE              | The order contains a non-ticketable TST.                                                             |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Not found<br/>\n**Error codes**\n|Code | Title                                         | Description                                                         |\n|:---:|:---------------------------------------------:|---------------------------------------------------------------------|\n|36894|ORDER NOT FOUND                                | The order to pay cannot be found.                                   |\n|38828|VOUCHER NOT FOUND                              | The provided VoucherPayment id was not foundto perform the payment. |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "summary": "Delete payment records from Order.",
        "description": "Performs the cancellation of all payment records in the Order.\nPayment records will be cancelled only in the following cases:\n- AlternativePaymentMethod with status \"denied\" or \"error\".\n- PaymentCard enrolled for 3D Secure with no approval code.\nAll payment records in the Order must comply with one of the cases above, otherwise, they will not be deleted and an error will be displayed.\nLast name of one of the travelers may be required for security reasons.\n",
        "operationId": "deletePaymentRecords",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "$ref": "#/parameters/optionalPaymentRecordIds"
          }
        ],
        "tags": [
          "Order"
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "400": {
            "description": "Bad request<br/>\n**Error codes**\n|Code | Title                                         | Description  |\n|:---:|:---------------------------------------------:|----------------------------------------------------|\n|36962|LAST NAME SHOULD BE PROVIDED                   | The lastName query parameter needs to be provided. |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Not found<br/>\n**Error codes**\n|Code | Title                                         | Description                       |\n|:---:|:---------------------------------------------:|-----------------------------------|\n|36894|ORDER NOT FOUND                                | The order to pay cannot be found. |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/purchase/orders/{orderId}/payment-records/confirmation": {
      "post": {
        "summary": "Performs the payment confirmation of the order after redirection.",
        "description": "Controller used to perform the confirmation (after redirection) of the payment records associated to the specified order.\nThis entry point performs several transactions:\n- Confirms and validates payment status based on the payment confirmation data sent in input.\n- Updates the payment records in the order\n- Create the travel documents (if configured to chain issuance after successful payment).\nThe travel documents could also be created later by using POST purchase/orders/{orderId}/travel-documents.\nPayment Method is provided in the body of the request along with the payment confirmation data from the PSP. Both AlternativePaymentMethod and PaymentCard enrolled for 3D Secure are supported.\nAPI will trigger the payment confirmation and travel documents issuance. An error will be raised in the following cases: - The Order already contains confirmed payment records - The Order already contains travel documents\nLast name of one of the travelers may be required for security reasons.\n",
        "operationId": "confirmPaymentRecords",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "name": "confirmPaymentRecordsBody",
            "description": "Request to perform payment for an order.",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/OrderPaymentConfirmRequest"
            }
          }
        ],
        "tags": [
          "Order"
        ],
        "responses": {
          "200": {
            "description": "A specific order with payment.<br/>\n**Error codes**\n|Code | Title                                            | Description                                                                                                                                                                                    |\n|:---:|:------------------------------------------------:|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n|32399|PAYMENT FAILED                                    | The payment confirmation cannot be done. Some use cases:<br/>- Authentication rejected<br/>- AlternativePaymentMethod confirmation failed<br/>- Issue between Amadeus and the Payment provider |\n|37576|INVALID PAYMENT METHOD                            | The provided payment method to confirm is not valid. Some use cases:<br/>- Missing payload for AlternativePaymentMethod<br/>- Incorrect paymentType                                            |\n|65226|UNABLE TO CONFIRM PAYMENT RECORDS                 | The confirmation of the payment-records in the order failed. Some use cases:<br/>- Wrong authorization input for PaymentCard<br/>- The order already contains an approved payment-record       |\n|612474|PAYMENT METHODS COMBINATION DOES NOT SUPPORT 3DS | 3DS confirmation is requested with a payment method not combinable with it.                                                                                                                    |\n|36892|SERVICE NOT FOUND                                 | The provided serviceItemId/seatItemId/insuranceId/hotelId does'nt exist in the order.                                                                                                          |\n|65225|INVALID 3D SECURE DATA                            | When confirming with a PaymentCard, authorization input is missing.                                                                                                                            |",
            "schema": {
              "$ref": "#/definitions/PaymentRecordsReply"
            }
          },
          "201": {
            "description": "A specific order with payment.<br/>\n**Warning codes**\n|Code | Title                                              | Description                                                                                                               |\n|:---:|:--------------------------------------------------:|---------------------------------------------------------------------------------------------------------------------------|\n|37184|UNABLE TO CREATE TRAVEL DOCUMENT                    | After payment confirmation, the order cannot be issued.                                                                   |\n|38126|UNABLE TO QUEUE                                     | Order cannot be queued as expected.                                                                                       |\n|39869|SPANISH RESIDENT CARD COULD NOT BE VALIDATED        | Your Spanish resident card has not been validated. Your Resident card will be requested at the airport prior to boarding. |",
            "schema": {
              "$ref": "#/definitions/PaymentRecordsReply"
            }
          },
          "400": {
            "description": "Bad request<br/>\n**Error codes**\n|Code | Title                                         | Description                                        |\n|:---:|:---------------------------------------------:|----------------------------------------------------|\n|36962|LAST NAME SHOULD BE PROVIDED                   | The lastName query parameter needs to be provided. |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Not found<br/>\n**Error codes**\n|Code | Title                                         | Description                       |\n|:---:|:---------------------------------------------:|-----------------------------------|\n|36894|ORDER NOT FOUND                                | The order to pay cannot be found. |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/purchase/orders/{orderId}/air-bound-exchanges-confirmation": {
      "post": {
        "summary": "Performs the exchange of flights in the order.",
        "description": "Performs the exchange of one or several flights in the order.\nThis entry point performs several transactions:\n- books the new requested flights\n- reprices the new itinerary (including both new flights and flights kept unchanged in the order)\n\nIn case remaining amount needs to be paid and payment information is provided in the request:\n- performs the payment of the updated order\n- creates the travel documents (if configured to chain issuance after successful payment)\n\nPayment Methods are provided in the HTTP body of the request. For the time being only PaymentCard and Custom method of payment are supported\n",
        "operationId": "airBoundExchangesConfirmation",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/firstName"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "name": "airBoundExchangesConfirmationBody",
            "description": "Request to perform exchange of flights in an order.",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/OrderAirExchangeRequest"
            }
          }
        ],
        "tags": [
          "Order"
        ],
        "responses": {
          "200": {
            "description": "Response containing the updated order after flight exchange",
            "schema": {
              "$ref": "#/definitions/OrderAirBoundExchangesResponse"
            }
          },
          "201": {
            "description": "Response containing the order change sub-resource created for order being changed",
            "schema": {
              "$ref": "#/definitions/OrderAirBoundExchangesResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/purchase/orders/{orderId}/regulatory-details": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Retrieve the regulatory information for all travelers from an Order (APIS data)",
        "description": "Retrieve Advance Passenger Information regulatory details for all travelers from an Order. The data can contain the passport, the visa and/or the residence/destination address information.\n",
        "operationId": "retrieveAPISFromOrderAllTravelers",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/firstName"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PassengerRegulatoryApisDetailListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Add some regulatory information in the Order (APIS data).",
        "description": "Add Advance Passenger Information regulatory details (passport, visa, residence or destination addresses) in the Order for all travelers.\n",
        "operationId": "addAPISToOrderAllTravelers",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/firstName"
          },
          {
            "name": "postAPISBody",
            "description": "APIS(s) to create",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PassengerRegulatoryApisDetail"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PassengerRegulatoryApisDetailListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete regulatory information from the order.",
        "description": "Delete Advance Passenger Information regulatory details from the order for all travelers.",
        "operationId": "deleteAPISFromOrderAllTravelers",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/firstName"
          },
          {
            "name": "regulatoryApisDetailIds",
            "description": "List of APIS request IDs to delete from the orderChange",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "[a-zA-Z0-9-]{1,20}"
            },
            "collectionFormat": "csv"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/purchase/orders/{orderId}/order-changes/{orderChangeId}/regulatory-details": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Retrieve the regulatory information for all travelers from an OrderChange (APIS data)",
        "description": "Retrieve Advance Passenger Information regulatory details for all travelers from an OrderChange. The data can contain the passport, the visa and/or the residence/destination address information.\n",
        "operationId": "retrieveAPISFromOrderChangeAllTravelers",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/orderChangeId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/firstName"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PassengerRegulatoryApisDetailListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Add some regulatory information in the OrderChange (APIS data).",
        "description": "Add Advance Passenger Information regulatory details (passport, visa, residence or destination addresses) in the OrderChange.\n",
        "operationId": "addAPISToOrderChangeAllTravelers",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/orderChangeId"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/firstName"
          },
          {
            "name": "postAPISBody",
            "description": "APIS(s) to create",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PassengerRegulatoryApisDetail"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PassengerRegulatoryApisDetailListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete regulatory information from the orderChange.",
        "description": "Delete Advance Passenger Information regulatory details from the orderChange for all travelers.",
        "operationId": "deleteAPISFromOrderChangeAllTravelers",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/orderChangeId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/firstName"
          },
          {
            "name": "regulatoryApisDetailIds",
            "description": "List of APIS request IDs to delete from the orderChange",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "[a-zA-Z0-9-]{1,20}"
            },
            "collectionFormat": "csv"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/purchase/orders/{orderId}/order-changes/{orderChangeId}/travelers/{travelerId}/regulatory-details": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Retrieve the regulatory information for a specific traveler from an OrderChange (APIS data)",
        "description": "Retrieve Advance Passenger Information regulatory details for a specific traveler from an OrderChange.\nThe data can contain the passport, the visa and/or the residence/destination address information.\n",
        "operationId": "retrieveAPISFromTravellerInOrderChange",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/orderChangeId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/firstName"
          },
          {
            "$ref": "#/parameters/travelerId"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RegulatoryApisDetailListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Add some regulatory information in the OrderChange (APIS data).",
        "description": "Add Advance Passenger Information regulatory details (passport, visa, residence or destination addresses) in the OrderChange.\n",
        "operationId": "addAPISToTravellerInOrderChange",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/orderChangeId"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/firstName"
          },
          {
            "$ref": "#/parameters/travelerId"
          },
          {
            "name": "postAPISBody",
            "description": "APIS(s) to create",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RegulatoryApisDetail"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RegulatoryApisDetailListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete regulatory information from the OrderChange.",
        "description": "Delete Advance Passenger Information regulatory details from the order change for the given traveler.",
        "operationId": "deleteAPISFromTravelerInOrderChange",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/orderChangeId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/firstName"
          },
          {
            "$ref": "#/parameters/travelerId"
          },
          {
            "name": "regulatoryApisDetailIds",
            "description": "List of APIS request IDs to delete from the order change",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "[a-zA-Z0-9-]{1,20}"
            },
            "collectionFormat": "csv"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/purchase/orders/{orderId}/order-changes/{orderChangeId}/payment-records": {
      "post": {
        "summary": "Performs the payment of the changes being done in the order.",
        "description": "Performs the payment for the changes being done in the order.\nThis entry point performs several transactions:\n- authorize the payment method for PaymentCard (based on configuration)\n- create the new payment records in the order\n- return redirection URL\n- create the travel documents\n\nPayment Methods are provided in the HTTP body of the request. PaymentCard and ExternalPayment are supported\n\nThe API user can request:\n- the payment of changes done in the order: API will trigger the payment as well as issuance of all the order change content.\n",
        "operationId": "createOrderChangesPaymentRecords",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "$ref": "#/parameters/orderChangeId"
          },
          {
            "name": "createPaymentRecordsBody",
            "description": "Request to perform payment for changes in an order.",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/OrderChangePaymentRequest"
            }
          }
        ],
        "tags": [
          "Order"
        ],
        "responses": {
          "201": {
            "description": "Payment records created and confirmed.\nWarnings that can be returned by the application\n|  Code   |              Title                 | Description                                                                          |\n|:-------:|:----------------------------------:|--------------------------------------------------------------------------------------|\n|  40262  | ORDER CHANGES COMPLETED \t\t       | Warning raised at payment confirmation for payment done on orderChange sub-resources |\n|  37184  | UNABLE TO CREATE A TRAVEL DOCUMENT | Warning raised during exchange if the issuance was unable to be completed            |\n|  39793  | UNABLE TO REFUND BALANCE \t\t       | Warning raised during exchange is the refund was unable to be completed              |\n\nErrors that can be returned by the application:\n|  Code   |              Title                 | Description                                                                                               |\n|:-------:|:----------------------------------:|-----------------------------------------------------------------------------------------------------------|\n|  38353  | PAYMENT METHODS NOT COMBINABLE     | Error raised when 2 or more payment requests are provided in input                                        |\n|  37576  | INVALID PAYMENT METHOD  \t\t       | Error raised when the payment method provided in input is not valid (e.g. the CC might be expired, etc..) |\n|  67399  | MISSING PARAMETER  \t\t\t  \t       | Error raised when a mandatory parameter is missing from the input                                         |\n|  67398  | INVALID PARAMETER VALUE\t\t\t       | Error raised when the value provided for a parameter does not match the expected format                   |\n|  39341  | BILLING ADDRESS SHOULD BE PROVIDED | Error raised when billing address is missing for payment with credit card                                 |\n|  39836  | ORDER CHANGE NOT FOUND \t\t\t       | Error raised when the OrderChange can't be retrieved                                                      |\n|  32399  | PAYMENT FAILED  \t\t\t\t           | Error raised when payment failed (e.g. invalid Credit card details, authorization error...)               |\n|  40367  | PAYMENT METHOD NOT ALLOWED  \t     | Error raised when provided method of payment is not allowed                                               |\n",
            "schema": {
              "$ref": "#/definitions/PaymentRecordsReply"
            }
          },
          "202": {
            "description": "Payment created but awaiting confirmation.\nWarnings that can be returned by the application\n|  Code   |              Title                | Description                                             |\n|:-------:|:---------------------------------:|---------------------------------------------------------|\n|  65222  | PAYMENT REQUIRES 3D SECURE        | Warning raised when payment requires 3DS authentication |\n",
            "schema": {
              "$ref": "#/definitions/PaymentRecordsReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/purchase/orders/{orderId}/order-changes/{orderChangeId}/payment-records/confirmation": {
      "post": {
        "summary": "Performs the payment confirmation of the order changes after redirection.",
        "description": "Controller used to perform the confirmation (after redirection) of the payment records associated to the specified order changes.\nThis entry point performs several transactions:\n- Confirms and validates payment status based on the payment confirmation data sent in input.\n- Updates the payment records in the order\n- Create the travel documents (if configured to chain issuance after successful payment).\n\nPayment Method is provided in the body of the request along with the payment confirmation data from the PSP. Only PaymentCard enrolled for 3D Secure is supported.\nAPI will trigger the payment confirmation and travel documents issuance.\n",
        "operationId": "confirmOrderChangesPaymentRecords",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "$ref": "#/parameters/orderChangeId"
          },
          {
            "name": "confirmPaymentRecordsBody",
            "description": "Request to perform payment for changes in an order.",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/OrderChangePaymentConfirmRequest"
            }
          }
        ],
        "tags": [
          "Order"
        ],
        "responses": {
          "201": {
            "description": "Payment records confirmed.\nErrors that can be returned by the application:\n|  Code   |              Title                | Description                                                                                                          |\n|:-------:|:---------------------------------:|----------------------------------------------------------------------------------------------------------------------|\n|  37576  | INVALID PAYMENT METHOD            | Error raised when the payment method provided in input is not valid                                                  |\n|  39836  | ORDER CHANGE NOT FOUND            | Error raised when the OrderChange can't be retrieved                                                                 |\n\nWarnings that can be returned by the application\n|  Code   |              Title                | Description                                                                          |\n|:-------:|:---------------------------------:|--------------------------------------------------------------------------------------|\n|  37184  | UNABLE TO CREATE A TRAVEL DOCUMENT| Warning raised during exchange if the issuance was unable to be completed            |\n|  39793  | UNABLE TO REFUND BALANCE          | Warning raised during exchange is the refund was unable to be completed              |\n|  40262  | ORDER CHANGES COMPLETED           | Warning raised at payment confirmation for payment done on orderChange sub-resources |\n",
            "schema": {
              "$ref": "#/definitions/PaymentRecordsReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/purchase/orders/{orderId}/order-changes/{orderChangeId}": {
      "get": {
        "summary": "Retrieves a specific order-change for a given order",
        "description": "Retrieves an order change sub-resource based on its id.\nOrder change sub-resource contains the transitional representation of the order under change, i.e. including changes that have been done in the parent order but not yet committed.\n",
        "operationId": "retrieveOrderChange",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/orderChangeId"
          }
        ],
        "tags": [
          "Order"
        ],
        "responses": {
          "200": {
            "description": "A specific order-change.\n",
            "schema": {
              "$ref": "#/definitions/OrderChangeReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Not found\nErrors that can be returned by the application:\n|  Code   |              Title                | Description                                                      |\n|:-------:|:---------------------------------:|------------------------------------------------------------------|\n|  39836  | ORDER CHANGE NOT FOUND            | Error raised when the OrderChange can't be retrieved             |\n         \n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a specific order-change for a given order",
        "description": "Delete an order change sub-resource based on its id. Order change sub-resource contains the transitional representation of the order under change, i.e. including changes that have been done in the parent order but not yet committed.\n",
        "operationId": "deleteOrderChange",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/orderChangeId"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "tags": [
          "Order"
        ],
        "responses": {
          "204": {
            "description": "No content \n"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Not found\nErrors that can be returned by the application:\n|  Code   |              Title                | Description                                                      |\n|:-------:|:---------------------------------:|------------------------------------------------------------------|\n|  39836  | ORDER CHANGE NOT FOUND            | Error raised when the Order change can't be retrieved            |\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/purchase/orders/{orderId}/order-changes": {
      "post": {
        "summary": "Create an order-change from a list of air bound exchange bound IDs",
        "description": "Create an order change sub-resource based on a list of air bound exchange IDs. Order change sub-resource contains the transitional representation of the order under change, i.e. including changes that have been done in the parent order but not yet committed.\n",
        "operationId": "createOrderChange",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/firstName"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "name": "createOrderChangeBody",
            "description": "Request to create an order change.",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/OrderChangeCreateRequest"
            }
          }
        ],
        "tags": [
          "Order"
        ],
        "responses": {
          "201": {
            "description": "Created A specific order-change. Warnings that can be returned by this endpoint\n|  Code  |                Title                            | Description                                                                    |\n|:------:|:-----------------------------------------------:|--------------------------------------------------------------------------------|\n|  39568 | NOT ALL SERVICES ARE REBOOKED                   | Warning raised when not all SSRs are rebooked                                  | \n|  39573 | NOT ALL SEATS ARE REBOOKED                      | Warning raised when not all seats are rebooked                                 | \n|  41208 | PAYMENT REQUIRED                                | Warning raised when there is an additional collection to pay                   | \n|  39650 | MISSING PRICES FOR CHARGEABLE SEAT(S)           | Warning raised when prices are missing for chargeable seat(s)                  |\n|  39649 | MISSING PRICES FOR CHARGEABLE SERVICE(S)        | Warning raised when prices are missing for chargeable service(s)               |            \nErrors that can be returned by the endpoint:\n|  Code   |              Title                          | Description                                                                  |\n|:-------:|:-------------------------------------------:|------------------------------------------------------------------------------|\n|  36962  | LAST NAME SHOULD BE PROVIDED                | Error raised when last name check is activated and no last name is provided  |\n|  39445  | INVALID BOUND ID                            | Error raised when the bound IDs provided are invalid                         |\n|  39593  | INVALID TICKET/DOCUMENT NUMBER              | Error raised in case of ticket mismatch in the order                         |\n|  39594  | UNABLE TO EXCHANGE ORDER - PRICE DISCREPANCY| Error raised if exchange prices and requested prices mismatch                |\n|  39597  | CURRENCY MISMATCH                           | Error raised if currency is mismatched between bound ids                     |\n|  39698  | REMARKS NOT ALLOWED                         | Error raised when the addition of remarks is not allowed from configuration  |\n|  39700  | SKS NOT ALLOWED                             | Error raised when the addition of SKs is not allowed from configuration      |\n|  39701  | SSR NOT ALLOWED                             | Error raised when the addition of SSRs is not allowed from configuration     |\n|  39702  | OSIS NOT ALLOWED                            | Error raised when the addition of OSIs is not allowed from configuration     |\n|  40966  | ORDER NOT ELIGIBLE FOR REBOOKING            | Error raised when order is not eligible for exchange                         |\n|  612489 | UNABLE TO EXCHANGE ORDER                    | Error raised when order can't be rebooked or repriced                        |\n",
            "schema": {
              "$ref": "#/definitions/OrderChangeReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Not found\nErrors that can be returned by the application:\n|  Code   |              Title                | Description                                                      |\n|:-------:|:---------------------------------:|------------------------------------------------------------------|\n|  36894  | ORDER NOT FOUND                   | Error raised when the Order can't be retrieved                   |\n         \n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/purchase/orders/{orderId}/order-changes/{orderChangeId}/confirmation": {
      "post": {
        "summary": "Performs the exchange of flights for an order change.",
        "description": "Performs the exchange of one or several flights in the order change in case of there is nothing to pay or a refund. If a payment is required, the payment must be created using the entry point '/purchase/orders/{orderId}/order-changes/{orderChangeId}/payment-records'.\nThis entry point performs several transactions:\n- books the new requested flights\n- reprices the new itinerary (including both new flights and flights kept unchanged in the order)\n- creates the travel documents\n    \n",
        "operationId": "confirmOrderChanges",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/orderChangeId"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "name": "orderChangesConfirmationBody",
            "description": "Request to perform an order change confirmation.",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/OrderChangeConfirmationRequest"
            }
          }
        ],
        "tags": [
          "Order"
        ],
        "responses": {
          "200": {
            "description": "Response containing the updated order after flight exchange Warnings that can be returned by this endpoint\n|  Code  |                Title                            | Description                                                                    |\n|:------:|:-----------------------------------------------:|--------------------------------------------------------------------------------|\n|  39793 | UNABLE TO REFUND BALANCE                        | Warning raised in case the refund of the residual value can't be performed     |\n\n Errors that can be returned by the application:\n\n|  Code   |              Title                          | Description                                                                  |\n|:-------:|:-------------------------------------------:|------------------------------------------------------------------------------|\n|  37184  | UNABLE TO CREATE A TRAVEL DOCUMENT          | Error raised when the re-issuance of documents failed                        |\n|  39698  | REMARKS NOT ALLOWED                         | Error raised when the addition of remarks is not allowed from configuration  |\n|  39823  | UNABLE TO CONFIRM ORDER CHANGES             | Error raised when the confirmation failed or a payment is required           |\n|  39700  | SKS NOT ALLOWED                             | Error raised when the addition of SKs is not allowed from configuration      |\n|  39701  | SSR NOT ALLOWED                             | Error raised when the addition of SSRs is not allowed from configuration     |\n|  39702  | OSIS NOT ALLOWED                            | Error raised when the addition of OSIs is not allowed from configuration     |\n|  39823  | OSIS NOT ALLOWED                            | Error raised when the addition of OSIs is not allowed from configuration     |\n|  612489 | UNABLE TO EXCHANGE ORDER                    | Error raised when order can't be confirmed                                   |\n",
            "schema": {
              "$ref": "#/definitions/OrderReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Not found\nErrors that can be returned by the application:\n|  Code   |              Title                | Description                                                      |\n|:-------:|:---------------------------------:|------------------------------------------------------------------|\n|  39836  | ORDER CHANGE NOT FOUND            | Error raised when the Order change can't be retrieved            |\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/purchase/orders/{orderId}/insurances": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Add Insurances to the order.",
        "description": "Add Insurance(s) (chosen from insurance availability) in the order.\nDictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).\n",
        "operationId": "addInsurancesToOrder",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "name": "postInsurancesBody",
            "description": "Insurance offers to book",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/PostOrderInsuranceRequest"
            }
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "201": {
            "description": "Returned in case of successful Insurance Booking.\nPossible warnings that can be returned by the API:\n|  Code  |           Title                                      | Description                                                                                               |\n|:------:|:----------------------------------------------------:|-----------------------------------------------------------------------------------------------------------|\n|  37184 | UNABLE TO CREATE A TRAVEL DOCUMENT                   | Warning returned if there was an issue while creating the EMD for the Merchant Hotel.                     |\n|  38126 | UNABLE TO QUEUE                                      | Warning returned if the PNR queuing fails, after successful Hotel Booking.\n|  39436 | INSURANCE ISSUANCE IS NOT COMPLETED AS FOP IS MISSING| The insurance policy cannot not be issued if the payment is not provided in input                         |\n",
            "schema": {
              "$ref": "#/definitions/InsuranceItemsListReply"
            }
          },
          "400": {
            "description": "Errors returned by the application:\n|  Code   |           Title                     | Description                                                                              |\n|:-------:|:-----------------------------------:|------------------------------------------------------------------------------------------|\n|  39222  | UNABLE TO BOOK INSURANCE            | Generic error returned when Insurance cannot be booked.                                  |\n|  37576  | INVALID PAYMENT METHOD              | In case Payment is neither Credit Card nor Custom Payment                                |  |         |                                     | In case PAY_USE_FOP_LIST is set to False and request contains Custom Payment             | |         |                                     | In case Custom payment is sent to book Non merchant content                              |    \n|  67399  | MISSING PARAMETER                   | The User is trying to pay with a Custom Payment without one of its mandatory parameters. |\n|  67398  | INVALID PARAMETER VALUE             | The User is trying to pay with a Custom Payment with an incorrect parameter value.       |\n|  38353  | INVALID PAYMENT METHOD COMBINATION  | The User is trying to pay TPC merchant content with more than 1 Form of Payment.         |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Errors returned by the application:\n|  Code   |           Title                                 | Description                                                                                   |\n|:-------:|:-----------------------------------------------:|-----------------------------------------------------------------------------------------------|\n|  36894  | ORDER NOT FOUND                                 | Error returned when the order could not be found. The order id or last name might be invalid. |\n|  36962  | LAST NAME SHOULD BE PROVIDED                    | Error returned when passenger name missing.                                                   |\n|  39223  | INSURANCE PRICE DISCREPANCY                     | Error returned when price discrepancy detected.                                               |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "summary": "Remove insurances from a an order",
        "description": "Delete insurances from an order.",
        "operationId": "deleteInsurancesFromOrder",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "name": "insuranceIds",
            "description": "List of insurances to delete from an order.",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^(OT|TSM)[0-9]{1,3}$"
            },
            "collectionFormat": "csv"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "204": {
            "description": "No content\nWarnings that can be returned by the application : they are returned with 200 HTTP status code:\n|  Code   |           Title                     | Description                                                               |\n|:-------:|:-----------------------------------:|---------------------------------------------------------------------------|\n|  39830  | INSURANCE DELETED BUT REFUND FAILED | Warning returned when Insurance was well deleted but related refund failed. |\n|  36962  | UNABLE TO QUEUE                     | Warning returned when PNR queuing fails                                     |"
          },
          "400": {
            "description": "Errors returned by the application:\n|  Code   |           Title                                 | Description                                                                                   |\n|:-------:|:-----------------------------------------------:|-----------------------------------------------------------------------------------------------|\n|  39339  | UNABLE TO DELETE INSURANCE                      | Error returned when Insurance cannot be deleted                                               |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Errors returned by the application:\n|  Code   |           Title                                 | Description                                                                                   |\n|:-------:|:-----------------------------------------------:|-----------------------------------------------------------------------------------------------|\n|  36894  | ORDER NOT FOUND                                 | Error returned when the order could not be found. The order id or last name might be invalid. |\n|  36962  | LAST NAME SHOULD BE PROVIDED                    | Error returned when passenger name missing.                                                   |\n|  39338  | INSURANCE NOT FOUND                             | Error returned when Insurance to be deleted is not found in order                             |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/purchase/orders/{orderId}/repricing": {
      "post": {
        "tags": [
          "Order"
        ],
        "operationId": "repriceOrder",
        "summary": "Reprice an order with optionaly new pricing options",
        "description": "Reprice an existing order with provided pricing options (if any).\nWhen no pricing options are provided in the body request, repricing is done using the original pricing options.\nFollowing elements will be repriced during this operation:\n* Air items\nAs of now only unticketed and unpaid orders can be repriced.\n\nUpdated order is returned in the response.",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "name": "postOrderRepricingBody",
            "in": "body",
            "description": "Object containing the new pricing options to be used to reprice the order\n",
            "required": false,
            "schema": {
              "$ref": "#/definitions/OrderRepricingRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK\nWarnings that can be returned by the application:\n|  Code   |          Title                                                      | Description                                                                                                                                 |\n|:-------:|:-------------------------------------------------------------------:|---------------------------------------------------------------------------------------------------------------------------------------------|\n|  40611  | AIR PRICE HAS CHANGED                                               | Warning returned when the order total price has changed after repricing                                                                     |\n|  40929  | NO OFFER FOUND IN ORDER                                             | Warning returned when the retrieval of the order persisted offer is failing                                                                 |\n|  40869  | ORDER CONTAINS CHARGEABLE SEAT OR SERVICE                           | Warning returned when the repriced order contains chargeable seat or service and they are not repriced                                      |\n|  41239  | PROMOTION CODE HAS NOT BEEN APPLIED                                 | Warning returned when the promotion code provided in input is not applied                                                                   |\n|  40985  | PROMOTION CODE HAS BEEN REMOVED                                     | Warning returned when the promotion code present in the offer is removed during the repricing                                               |\n|  41434  | ONLY SERVICES AND SEATS WERE REPRICED                               | Warning returned when service promocode is sent to reprice order (air items are not repriced)                                               |\n|  41437  | AIR OFFER REPRICING NOT ALLOWED                                     | Warning returned when promocode is both Air and Service promocode, air repricing could not be performed but service repricing was performed |\n|  41438  | UNABLE TO REPRICE AIR                                               | Warning returned when promocode is both Air and Service promocode, air repricing failed but service repricing was performed                 |\n|  41439  | UNABLE TO REPRICE SERVICES AND SEATS                                | Warning returned when promocode is both Air and Service promocode, air repricing succeeded but service repricing failed                     |\n|  41440  | ANCILLARY PROMOCODE RECEIVED - NO SERVICES AND SEATS TO BE REPRICED | Warning returned when promocode is both Air and Service promocode, air repricing succeeeded but there are no seats/services to be repriced  |\nErrors that can be returned by the application:\n|  Code   |               Title                                                 | Description                                                                                                                                                                                                         |\n|:-------:|:-------------------------------------------------------------------:|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n|  40567  | ORDER REPRICING NOT ALLOWED                                         | Error returned when the order is not eligible for repricing                                                                                                                                                         |\n|  40568  | UNABLE TO REPRICE ORDER                                             | Error returned when the order repricing is failing                                                                                                                                                                  |\n|  37939  | MISSING PRICE FOR FLIGHTS                                           | Error returned when the order is without TST                                                                                                                                                                        |\n|  8111   | ERROR AT END OF TRANSACTION TIME                                    | Error returned in case of an error at end of transaction of the PNR                                                                                                                                                 |\n|  41432  | INVALID PROMOTION CODE                                              | Error returned when the promotion code sent in input can neither be identified as Air nor a Service promocode                                                                                                       |\n|  41435  | UNABLE TO REPRICE SERVICES AND SEATS                                | Error returned when service promocode is sent to reprice order and repricing of services and seats failed                                                                                                           |\n|  41436  | ANCILLARY PROMOCODE RECEIVED - NO SERVICES AND SEATS TO BE REPRICED | Error returned when service promocode is sent to reprice order and there are no unpaid services/seats to be repriced (either no services/seats at all or all of them are paid / have a FOP associated to their TSM) |\n",
            "schema": {
              "$ref": "#/definitions/OrderReply"
            }
          },
          "400": {
            "description": "Bad request\nErrors that can be returned by the application:\n\n|  Code  |          Title             | Description                                                               |\n|:------:|:--------------------------:|---------------------------------------------------------------------------|\n|  04926  | INVALID DATA RECEIVED      | Returned when information is missing or wrong  in order repricing request |\n"
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/purchase/orders/{orderId}/check-tasks": {
      "get": {
        "tags": [
          "Order"
        ],
        "operationId": "checkTasksForOrder",
        "summary": "Return tasks to perform by the api user based on the order content and airline business rules",
        "description": "The end point returns through `tasks` configured by airline business rules what data can or should be collected by  the API user. The `task` acts as a reminder for the traveler to enter the requested data.\n\nToday, a `task` returns whether a `regulatory details` should be collected by the API user. \n\n**Note:** a task for `regulatory details` is for information purpose. This allows airline to collect some details earlier in the traveler journey. However, the final validation for regulatory documents remains the responsibility of the check-in process provided by the airline Departure Control System (DCS).  The check-in application may request additional details or documents.\n\n**Example:** the airline configures the business rules to prompt the API user to enter optionally his passport  and home address if the traveler flies to the United States Of America (USA).",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/firstName"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TaskCheckOrderReply"
            }
          },
          "400": {
            "description": "Errors that can be returned by the application:\n|  Code   |          Title          | Description                                                       |\n|:-------:|:-----------------------:|-------------------------------------------------------------------|\n|  04926  | INVALID DATA RECEIVED   | Error raised when the request is invalid e.g. Mandatory field missing, Bad format,etc. |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Errors returned by the application:\n|  Code   |           Title          | Description            |\n|:-------:|:------------------------:|------------------------|\n|  40828  | UNABLE TO PROCESS        | Technical error        |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/purchase/orders/{orderId}/order-changes/{orderChangeId}/check-tasks": {
      "get": {
        "tags": [
          "Order"
        ],
        "operationId": "checkTasksForOrderChange",
        "summary": "Return tasks to perform by the api user based on the order change content and airline business rules",
        "description": "The end point returns through `tasks` configured by airline business rules what data can or should be collected by  the API user. The `task` acts as a reminder for the traveler to enter the requested data.\n\nToday, a `task` returns whether a `regulatory details` should be collected by the API user. \n\n**Note:** a task for `regulatory details` is for information purpose. This allows airline to collect some details earlier in the traveler journey. However, the final validation for regulatory documents remains the responsibility of the check-in process provided by the airline Departure Control System (DCS).  The check-in application may request additional details or documents.\n\n**Example:** the airline configures the business rules to prompt the API user to enter optionally his passport  and home address if the traveler flies to the United States Of America (USA).",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/firstName"
          },
          {
            "$ref": "#/parameters/orderChangeId"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TaskCheckOrderReply"
            }
          },
          "400": {
            "description": "Errors that can be returned by the application:\n|  Code   |          Title          | Description                                                       |\n|:-------:|:-----------------------:|-------------------------------------------------------------------|\n|  04926  | INVALID DATA RECEIVED   | Error raised when the request is invalid e.g. Mandatory field missing, Bad format,etc. |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Errors returned by the application:\n|  Code   |           Title          | Description            |\n|:-------:|:------------------------:|------------------------|\n|  40828  | UNABLE TO PROCESS        | Technical error        |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/purchase/orders/{orderId}/special-service-requests": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Retrieve all specialServiceRequests from an order",
        "description": "Retrieve all specialServiceRequests from an order based on order id.\n",
        "operationId": "retrieveSpecialServiceRequestsFromOrder",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "$ref": "#/parameters/lastName"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SpecialServiceRequestsListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Add Special Service Request(s) in the order.",
        "description": "Add generic Special Service Request(s) (SSR) in the order.\n",
        "operationId": "addSpecialServiceRequestsToOrder",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "name": "postSpecialServiceRequestsBody",
            "description": "Special Service Request(s) to create",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SpecialServiceRequest"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SpecialServiceRequestsListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Special Service Request(s) from the order.",
        "description": "Delete Special  Service Request(s) from the order.",
        "operationId": "deleteSpecialServiceRequestsFromOrder",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "name": "specialServiceRequestIds",
            "description": "List of Special  Service Request(s) to delete from the order",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "[a-zA-Z0-9-]{1,20}",
              "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
            },
            "collectionFormat": "csv"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/purchase/orders/{orderId}/special-service-requests/{specialServiceRequestId}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Retrieve SSR information",
        "description": "Retrieve an SSR information from an order based on its id.\n",
        "operationId": "retrieveSpecialServiceRequestFromOrder",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/specialServiceRequestId"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SpecialServiceRequestReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a Special Service Request from the order",
        "description": "Delete a Special Service Request from the order.",
        "operationId": "deleteSpecialServiceRequestFromOrder",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/specialServiceRequestId"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/purchase/orders/{orderId}/payment-records/replacement": {
      "post": {
        "summary": "Performs the not approved payment methods replacement in the order.",
        "description": "Controller used to perform the replacement of the payment records associated to the specified order.\nThis entry point performs several transactions:\n- Deletes the payment methods to be replaced based on the information sent in input.\n- Creates the new payment methods as requested to replace the existing.\n- Create the travel documents (if configured to chain issuance after successful payment).\nThe travel documents could also be created later by using POST purchase/orders/{orderId}/travel-documents.\nAPI will trigger the payment replacement and travel documents issuance. An error will be raised in the following cases: - The Order already contains confirmed payment records - The Order already contains travel documents\nLast name of one of the travelers may be required for security reasons.\n",
        "operationId": "replacePaymentRecords",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "name": "replacePaymentRecordsBody",
            "description": "Request to replace payment for an order.",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/OrderPaymentReplacementRequest"
            }
          }
        ],
        "tags": [
          "Order"
        ],
        "responses": {
          "200": {
            "description": "A specific order with payment.<br/>\n**Error codes**\n|Code | Title                                            | Description                                                                                                                                                                                    |\n|:---:|:------------------------------------------------:|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n|32399|PAYMENT FAILED                                    | The payment confirmation cannot be done. Some use cases:<br/>- Authentication rejected<br/>- AlternativePaymentMethod confirmation failed<br/>- Issue between Amadeus and the Payment provider | |37576|INVALID PAYMENT METHOD                            | The provided payment method to confirm is not valid. Some use cases:<br/>- Missing payload for AlternativePaymentMethod<br/>- Incorrect paymentType                                            | |65226|UNABLE TO CONFIRM PAYMENT RECORDS                 | The confirmation of the payment-records in the order failed. Some use cases:<br/>- Wrong authorization input for PaymentCard<br/>- The order already contains an approved payment-record       | |612474|PAYMENT METHODS COMBINATION DOES NOT SUPPORT 3DS | 3DS confirmation is requested with a payment method not combinable with it.                                                                                                                    | |65225|INVALID 3D SECURE DATA                            | When confirming with a PaymentCard, authorization input is missing.                                                                                                                            | |65224|UNABLE TO DELETE PAYMENT RECORD                   | The requested FPs to be replaced cannot be deleted.                                                                            |\n ",
            "schema": {
              "$ref": "#/definitions/PaymentRecordsReply"
            }
          },
          "201": {
            "description": "A specific order with payment.<br/>\n**Warning codes**\n|Code | Title                                              | Description                                                                                                               |\n|:---:|:--------------------------------------------------:|---------------------------------------------------------------------------------------------------------------------------|\n|37184|UNABLE TO CREATE TRAVEL DOCUMENT                    | After payment replacement, the order cannot be issued.                                                                    | |38126|UNABLE TO QUEUE                                     | Order cannot be queued as expected.                                                                                       |",
            "schema": {
              "$ref": "#/definitions/PaymentRecordsReply"
            }
          },
          "400": {
            "description": "Bad request<br/>\n**Error codes**\n|Code | Title                                         | Description                                        |\n|:---:|:---------------------------------------------:|----------------------------------------------------|\n|36962|LAST NAME SHOULD BE PROVIDED                   | The lastName query parameter needs to be provided. |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Not found<br/>\n**Error codes**\n|Code | Title                                         | Description                       |\n|:---:|:---------------------------------------------:|-----------------------------------|\n|36894|ORDER NOT FOUND                                | The order to pay cannot be found. |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/shopping/seatmaps": {
      "get": {
        "summary": "Seat map",
        "description": "Return the seat map for a given booking class. Not every booking class is available on every flight.\nThe showMilesPrice query parameter allows to retrieve seat prices in cash currency and in miles. The frequentFlyerCardNumber together with a companyCode or  the frequentFlyerCartId together with an orderId parameter can be used to get customized conversion rates as per the frequent flyer profile. \nDictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).\nIf no booking class is specified in input, the seat map for booking class 'Y' (Economy) is returned by default.\n",
        "operationId": "standaloneSeatMaps",
        "tags": [
          "Seatmap"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/marketingAirlineCode"
          },
          {
            "$ref": "#/parameters/marketingFlightNumber"
          },
          {
            "$ref": "#/parameters/originLocationCode"
          },
          {
            "$ref": "#/parameters/destinationLocationCode"
          },
          {
            "$ref": "#/parameters/departureDate"
          },
          {
            "$ref": "#/parameters/bookingClass"
          },
          {
            "name": "travelerTypes",
            "description": "List of travaler types for which the seatmap is requested. A traveler type corresponds to a [Passenger type code](http://api.dev.amadeus.net/api/Development/common/codelist/PNR_PassengerType.htm)",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "[a-zA-Z0-9]{3}",
              "x-risk-personal-data-field": "PASSENGER_TYPE"
            },
            "in": "query",
            "collectionFormat": "csv",
            "maxItems": 3
          },
          {
            "name": "orderId",
            "description": "Reference to order. Can be used to retrieve travelers information and frequent flyer card. Also known PNR record locator.",
            "in": "query",
            "required": false,
            "type": "string",
            "pattern": "[a-zA-Z0-9]{6}",
            "x-risk-personal-data-field": "PNR_RECORD_LOCATOR"
          },
          {
            "name": "currencyCode",
            "description": "ISO currency code (http://www.iso.org/iso/home/standards/currency_codes.htm) to be used for seat prices",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/promotionCode"
          },
          {
            "$ref": "#/parameters/promotionAirlineCode"
          },
          {
            "$ref": "#/parameters/showMilesPrice"
          },
          {
            "$ref": "#/parameters/optionalFrequentFlyerCardNumber"
          },
          {
            "$ref": "#/parameters/optionalCompanyCode"
          },
          {
            "$ref": "#/parameters/optionalFrequentFlyerCardId"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "description": "Seatmap information for a given flight Warnings that can be returned by the application:\n|  Code   |           Title                       | Description                                                                      |\n|:-------:|:-------------------------------------:|----------------------------------------------------------------------------------|\n|  40619  | MILES AND CASH CONVERSION NOT APPLIED | Although requested, miles information is not returned, as none of the            |\n                                                  | mandatory information (frequent flyer card number & company code                 |\n                                                  | or frequent flyer card id was supplied in input                                  |\n\n|  39042  | PROMOTION CODE MISSING                | Promotion code is not applied, as it was missing from input                      |\n                                                  | (whereas the promotion airline was present)                                      |",
            "schema": {
              "$ref": "#/definitions/SeatmapReply"
            }
          },
          "400": {
            "description": "Bad request Errors that can be returned by the application:\n|  Code   |           Title                    | Description                                                                         |\n|:-------:|:----------------------------------:|-------------------------------------------------------------------------------------|\n|  36894  | ORDER NOT FOUND                    | The order id and/or last name is incorrect                                          |\n|  36962  | LAST NAME SHOULD BE PROVIDED       | The last name of a passenger is missing                                             |\n|  36864  | FREQUENT FLYER CARD NOT FOUND      | Invalid frequent flyer card id                                                      |\n|  36907  | INVALID FREQUENT FLYER CARD        | One of flyer card number and company code was specified, but not both               |\n|  04926  | INVALID DATA RECEIVED              | Invalid flight id or invalid traveler id                                            |\n|  39233  | IMPOSSIBLE TO CALL SEATMAP         | Invalid location code                                                               |\n|  65019  | UNABLE TO PROCESS                  | Technical failure                                                                   |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "post": {
        "summary": "Return the seat map for a given flight. The request can be biased with some extra optional input",
        "description": "Return the seat map for a given flight. The request can be baised with some extra optional input.\nDictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).\n",
        "operationId": "advancedSeatmap",
        "tags": [
          "Seatmap"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/lang"
          },
          {
            "$ref": "#/parameters/currencyCode"
          },
          {
            "name": "advancedSeatmapInputs",
            "description": "Description of inputs needed to perform the advanced search of seatmap",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SeatmapAdvancedSearchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Seatmap information for a given flight Warnings that can be returned by the application:\n|  Code   |           Title                       | Description                                                                      |\n|:-------:|:-------------------------------------:|----------------------------------------------------------------------------------|\n|  40619  | MILES AND CASH CONVERSION NOT APPLIED | Although requested, miles information is not returned, as none of the            |\n                                                  | mandatory information (frequent flyer card number & company code                 |\n                                                  | or frequent flyer card id was supplied in input                                  |\n\n|  39042  | PROMOTION CODE MISSING                | Promotion code is not applied, as it was missing from input                      |\n                                                  | (whereas the promotion airline was present)                                      |",
            "schema": {
              "$ref": "#/definitions/SeatmapReply"
            }
          },
          "400": {
            "description": "Bad request Errors that can be returned by the application:\n|  Code   |           Title                    | Description                                                                         |\n|:-------:|:----------------------------------:|-------------------------------------------------------------------------------------|\n|  36907  | INVALID FREQUENT FLYER CARD        | One of flyer card number and company code was specified, but not both               |\n|  04926  | INVALID DATA RECEIVED              | Invalid flight id or invalid traveler id or invalid currency code                   |\n|  39233  | IMPOSSIBLE TO CALL SEATMAP         | Invalid location code                                                               |\n|  65019  | UNABLE TO PROCESS                  | Technical failure                                                                   |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/shopping/seatmaps/template": {
      "get": {
        "summary": "Seat map from Aircraft Configuration",
        "description": "Return the aircraft seatmap representation based on the aircraft configuration version.\nDictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).\n",
        "operationId": "retrieveSeatMapsFromACV",
        "tags": [
          "Seatmap"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/marketingAirlineCode"
          },
          {
            "$ref": "#/parameters/aircraftConfigurationVersion"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "description": "Seatmap information for flight",
            "schema": {
              "$ref": "#/definitions/SeatmapReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/shopping/seatmaps/by-cart": {
      "get": {
        "summary": "Seat map from cart reference",
        "description": "Return the seat map for a flight from one of the offers of the Cart identified with the flightId parameter. Not every booking class is available on every flight.\nThe showMilesPrice query parameter allows to retrieve seat prices in cash currency and in miles.  The frequentFlyerCardNumber together with a companyCode or the frequentFlyerCartId parameter can be used to get customized conversion rates as per the frequent flyer profile. \nDictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).\n",
        "operationId": "retrieveSeatMapsCartDriven",
        "tags": [
          "Seatmap"
        ],
        "parameters": [
          {
            "name": "cartId",
            "description": "Identifier of the cart. The content of cart is taken into account to determine the list of seat maps",
            "required": true,
            "in": "query",
            "type": "string",
            "pattern": "[a-zA-Z0-9]{1,20}",
            "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
          },
          {
            "$ref": "#/parameters/queryFlightId"
          },
          {
            "name": "airOfferId",
            "description": "Identifies, in the Cart, the offer which contains the flight for which seatMap is requested",
            "required": false,
            "in": "query",
            "type": "string",
            "pattern": "[a-zA-Z0-9-]{1,120}",
            "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
          },
          {
            "name": "travelerIds",
            "description": "Identifier(s) of travelers involved. If not provided, seatmap will be retrieved for all travelers present in the Cart",
            "required": false,
            "in": "query",
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "[a-zA-Z0-9-]{1,20}",
              "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
            },
            "collectionFormat": "csv",
            "maxItems": 9
          },
          {
            "$ref": "#/parameters/promotionCode"
          },
          {
            "$ref": "#/parameters/promotionAirlineCode"
          },
          {
            "$ref": "#/parameters/showMilesPrice"
          },
          {
            "$ref": "#/parameters/optionalFrequentFlyerCardNumber"
          },
          {
            "$ref": "#/parameters/optionalCompanyCode"
          },
          {
            "$ref": "#/parameters/optionalFrequentFlyerCardId"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "description": "Seatmap information for a given flight Warnings that can be returned by the application:\n|  Code   |           Title                       | Description                                                                      |\n|:-------:|:-------------------------------------:|----------------------------------------------------------------------------------|\n|  40619  | MILES AND CASH CONVERSION NOT APPLIED | Although requested, miles information is not returned, as none of the            |\n                                                  | mandatory information (frequent flyer card number & company code                 |\n                                                  | or frequent flyer card id was supplied in input                                  |\n\n|  39042  | PROMOTION CODE MISSING                | Promotion code is not applied, as it was missing from input                      |\n                                                  | (whereas the promotion airline was present)                                      |",
            "schema": {
              "$ref": "#/definitions/ContextualSeatmapReply"
            }
          },
          "400": {
            "description": "Bad request Errors that can be returned by the application:\n|  Code   |           Title                    | Description                                                                         |\n|:-------:|:----------------------------------:|-------------------------------------------------------------------------------------|\n|  36864  | FREQUENT FLYER CARD NOT FOUND      | Invalid frequent flyer card id                                                      |\n|  36907  | INVALID FREQUENT FLYER CARD        | One of flyer card number and company code was specified, but not both               |\n|  04926  | INVALID DATA RECEIVED              | Invalid cart id, flight id or invalid traveler id                                   |\n|  39233  | IMPOSSIBLE TO CALL SEATMAP         | Invalid location code                                                               |\n|  65019  | UNABLE TO PROCESS                  | Technical failure                                                                   |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/shopping/seatmaps/by-order": {
      "get": {
        "summary": "Seat map from order reference",
        "description": "Return the seat map for a flight from the Order identified with the flightId parameter. Not every cabin class is available on every flight.\nThe orderId is mandatory in any case. If both orderId and orderChangeId are input, the seat map is retrieved from the order currenly under modification (e.g. during a voluntary exchange).  However, if only the orderId is in input, the seat map is retrieved from the order as it is persisted.\nThe showMilesPrice query parameter allows to retrieve seat prices in cash currency and in miles.  The frequentFlyerCardNumber together with a companyCode or the frequentFlyerCartId parameters can be used to get customized conversion rates as per the frequent flyer profile. \nDictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).\n",
        "operationId": "retrieveSeatMapsOrderDriven",
        "tags": [
          "Seatmap"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/queryOrderId"
          },
          {
            "$ref": "#/parameters/optionalOrderChangeId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/queryFlightId"
          },
          {
            "$ref": "#/parameters/showMilesPrice"
          },
          {
            "$ref": "#/parameters/optionalFrequentFlyerCardNumber"
          },
          {
            "$ref": "#/parameters/optionalCompanyCode"
          },
          {
            "$ref": "#/parameters/optionalFrequentFlyerCardId"
          },
          {
            "name": "travelerIds",
            "description": "Identifier(s) of travelers involved. If not provided, seatmap will be returned for all travelers in the Order",
            "required": false,
            "in": "query",
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "[a-zA-Z0-9-]{1,20}",
              "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
            },
            "collectionFormat": "csv",
            "maxItems": 9
          },
          {
            "$ref": "#/parameters/promotionCode"
          },
          {
            "$ref": "#/parameters/promotionAirlineCode"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "description": "Seatmap information for a given flight based on order content Warnings that can be returned by the application:\n|  Code   |           Title                       | Description                                                                      |\n|:-------:|:-------------------------------------:|----------------------------------------------------------------------------------|\n|  40619  | MILES AND CASH CONVERSION NOT APPLIED | Although requested, miles information is not returned, as none of the            |\n                                                  | mandatory information (frequent flyer card number & company code                 |\n                                                  | or frequent flyer card id was supplied in input                                  |\n\n|  39042  | PROMOTION CODE MISSING                | Promotion code is not applied, as it was missing from input                      |\n                                                  | (whereas the promotion airline was present)                                      |",
            "schema": {
              "$ref": "#/definitions/ContextualSeatmapReply"
            }
          },
          "400": {
            "description": "Bad request Errors that can be returned by the application:\n|  Code   |           Title                    | Description                                                                         |\n|:-------:|:----------------------------------:|-------------------------------------------------------------------------------------|\n|  36894  | ORDER NOT FOUND                    | The order id and/or last name is incorrect                                          |\n|  36962  | LAST NAME SHOULD BE PROVIDED       | The last name of a passenger is missing                                             |\n|  36864  | FREQUENT FLYER CARD NOT FOUND      | Invalid frequent flyer card id                                                      |\n|  36907  | INVALID FREQUENT FLYER CARD        | One of flyer card number and company code was specified, but not both               |\n|  04926  | INVALID DATA RECEIVED              | Invalid flight id or invalid traveler id                                            |\n|  39233  | IMPOSSIBLE TO CALL SEATMAP         | Invalid location code                                                               |\n|  65019  | UNABLE TO PROCESS                  | Technical failure                                                                   |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/purchase/orders/{orderId}/acknowledgment": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Acknowledge per bound after a disruption or a wait-list clearance",
        "description": "Acknowledge bound(s) after a disruption or a wait-list clearance\n",
        "operationId": "acknowledge",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "name": "acknowledgeRequest",
            "description": "Body for the request to acknowledge bound(s) after a disruption or a wait-list clearance",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AcknowledgeRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returned in case of successful acknowledge process with warnings.\n\nPossible warnings returned by the API:\n|  Code  |           Title          | Description                                                                         |\n|:------:|:------------------------:|-------------------------------------------------------------------------------------|\n|  38126 | UNABLE TO QUEUE          | Warning returned if the PNR queuing fails, after successful acknowledge.            |\n",
            "schema": {
              "$ref": "#/definitions/AcknowledgeReply"
            }
          },
          "204": {
            "description": "No content.  Returned in case of successful acknowledge process without warnings.\n"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Errors returned by the application:\n|  Code  |           Title          | Description                                                                                              |\n|:------:|:------------------------:|----------------------------------------------------------------------------------------------------------|\n|  36894 | ORDER NOT FOUND          | Error returned when the order could not be found. The order id or last name might be invalid.            |\n| 612466 | UNABLE TO ACKNOWLEDGE    | Error returned if the acknowledge process failed, after the order was retrieved successfully.            |\n|  39408 | ACKNOWLEDGE NOT ELIGIBLE | Error returned if one of the bound ids in the request is not eligible to acknowledge.                    |\n|  39445 | INVALID BOUND ID         | Error returned if one of the bound ids in the request doesn't match any of the disrupted bounds          |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/search/alternative-offers": {
      "get": {
        "tags": [
          "AlternativeOffer"
        ],
        "summary": "Search and propose alternative offers for a given bound, which has been disrupted.",
        "description": "In the event of a disruption(flight cancellation, delay or schedule change), the airline may proactively reaccommodate \nthe passenger to an alternative flight(aka recommended flight). \n\nIf the passenger does not find the recommended flight to be suitable, he can search and select alternative flight(s) for \nthe disrupted bound free of charge. This alternative flight is returned as part of an 'alternative-offer'. \n\nThe entry point takes as input the Order identifier (PNR) and the disrupted bound identifier in order to search for and return suitable alternative offers.\n",
        "operationId": "getAlternativeOffers",
        "parameters": [
          {
            "$ref": "#/parameters/queryOrderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/boundId"
          },
          {
            "$ref": "#/parameters/optionalDepartureDateTime"
          },
          {
            "$ref": "#/parameters/optionalOriginLocationCode"
          },
          {
            "$ref": "#/parameters/optionalDestinationLocationCode"
          },
          {
            "$ref": "#/parameters/includeNearbyCities"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AlternativeOffersReply"
            }
          },
          "400": {
            "description": "Reply returned when the request is invalid (Bad Request).\nPossible errors returned by the API:\n|  Code  |           Title                      | Description                                                          |\n|:------:|:------------------------------------:|----------------------------------------------------------------------|\n|  2226  | Invalid departure date time.         | Error returned if the departure date in in the request is invalid.   |                      \n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Reply returned when the resource could not be found (Not Found / Functional).\nPossible errors returned by the API:\n|  Code  |           Title                      | Description                                                              |\n|:------:|:------------------------------------:|--------------------------------------------------------------------------|\n     \n|  65022 | Alternative offers not found.        | Error returned if the alternative id in the request could not be found.  |                      \n|  65025 | Bound not found.                     | Error returned if the bound id in in the request could not be found in the order. This means that either the order id or the bound id in the request is invalid.   |                      \n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Reply returned when there is an error.\nPossible errors returned by the API:\n|  Code   |                 Title                          | Description                                                                         |\n|:-------:|:----------------------------------------------:|-------------------------------------------------------------------------------------|\n     \n|  65031  | Bound is not eligible for alternative offers.  | Error returned if the bound id in the request is invalid.            |                      \n \n|  612472 | Search date outside of the allowed range.      | Error returned if the departure date in in the request is outside the allowed rage. |                      \n|  65024  | Bound not disrupted.                           | Error returned if the bound id in in the request is not disrupted.   |\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/purchase/orders/{orderId}/alternative-offer-confirmation-jobs": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Create a job that updates asynchronously the order with the alternative offer from GET /search/alternative-offers",
        "description": "Create a job that updates asynchronously the order with the alternative offer from GET /search/alternative-offers. The end point returns a job id that should be used to get the status of the asynchronous process.\n",
        "operationId": "createAsynchronousJobForAlternativeOfferConfirmation",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "name": "alternativeOfferConfirmationRequest",
            "description": "Body for the asynchronous job creation",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AlternativeOfferConfirmationRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Reply returned when the job is created successfully.\nNo warning is returned.\n",
            "schema": {
              "$ref": "#/definitions/AlternativeOfferConfirmationJobReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Reply returned when an error is raised.\nPossible errors returned by the API:\n|  Code  |           Title                      | Description                                                                         |\n|:------:|:------------------------------------:|-------------------------------------------------------------------------------------|\n     \n|  65019 | UNABLE TO PROCESS                    | Error returned if an unexpected technical error is raised.            |                      \n \n|  65211 | FUNCTIONALITY NOT ENABLED            | Error returned if the functionality is not enabled for the airline.  |          \n \n|  39707 | OFFER NOT FOUND                      | Error returned if the offer id provided in the request cannot be found. The offer id in the request might be invalid.            |                      \n \n|  39723 | OFFER CONFIRMATION NOT ELIGIBLE      | Error returned if the bound in the order is no more eligible. This might happen if the order i modified between the availability and the confirmation. |\n|  65227 | OFFER EXPIRED                        | Error returned if the offer in the request has expired. In that case, the api client might need to request again availability of alternative offers. |\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/purchase/orders/{orderId}/alternative-offer-confirmation-jobs/{alternativeOfferConfirmationJobId}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get the status of the job that updates the order with the alternative offer confirmation",
        "description": "Get the status of the job that updates the order with the alternative offer confirmation.      \n",
        "operationId": "getAlternativeOfferConfirmationJob",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "name": "alternativeOfferConfirmationJobId",
            "description": "Job identifier",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[a-zA-Z0-9]{1,20}"
          },
          {
            "name": "include",
            "description": "To include order content in the reply",
            "required": false,
            "in": "query",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "order"
              ]
            },
            "collectionFormat": "csv"
          }
        ],
        "responses": {
          "200": {
            "description": "Reply returned when the job details can be displayed.\nPossible warnings returned by the API:\n|  Code  |           Title                                                                      | Description                                                                         |\n|:------:|:------------------------------------------------------------------------------------:|-------------------------------------------------------------------------------------|\n|  65016 | UNABLE TO REACCEPT TRAVELERS                                                         | Warning returned if the flight rebooking has been successful but the transfer of the customer data to the airline Departure Control System has failed. This usually means that the traveler will have to go to the check-in application of the airline to check its status.       |\n|  65015 | UNABLE TO REISSUE TRAVEL DOCUMENTS                                                   | Warning returned if the flight rebooking has been successful but documents couldn't be reissued.            |\n            \n|  39610 | SOME SERVICES COULD NOT BE CARRIED OVER. PLEASE CHECK THE ORDER CONTENT              | Warning raised when some of the services booked on the original flights weren't rebooked on the new flights (from the alternative offer being confirmed).            |                      \n|  39609 | SOME SEATS COULD NOT BE CARRIED OVER. PLEASE CHECK THE ORDER CONTENT                 | Warning raised when some of the seat booked on the original flights weren't rebooked on the new flights (from the alternative offer being confirmed).            |\n",
            "schema": {
              "$ref": "#/definitions/AlternativeOfferConfirmationGetJobReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Reply returned when an error is raised.\nPossible errors returned by the API:\n|  Code  |           Title                        | Description                                                                         |\n|:------:|:--------------------------------------:|-------------------------------------------------------------------------------------|\n|  65014 | UNABLE TO REBOOK FLIGHTS               | Error returned when the new flights from the alternative offer could be not booked.       |\n          \n|  65019 | UNABLE TO PROCESS                      | Error returned if an unexpected technical error is raised.            |                      \n|  39707 | OFFER NOT FOUND                        | Error returned if the offer id provided in the request cannot be found.  The offer id in the request might be invalid.            |                      \n|  65211 | FUNCTIONALITY NOT ENABLED              | Error returned if the functionality is not enabled for the airline.  |          \n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/purchase/orders/{orderId}/alternative-offer-confirmation": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Update the order with the new flight selection from GET /search/alternative-offers",
        "description": "Update the order with the new flight selection from GET /search/alternative-offers\n",
        "operationId": "confirmAlternativeOffer",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "name": "alternativeOfferConfirmationRequest",
            "description": "Body for the confirmation of the new selected flight(s) in a self re-accommodation context",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AlternativeOfferConfirmationRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Reply returned when the order is  updated successfully with the alternative offer.\nPossible warnings returned by the API:\n|  Code  |           Title                                                                      | Description                                                                         |\n|:------:|:------------------------------------------------------------------------------------:|-------------------------------------------------------------------------------------|\n|  65016 | UNABLE TO REACCEPT TRAVELERS                                                         | Warning returned if the flight rebooking has been successful but the transfer of the customer data to the airline Departure Control System has failed. This usually means that the traveler will have to go to the check-in application of the airline to check its status.       |\n|  65015 | UNABLE TO REISSUE TRAVEL DOCUMENTS                                                   | Warning returned if the flight rebooking has been successful but documents couldn't be reissued.            |\n            \n|  39610 | SOME SERVICES COULD NOT BE CARRIED OVER. PLEASE CHECK THE ORDER CONTENT              | Warning raised when some of the services booked on the original flights weren't rebooked on the new flights (from the alternative offer being confirmed).            |                      \n|  39609 | SOME SEATS COULD NOT BE CARRIED OVER. PLEASE CHECK THE ORDER CONTENT                 | Warning raised when some of the seat booked on the original flights weren't rebooked on the new flights (from the alternative offer being confirmed).            |                      \n|  65017 | TICKET ISSUANCE IS IN PROGRESS. PLEASE CHECK THE CONTENT OF YOUR ORDER IN A FEW MINS | Warning raised if the ticket issuance is performed asynchronously to improve the response time of the api call.    |          \n|  39655 | REACCEPTANCE IS IN PROGRESS. PLEASE CHECK THE CONTENT OF YOUR ORDER IN A FEW MINS    | Warning raised if the transfer of customer data to the airline Departure Control System is performed asynchronously to improve the response time of the api call.        |\n|  65227 | FLIGHT DISRUPTION HAS OCCURED: CHECK THE ORDER CONTENT                               | Error returned if the acknowledge process failed, after the order was retrieved successfully.            |\n",
            "schema": {
              "$ref": "#/definitions/AlternativeOfferConfirmationReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Reply returned when an error is raised.\nPossible errors returned by the API:\n|  Code  |           Title                                                                      | Description                                                                         |\n|:------:|:------------------------------------------------------------------------------------:|-------------------------------------------------------------------------------------|\n|  65014 | UNABLE TO REBOOK FLIGHTS                                                         | Error returned when the new flights from the alternative offer could be not booked.       |\n|  65018 | TRANSACTION HAS TIMED OUT. PLEASE CHECK THE CONTENT OF YOUR ORDER IN A FEW MINS  | Error returned when the confirmation of the alternative offer took too long to process and timed out. The confirmation is still processing in the backgound and might be successful.            |\n            \n|  65019 | UNABLE TO PROCESS                                                                | Error returned if an unexpected technical error is raised.            |                      \n|  39707 | OFFER NOT FOUND                                                                  | Error returned if the offer id provided in the request cannot be found.  The offer id in the request might be invalid.            |                      \n|  65211 | FUNCTIONALITY NOT ENABLED                                                        | Error returned if the functionality is not enabled for the airline.  |          \n|  39723 | OFFER CONFIRMATION NOT ELIGIBLE                                                  | Error returned if the bound in the order is no more eligible. This might happen if the order i modified between the availability and the confirmation. |\n|  65227 | OFFER EXPIRED                                                                    | Error returned if the offer in the request has expired. In that case, the api client might need to request again availability of alternative offers. |\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/checkin/journeys": {
      "post": {
        "tags": [
          "CheckIn"
        ],
        "summary": "Retrieve journeys",
        "operationId": "retrieveJourneys",
        "description": "Retrieve the list of journeys available for check-in corresponding to a confirmed booking.\nA journey will contain the information about flights and travelers associated to the booking.\nIn order to check-in the entire journey in one shot the operation to perform is POST /checkin/journey/{journeyId}/acceptance.\nIt is possible to retrieve or modify the information corresponding to any traveler on the flights associated to the journey, choosing among the available operations of the resource JourneyElement.\n",
        "parameters": [
          {
            "name": "postJourneyBody",
            "in": "body",
            "description": "Input information for the journeys retrieve",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JourneyRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/JourneysListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "No journey with that id",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/checkin/journeys/{journeyId}": {
      "get": {
        "tags": [
          "CheckIn"
        ],
        "summary": "Retrieve journey",
        "operationId": "retrieveJourney",
        "description": "Retrieve a journey corresponding to the specified id.",
        "parameters": [
          {
            "$ref": "#/parameters/journeyId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/JourneyReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "No journey with that id",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/checkin/journeys/{journeyId}/acceptance": {
      "post": {
        "tags": [
          "CheckIn"
        ],
        "summary": "Request acceptance of a journey",
        "operationId": "requestAcceptanceOfJourney",
        "description": "Requesting the acceptance of journey will check-in all the travelers on every flight associated to the journey.\nThe acceptance is performed only if the travelers are allowed to check-in.\n",
        "parameters": [
          {
            "$ref": "#/parameters/journeyId"
          },
          {
            "$ref": "#/parameters/areSecurityQuestionsAnswered"
          }
        ],
        "responses": {
          "201": {
            "description": "Acceptance status of the journey",
            "schema": {
              "$ref": "#/definitions/AcceptanceReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "No journey with that id",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "get": {
        "tags": [
          "CheckIn"
        ],
        "summary": "Get acceptance (check-in) status of the a journey",
        "operationId": "retrieveAcceptanceFromJourney",
        "description": "Get the acceptance status of a journey: either all traveler on flight are accepted, or none, or partially.",
        "parameters": [
          {
            "$ref": "#/parameters/journeyId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AcceptanceReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "No Journey with that id",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CheckIn"
        ],
        "summary": "Remove acceptance of a journey",
        "operationId": "deleteAcceptanceFromJourney",
        "description": "Remove acceptance of a journey, i.e. undo the check-in.",
        "parameters": [
          {
            "$ref": "#/parameters/journeyId"
          },
          {
            "name": "deleteAcceptanceRequest",
            "in": "body",
            "description": "Input to cancel acceptance",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DeleteAcceptanceRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "No Journey with that id.",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/checkin/journeys/{journeyId}/acceptance/voluntary-denied-boarding": {
      "post": {
        "tags": [
          "CheckIn"
        ],
        "summary": "Update the voluntary denied boarding status of the journey",
        "operationId": "updateVoluntaryDeniedBoardingOnJourney",
        "description": "Update the voluntary denied boarding status of the journey. In case of overbooking, are the traveller(s) on this journey volunteer(s) to surrender their place in exchange of compensation?",
        "parameters": [
          {
            "$ref": "#/parameters/journeyId"
          },
          {
            "name": "desiredVoluntaryDeniedBoardingStatus",
            "in": "body",
            "description": "In case of overbooking, are the traveller(s) on this journey volunteer(s) to surrender their place in exchange of compensation?",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated acceptance",
            "schema": {
              "$ref": "#/definitions/AcceptanceReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "No Journey with that id",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/checkin/journeys/{journeyId}/bag-tags-deliveries": {
      "post": {
        "tags": [
          "CheckIn"
        ],
        "summary": "Request the bag tags deliveries by Email or PDF",
        "operationId": "requestBagTagDeliveries",
        "description": "Receive the bag tags by Email or PDF for a journey. Only one delivery method (either PDF or Email) can be present in a single request.",
        "parameters": [
          {
            "$ref": "#/parameters/journeyId"
          },
          {
            "name": "bagTagsDeliveriesRequest",
            "in": "body",
            "description": "Only one delivery method (either PDF or Email) can be present in a single bagTags delivery request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BagTagsDeliveriesRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BagTagsDeliveriesReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "No journey with that id",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "500": {
            "description": "Errors",
            "schema": {
              "$ref": "#/definitions/CommonReply"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/checkin/journeys/{journeyId}/travelers": {
      "post": {
        "tags": [
          "CheckIn"
        ],
        "summary": "Add a new traveler to check-in",
        "operationId": "addTravelerToJourney",
        "description": "Modify a journey integrating a traveler retrieving the necessary information from:\n- an existing journey.\n- a confirmed booking (record locator, e-ticket number, Frequent Flyer card).\nDeparture date, Origin location code and Last name are information are not mandatory and used only to secure the access.\n",
        "parameters": [
          {
            "$ref": "#/parameters/journeyId"
          },
          {
            "name": "journeyRequest",
            "in": "body",
            "description": "Identification of another traveler with a confirmed booking (record locator, e-ticket number, Frequent Flyer card or JourneyElement) to be incorporated to the current journey.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JourneyTravelerPostRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/JourneyReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "No journey with that id",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CheckIn"
        ],
        "summary": "Remove traveler from a journey",
        "operationId": "removeTravelersFromJourney",
        "description": "Remove traveler from a journey, i.e. ignore this traveler during the check-in operation",
        "parameters": [
          {
            "$ref": "#/parameters/journeyId"
          },
          {
            "$ref": "#/parameters/travelerIds"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "403": {
            "description": "Last passenger cannot be deleted from a journey.",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "No Journey with that id.",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "CheckIn"
        ],
        "summary": "Modify traveler(s) to check-in",
        "operationId": "patchTravelersFromJourney",
        "description": "Modify traveler(s) to check-in. Limitation: Only the travelers part of the request will be impacted, all the other travelers (part of the Journey traveler list) will be kept untouched.\n",
        "parameters": [
          {
            "$ref": "#/parameters/journeyId"
          },
          {
            "name": "patchTravelersRequest",
            "in": "body",
            "description": "Request to modify existing traveler(s) for this journey.",
            "required": true,
            "schema": {
              "type": "array",
              "description": "List of traveler(s) to modify for this journey.",
              "items": {
                "$ref": "#/definitions/JourneyTravelerPatchRequest"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/JourneyTravelersReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "No journey with that id",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/checkin/journeys/{journeyId}/travelers/{travelerId}/regulatory-details": {
      "get": {
        "tags": [
          "CheckIn"
        ],
        "summary": "Get provided and required regulatory details",
        "operationId": "getRegulatoryDetails",
        "description": "Retrieve the regulatory details that were previously provided for the traveler.\nAlso retrieve the regulatory details that are required (or still missing) to enable the check-in and fulfill the regulatory requirement of the travel.\n",
        "parameters": [
          {
            "$ref": "#/parameters/journeyId"
          },
          {
            "$ref": "#/parameters/travelerId"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of regulatory details already provided and missing",
            "schema": {
              "$ref": "#/definitions/RegulatoryDetailsReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "No Journey or traveler with that id",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "post": {
        "tags": [
          "CheckIn"
        ],
        "summary": "Add regulatory details",
        "operationId": "addRegulatoryDetails",
        "description": "Add one or multiple regulatory details that are required for the traveler on this journey\n",
        "parameters": [
          {
            "$ref": "#/parameters/journeyId"
          },
          {
            "$ref": "#/parameters/travelerId"
          },
          {
            "name": "addRegulatoryDetailsRequest",
            "in": "body",
            "description": "List of regulatory changes to perform for the traveler on this journey",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegulatoryDetailsAddRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of regulatory details already provided and missing",
            "schema": {
              "$ref": "#/definitions/RegulatoryDetailsReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "No Journey or traveler with that id",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/checkin/journeys/{journeyId}/frequent-flyer-cards": {
      "post": {
        "tags": [
          "CheckIn"
        ],
        "summary": "Add a traveler's frequent flyer card to the journey",
        "operationId": "addFrequentFlyerCardToJourney",
        "description": "Add a traveler's frequent flyer card to the journey for miles accrual. The traveler ID is taken from the Frequent Flyer Card that is given",
        "parameters": [
          {
            "$ref": "#/parameters/journeyId"
          },
          {
            "name": "frequentFlyerCard",
            "in": "body",
            "description": "Frequent flyer card to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FrequentFlyerCard"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FrequentFlyerCardReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "No Journey or traveler with that id",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/checkin/journey-elements/{journeyElementId}/frequent-flyer-cards/enrollment": {
      "post": {
        "tags": [
          "CheckIn"
        ],
        "summary": "Enroll for the Frequent Flyer program of the company.",
        "operationId": "enrollCompanyFrequentFlyerProgram",
        "description": "Enroll for the Frequent Flyer program of the company in input. and Add a traveler's frequent flyer card to the journey element for miles accrual.",
        "parameters": [
          {
            "$ref": "#/parameters/journeyElementId"
          },
          {
            "name": "frequentFlyerEnrollmentRequest",
            "in": "body",
            "description": "Company program to enroll to.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FrequentFlyerEnrollmentRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FrequentFlyerCardReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "No Journey with that id",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/checkin/journeys/{journeyId}/contacts": {
      "get": {
        "tags": [
          "CheckIn"
        ],
        "summary": "Retrieve contacts information",
        "description": "Retrieve a list of contacts for a journey.\nThere are two types of contact supported: phone, email.\nFor more information on a specific type of contact, please see the page [Contacts documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/contacts.html#/ContactType/get_).\nDictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).\n",
        "operationId": "retrieveContactsFromJourney",
        "parameters": [
          {
            "$ref": "#/parameters/journeyId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ContactsListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "post": {
        "tags": [
          "CheckIn"
        ],
        "summary": "Add Contacts in the journey.",
        "description": "Add Contact(s) in the journey: Emails and/or Phones.\nFor more information on a specific type of contact, please see the page [Contacts documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/contacts.html#/ContactType/get_).\nDictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).\n",
        "operationId": "addContactsToJourney",
        "parameters": [
          {
            "$ref": "#/parameters/journeyId"
          },
          {
            "name": "postContactsBody",
            "description": "Contacts to add in the journey",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Contact"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ContactsListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/checkin/journeys/{journeyId}/services": {
      "get": {
        "tags": [
          "CheckIn"
        ],
        "summary": "Get services inside the journey",
        "operationId": "getJourneyServices",
        "description": "Retrieve the services booked by the travelers of the journey\n",
        "parameters": [
          {
            "$ref": "#/parameters/journeyId"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of services that are in the journey",
            "schema": {
              "$ref": "#/definitions/JourneyServicesReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "No Journey with that id",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "post": {
        "tags": [
          "CheckIn"
        ],
        "summary": "Add services to a journey",
        "operationId": "addJourneyServices",
        "description": "Add one or multiple services from the catalogue of services to the journey.\n",
        "parameters": [
          {
            "$ref": "#/parameters/journeyId"
          },
          {
            "name": "postServicesBody",
            "in": "body",
            "description": "Service details",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServiceItemRequest"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of services that are in the journey",
            "schema": {
              "$ref": "#/definitions/JourneyServicesReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "No Journey with that id",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "delete": {
        "summary": "Remove services from a journey",
        "description": "Delete services from a journey.",
        "operationId": "deleteJourneyServices",
        "tags": [
          "CheckIn"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/journeyId"
          },
          {
            "name": "serviceIds",
            "description": "List of services to delete from a cart.",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "No Journey with that id",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/checkin/journeys/{journeyId}/standby-early-cancellation": {
      "post": {
        "tags": [
          "CheckIn"
        ],
        "summary": "Cancel a standby early request from a journey",
        "operationId": "cancelStandbyEarlyFromJourney",
        "description": "A standby early transfer is a feature proposed by Altea Customer Management which allows passengers to be put on a waitlist for a flight departing before the flight they are currently confirmed on, and which is doing the same itinerary.\nWhen a standby early transfer is requested for a passenger on a flight, by using a POST request on /journey/{journeyId}/payment-records, new journey elements will be created and added to the journey. These newly created journey elements will all have the field \"isStandbyEarly\" set to true.\nThis entry point will be used to cancel and delete the standby early transfer journey elements present within a Journey. Meaning that the list of Journey elements identifiers provided in input will be deleted; otherwise, if nothing specified, all the journey elements which have the property \"isStandbyEarly\" set to true will be deleted.\n",
        "parameters": [
          {
            "$ref": "#/parameters/journeyId"
          },
          {
            "name": "cancelStandbyEarlyBody",
            "in": "body",
            "description": "Input information for the cancel standby early request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CancelStandbyEarlyRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/JourneyReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "No Journey with that id.",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/checkin/journeys/{journeyId}/seats": {
      "patch": {
        "tags": [
          "CheckIn"
        ],
        "summary": "Update seats in a journey",
        "operationId": "updateJourneySeats",
        "description": "Update one or multiple seats selected from the seatmap.\nIf no seat number is provided for the traveller, a seat is allocated by default.\n",
        "parameters": [
          {
            "$ref": "#/parameters/journeyId"
          },
          {
            "name": "postSeatsBody",
            "in": "body",
            "description": "Seats details",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/JourneyUpdateSeatItemRequest"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/JourneySeatReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "No Journey with that id",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/checkin/journeys/{journeyId}/contacts/{contactId}": {
      "get": {
        "tags": [
          "CheckIn"
        ],
        "summary": "Retrieve contact information",
        "description": "Retrieve contact information from a journey based on its id.\nThere are two types of contact supported: phone, email.\nFor more information on a specific type of contact, please see the page [Contacts documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/contacts.html#/ContactType/get_).\nDictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).\n",
        "operationId": "retrieveContactFromJourney",
        "parameters": [
          {
            "$ref": "#/parameters/journeyId"
          },
          {
            "$ref": "#/parameters/contactId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ContactReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "delete": {
        "summary": "Remove a contact from a journey",
        "description": "Remove a contact from a journey.",
        "operationId": "deleteJourneyContact",
        "tags": [
          "CheckIn"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/journeyId"
          },
          {
            "$ref": "#/parameters/contactId"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "No Journey or service with that id",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/checkin/journeys/{journeyId}/services/{serviceId}": {
      "get": {
        "tags": [
          "CheckIn"
        ],
        "summary": "Retrieve a service from a journey",
        "operationId": "getJourneyService",
        "description": "Retrieve a service currently present in the journey.",
        "parameters": [
          {
            "$ref": "#/parameters/journeyId"
          },
          {
            "$ref": "#/parameters/serviceId"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested service information",
            "schema": {
              "$ref": "#/definitions/JourneyServiceReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "No Journey or service with that id",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "delete": {
        "summary": "Remove a service from a journey",
        "description": "Delete a service from a journey.",
        "operationId": "deleteJourneyService",
        "tags": [
          "CheckIn"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/journeyId"
          },
          {
            "$ref": "#/parameters/serviceId"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "No Journey or service with that id",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/checkin/journeys/{journeyId}/unpaid-items": {
      "get": {
        "tags": [
          "CheckIn"
        ],
        "summary": "Retrieve unpaid items linked to a journey",
        "operationId": "getJourneyUnpaidItems",
        "description": "Retrieve a list of unpaid items (ancillary services, bags, seats) linked to the journey.",
        "parameters": [
          {
            "$ref": "#/parameters/journeyId"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of unpaid items linked to the journey",
            "schema": {
              "$ref": "#/definitions/JourneyUnpaidItemsReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "No Journey with that id",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/checkin/journeys/{journeyId}/baggages": {
      "get": {
        "tags": [
          "CheckIn"
        ],
        "summary": "Retrieve the list of baggages registered on this journey",
        "operationId": "retrieveJourneyBaggages",
        "description": "Retrieve the list of baggages registered on this journey",
        "parameters": [
          {
            "$ref": "#/parameters/journeyId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/JourneyBaggagesReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "No Journey with that id",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "post": {
        "tags": [
          "CheckIn"
        ],
        "summary": "Add baggages for several passengers in the journey",
        "operationId": "addJourneyBags",
        "description": "Add baggages for several passengers in the journey. All the requests will be cumulated, meaning that if we send for instance (traveler1, 2 baggages), (travaler1, 1 baggage, hunting trophy) and (traveler1, 3 baggages), as a result traveler1 will have a total of 5 regular baggages and 1 special baggage of type \"hunting trophy\".",
        "parameters": [
          {
            "$ref": "#/parameters/journeyId"
          },
          {
            "name": "postBaggagesBody",
            "in": "body",
            "description": "Baggages details",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/JourneyBaggageRequest"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/JourneyBaggagesReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "No Journey with that id",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CheckIn"
        ],
        "summary": "Remove baggages from a journey",
        "operationId": "removeBaggagesFromJourney",
        "description": "Remove one or more baggages from the a journey",
        "parameters": [
          {
            "$ref": "#/parameters/journeyId"
          },
          {
            "$ref": "#/parameters/baggageIds"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "No Journey with that id.",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/checkin/journeys/{journeyId}/payment-records": {
      "post": {
        "tags": [
          "CheckIn"
        ],
        "summary": "Create a new payment record for this journey",
        "operationId": "createJourneyPaymentRecord",
        "description": "Create a new payment record for this journey. Payment can be requested for various processes, e.g. Unpaid ancillaries, Upgrade, Flight reshopping... Payment in Self-Service Check-In is a three step process, leveraging Amadeus Payment Platform First, a payment record must be created for the journey.\n  This payment record will contain an ID and a Payment Transaction\n  The ID is used to correlate the three steps of the process\n  The Payment Transaction will contain only a Payment Request\n  The Payment Request will contain a Payment Method and an Amount\n  If the amount is equal to 0 (possible for a free change, or a redemption credit purchase for example), no further process is necessary\n  The Payment Method will be of type AlternativePaymentMethod\n  The AlternativePaymentMethod will contain only a dedicated name \"SSCI_APP\" and a status\nNext, if the amount is not 0 the payment must be authorized and confirmed\n  Authorization is done by calling the authorization controller on the relevant payment record, passing the method of payment data\n  (This authorization step can be reaplced with an integrated external payment system, e.g. prebuilt Amadeus Payment Pages)\nFinally, after authorization the payment must be confirmed\n  This is performed by calling a confirmation controller on the relevant payment record\n",
        "parameters": [
          {
            "$ref": "#/parameters/journeyId"
          },
          {
            "name": "journeyPaymentInput",
            "description": "Description of inputs needed to pay something related to a journey If not present, the default behaviour is to pay any outstanding unpaid services",
            "required": false,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/JourneyPaymentRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The created payment record",
            "schema": {
              "$ref": "#/definitions/PaymentRecordsReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "No Journey with that id",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/checkin/journeys/{journeyId}/payment-records/{paymentRecordId}/authorization": {
      "post": {
        "tags": [
          "CheckIn"
        ],
        "summary": "Authorize the payment record",
        "operationId": "authorizeJourneyPaymentRecord",
        "description": "Authorize a payment record, to be called after creating it, and before confirming it. Payment in Self-Service Check-In is a three step process, leveraging Amadeus Payment Platform First, a payment record must be created for the journey.\n  This payment record will contain only an ID and a Payment Transaction\n  The ID is used to correlate the three steps of the process\n  The Payment Transaction will contain only a Payment Request\n  The Payment Request will contain a Payment Method and an Amount\n  If the amount is equal to 0 (possible for a free change, or a redemption credit purchase for example), no further process is necessary\n  The Payment Method will be of type AlternativePaymentMethod\n  The AlternativePaymentMethod will contain only a dedicated name \"SSCI_APP\" and a status\nNext, if the amount is not 0 the payment must be authorized and confirmed\n  Authorization is done by calling the authorization controller on the relevant payment record, passing the method of payment data\n  (This authorization step can be reaplced with an integrated external payment system, e.g. prebuilt Amadeus Payment Pages)\nFinally, after authorization the payment must be confirmed\n  This is performed by calling a confirmation controller on the relevant payment record, passing the email address to be used for the payment receipt\n",
        "parameters": [
          {
            "$ref": "#/parameters/journeyId"
          },
          {
            "$ref": "#/parameters/paymentRecordId"
          },
          {
            "name": "journeyPaymentAuthorizationInput",
            "description": "Description of inputs needed to authorize payment",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JourneyPaymentAuthorizationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The authorization reply",
            "schema": {
              "$ref": "#/definitions/JourneyPaymentAuthorizationReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "No Journey with that id",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/checkin/journeys/{journeyId}/payment-records/{paymentRecordId}/confirmation": {
      "post": {
        "tags": [
          "CheckIn"
        ],
        "summary": "Confirm the payment record",
        "operationId": "confirmJourneyPaymentRecord",
        "description": "Confirm a payment record, to be called after having authorized it. Payment in Self-Service Check-In is a three step process, leveraging Amadeus Payment Platform First, a payment record must be created for the journey.\n  This payment record will contain only an ID and a Payment Transaction\n  The ID is used to correlate the three steps of the process\n  The Payment Transaction will contain only a Payment Request\n  The Payment Request will contain a Payment Method and an Amount\n  If the amount is equal to 0 (possible for a free change, or a redemption credit purchase for example), no further process is necessary\n  The Payment Method will be of type AlternativePaymentMethod\n  The AlternativePaymentMethod will contain only a dedicated name \"SSCI_APP\" and a status\nNext, if the amount is not 0 the payment must be authorized and confirmed\n  Authorization is done by calling the authorization controller on the relevant payment record, passing the method of payment data\n  (This authorization step can be reaplced with an integrated external payment system, e.g. prebuilt Amadeus Payment Pages)\nFinally, after authorization the payment must be confirmed\n  This is performed by calling a confirmation controller on the relevant payment record, passing the email address to be used for the payment receipt\n",
        "parameters": [
          {
            "$ref": "#/parameters/journeyId"
          },
          {
            "$ref": "#/parameters/paymentRecordId"
          },
          {
            "name": "journeyPaymentConfirmationInput",
            "description": "Description of inputs needed to confirm payment",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JourneyPaymentConfirmationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The confirmed payment record",
            "schema": {
              "$ref": "#/definitions/PaymentRecordsReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "No Journey with that id",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/checkin/journey-elements": {
      "get": {
        "tags": [
          "CheckIn"
        ],
        "summary": "Retrieve information about travelers on flights",
        "operationId": "retrieveJourneyElements",
        "description": "Retrieve all the journey element (traveler on a flight)rmation corresponding to a defined check-in journey.\nA JourneyElement stores the information related to the experience of the traveler getting on a plane (seat association, requested services, etc.).\n",
        "parameters": [
          {
            "$ref": "#/parameters/queryJourneyId"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of travelers on flights",
            "schema": {
              "$ref": "#/definitions/JourneyElementsListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "No Journey with that id",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/checkin/journey-elements/{journeyElementId}": {
      "get": {
        "tags": [
          "CheckIn"
        ],
        "summary": "Retrieve information about traveler on flight",
        "operationId": "retrieveJourneyElement",
        "description": "Retrieve a specific journey element (traveler on a flight)",
        "parameters": [
          {
            "$ref": "#/parameters/journeyElementId"
          }
        ],
        "responses": {
          "200": {
            "description": "A traveler on flight",
            "schema": {
              "$ref": "#/definitions/JourneyElementReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "No JourneyElement with that id",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "CheckIn"
        ],
        "summary": "Update the information about the traveler on the flight",
        "operationId": "updateJourneyElement",
        "description": "Update the traveler on the flight information.",
        "parameters": [
          {
            "$ref": "#/parameters/journeyElementId"
          },
          {
            "name": "updateJourneyElementRequest",
            "in": "body",
            "description": "Update to be performed on the journey element (traveler on a flight)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateJourneyElementRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated journey element (traveler on a flight)",
            "schema": {
              "$ref": "#/definitions/JourneyElementReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "No Journey or traveler with that id",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/checkin/journey-elements/{journeyElementId}/seat": {
      "patch": {
        "tags": [
          "CheckIn"
        ],
        "summary": "Set, confirm or update seat assignment for the passenger and flight combination",
        "operationId": "assignSeatToJourneyElement",
        "description": "Set, confirm or update seat assignment for the passenger and flight combination.\nParameter journeyId should be provided if the airline uses complex pricing rules where a traveler tier level could impact the price of other traveler's seats.\nFor example, a traveler has a frequent flyer card with a GOLD tier level and exempts accompanying travelers from chargeable seats (i.e. the seat of the accompanying travelers becomes free).",
        "parameters": [
          {
            "$ref": "#/parameters/journeyElementId"
          },
          {
            "$ref": "#/parameters/optionalQueryJourneyId"
          },
          {
            "name": "seatNumber",
            "in": "query",
            "description": "A seat to check-in for the traveler on the flight.\nConcatenation of the row id and the column id, for example 12B.\nNot providing a seat will assign to the traveler the 'best' seat for him/her (according to the seating server)\n",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/JourneyElementSeatReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "No traveler on flight with that id",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/checkin/journey-elements/{journeyElementId}/acceptance": {
      "post": {
        "tags": [
          "CheckIn"
        ],
        "summary": "Check-in a traveler on flight",
        "operationId": "requestAcceptanceOfJourneyElement",
        "description": "Perform the check-in of a traveler on a flight (if the traveler is allowed to take it).",
        "parameters": [
          {
            "$ref": "#/parameters/journeyElementId"
          },
          {
            "$ref": "#/parameters/areSecurityQuestionsAnswered"
          }
        ],
        "responses": {
          "201": {
            "description": "Acceptance status of the traveler on flight",
            "schema": {
              "$ref": "#/definitions/AcceptanceReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "No Traveler Flight Info with that id",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "get": {
        "tags": [
          "CheckIn"
        ],
        "summary": "Get acceptance (check-in) status of a journey element",
        "operationId": "retrieveAcceptanceFromJourneyElement",
        "description": "Get the acceptance status of a journey element: the traveler is checked in (or not) on the flight",
        "parameters": [
          {
            "$ref": "#/parameters/journeyElementId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AcceptanceReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "No Traveler Flight Info with that id",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CheckIn"
        ],
        "summary": "Undo the check-in of a journey element",
        "operationId": "deleteAcceptanceFromJourneyElement",
        "description": "Delete the acceptance (i.e. undo the check-in) of a traveler on a flight",
        "parameters": [
          {
            "$ref": "#/parameters/journeyElementId"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "No Traveler Flight Info with that id.",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/checkin/journey-elements/{journeyElementId}/acceptance/voluntary-denied-boarding": {
      "post": {
        "tags": [
          "CheckIn"
        ],
        "summary": "Update the voluntary denied boarding status of the journey element",
        "operationId": "updateVoluntaryDeniedBoardingOnJourneyElement",
        "description": "Update the voluntary denied boarding status of the journey element. In case of overbooking, is the traveller(s) on this flight volunteer to surrender their place in exchange of compensation?",
        "parameters": [
          {
            "$ref": "#/parameters/journeyElementId"
          },
          {
            "name": "desiredVoluntaryDeniedBoardingStatus",
            "in": "body",
            "description": "In case of overbooking, is the traveler on this flight volunteer to surrender their place in exchange of compensation?",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated acceptance",
            "schema": {
              "$ref": "#/definitions/AcceptanceReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "No Journey with that id",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/checkin/journey-elements/{journeyElementId}/frequent-flyer-cards": {
      "get": {
        "tags": [
          "CheckIn"
        ],
        "summary": "Retrieve frequent flyer card information",
        "description": "Retrieve frequent flyer card information associated to the journey element",
        "operationId": "retrieveFrequentFlyerCardFromJourneyElement",
        "parameters": [
          {
            "$ref": "#/parameters/journeyElementId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FrequentFlyerCardsListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "No traveler on flight with that id",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "post": {
        "tags": [
          "CheckIn"
        ],
        "summary": "Add a frequent flyer card for the journey element (traveler on a flight)",
        "operationId": "addFrequentFlyerCardToJourneyElement",
        "description": "Add frequent flyer card in the journey element (traveler on a flight) for miles accrual",
        "parameters": [
          {
            "$ref": "#/parameters/journeyElementId"
          },
          {
            "name": "frequentFlyerCard",
            "in": "body",
            "description": "Frequent flyer card to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FrequentFlyerCard"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FrequentFlyerCardReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "No traveler on flight with that id",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/checkin/boarding-passes": {
      "post": {
        "tags": [
          "CheckIn"
        ],
        "summary": "Generate boarding passes",
        "operationId": "generateBoardingPasses",
        "description": "Generate the boarding passes for all the passengers on all flights of the journey selected.\nAccording to the delivery method chosen the response could provide the document or be empty in case of it is an indirect delivery (i.e. email, sms).\nA list of traveler-flight-infos can be provided to generate the boarding passes only for those.\n",
        "parameters": [
          {
            "name": "deliveryInstructions",
            "in": "body",
            "description": "Delivery intructions to provide the boarding passes.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BoardingPassDeliveryInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "A list of boarding passes\nWarnings that can be returned by the application:\n|  Code  |            Title            |                            Detail                             |\n|:------:|:---------------------------:|---------------------------------------------------------------|\n|  5013  | Boarding Pass could not be  | Contains comma separated list of JourneyElement Ids for which | |        | returned for all travellers | Boarding Pass could not be generated.                         | |        |                             | e.g. 2301CF980000ED29, 2301CF980000ED13                       |\n",
            "schema": {
              "$ref": "#/definitions/BoardingPassesReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "No traveler on flight with that id, or no boarding pass for that traveler on flight",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/shopping/upgrades/by-journey": {
      "get": {
        "summary": "Retrieve possible upgrade options for this journey",
        "description": "This is a shopping query that returns possible upgrade options for a journey, as well as any relevant account balances. It will return all possible upgrade options along with their unitary price. Once certain upgrades have been selected, a POST call to /shopping/upgrades/by-journey can be performed to get the final total price\n",
        "operationId": "shopUpgradesFromJourney",
        "tags": [
          "Upgrades"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/queryJourneyId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/JourneyUpgradeShopReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "No journey with that id",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "post": {
        "summary": "Compute total price of selected upgrade options for this journey",
        "description": "This operation will calculate the total price of the chosen combination (not necessarily a simple sum, depending on the pricing and discount rules) for the upgrades passed. The purchase transaction for upgrades can then be performed using the standard journey payment call at /checkin/journeys/{journeyId}/payment-records\n",
        "operationId": "priceUpgradesFromJourney",
        "tags": [
          "Upgrades"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/queryJourneyId"
          },
          {
            "name": "upgradeJourneyPriceInput",
            "description": "Description of inputs needed to perform the upgrade query",
            "required": false,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/JourneyUpgradePriceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/JourneyUpgradePriceReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "No journey with that id",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/shopping/services/by-journey": {
      "get": {
        "summary": "Retrieve catalogue of services from Journey reference",
        "description": "This is a shopping transaction that returns a catalogue of services computed according to the content of a Journey.\nThe journey id allows to access to the details stored in it such as flights, number of travelers, etc.\n",
        "operationId": "servicesCatalogueFromJourney",
        "tags": [
          "Service"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/queryJourneyId"
          },
          {
            "$ref": "#/parameters/serviceTags"
          },
          {
            "$ref": "#/parameters/catalogueType"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/JourneyServicesCatalogueReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/shopping/seatmaps/by-journey": {
      "get": {
        "summary": "Seat map from journey reference",
        "description": "Return the seatmap for a specific flight (identified via the flightId parameter) part of the Journey.\nSeatmap will be returned for all the travelers in the provided flight and the availability of the seats will be expressed per traveler.\nDictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).\n",
        "operationId": "retrieveSeatMapsJourneyDriven",
        "tags": [
          "Seatmap"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/queryJourneyId"
          },
          {
            "$ref": "#/parameters/queryFlightId"
          }
        ],
        "responses": {
          "200": {
            "description": "Seatmap information for a given flight based on journey content",
            "schema": {
              "$ref": "#/definitions/ContextualSeatmapReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/shopping/baggage-policies/by-journey": {
      "get": {
        "summary": "Retrieve mandatory baggage information (MBI) from a journey",
        "description": "This is a transaction that returns mandatory baggage information computed according to the content of a journey.\n",
        "operationId": "getBaggagePoliciesFromJourney",
        "tags": [
          "FareConditions"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/queryJourneyId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CheckInBaggagePoliciesReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/search/alternative-offers/by-journey": {
      "get": {
        "summary": "Retrieve alternative flight offers for this journey",
        "description": "Retrieve possible alternative flights for this journey, depending on the search type passed in input. E.g. Free standby options on an earlier flight, or a paid change to another flight. Offers may change one or more flights from the journey. These offers must then be passed through the Payment flow (like ancillaires or upgrade), whether the offers are free or paid\n",
        "operationId": "getAlternativeFlightoffersFromJourney",
        "tags": [
          "AlternativeOffer"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/queryJourneyId"
          },
          {
            "$ref": "#/parameters/journeyAlternativeSearchType"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/JourneyAlternativeFlightOffersReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "No journey with that id",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/communication/user-notifications/by-journey": {
      "post": {
        "tags": [
          "Communication"
        ],
        "summary": "Send notification for the journey",
        "operationId": "sendNotificationsFromJourney",
        "description": "Send a notification to the contact id provided in input.\nThe only use case supported today is to send a one time password to the provided contact so that the user can cancel his acceptance.\n",
        "parameters": [
          {
            "name": "postNotificationBody",
            "in": "body",
            "description": "Input information for notification by journey",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NotificationFromJourneyRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content ../definitions/JourneysListReply.yaml#/definitions/JourneysListReply"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/shopping/carts": {
      "post": {
        "tags": [
          "Cart"
        ],
        "operationId": "createCart",
        "summary": "Create a cart",
        "description": "Create an empty cart, or a cart containing the information provided in input:\n  - An air offer can be added in the cart specifying its id or a complete list of bound IDs via the 'airOfferId' / 'airBoundIds' query parameters\n  - A list of sub-resources (such as Travelers, Contacts, Frequent flyer cards) can be specified in input using the 'CartRequest' body parameter\n  - When relevant, the sub-resources can be associated using temporary ids.\nDictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).\n",
        "parameters": [
          {
            "$ref": "#/parameters/lang"
          },
          {
            "$ref": "#/parameters/includeMoreCartDetails"
          },
          {
            "name": "postCartBody",
            "in": "body",
            "description": "Cart details",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CartRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created\nWarnings that can be returned by the application:\n|  Code   |                   Title                        | Description                                                                                                   |\n|:-------:|:----------------------------------------------:|---------------------------------------------------------------------------------------------------------------|\n|  36800  | NUMBER OF TRAVELERS DOES NOT MATCH THE FLIGHTS | Warning returned when the number of travelers in the cart does not match the number of travelers in the offer |\n|  38866  | UNABLE TO GET BOUND INFORMATION                | Warning returned when the application is unable to compute bounds information                                 |\n|  39767  | REGULATORY DETAILS OF TRAVELER(S) ARE IGNORED  | Warning returned when regulatory details are sent with travelers and no services or no offer is in the cart   |\n|  40900  | PARTIAL INFORMATION RETURNED                   | Value %s is truncated from %s                                                                                 |\n",
            "schema": {
              "$ref": "#/definitions/CartReply"
            }
          },
          "400": {
            "description": "Bad request\nErrors that can be returned by the application:\n\n|  Code   |                    Title                    | Description                                                                            |\n|:-------:|:-------------------------------------------:|----------------------------------------------------------------------------------------|\n|  04926  | INVALID DATA RECEIVED                       | It depends on the error, Mandatory field missing, Bad format,etc.                      |\n|  2668   | PARAMETER COMBINATION INVALID/RESTRICTED    | Error returned when both an air offer id and air bound offer ids are provided in input |\nErrors that can be returned by the application with 200 http status code:\n|  Code   |              Title              | Description                                                                                                                   |\n|:-------:|:-------------------------------:|-------------------------------------------------------------------------------------------------------------------------------|\n|  38775  | UNABLE TO RETRIEVE OFFER        | Error returned when the application could not retrieve the offer                                                              |\n|  37264  | INVALID TRAVELER TYPE           | Error returned if an invalid traveler passenger type is given in input when mapping travelers in cart to travelers in offer   |\n|  36865  | INVALID TRAVELER ID             | Error returned if an invalid traveler passenger id is given in input when mapping travelers in cart to travelers in offer     |\n|  39073  | INVALID INFANT ASSOCIATION      | Error returned in case of infant association mismatch between cart and offer                                                  |\n|  39886  | UNABLE TO ADD AIR-OFFER TO CART | Error returned when the application could not add an air offer to cart                                                        |\n|  38414  | MISSING PART OF ITINERARY       | Error raised when bound IDs are valid but the itinerary is incomplete                                                         |\n|  38608  | UNABLE TO MERGE BOUND OFFERS    | Error returned when the application could not merge bound offers or when at least one bound offer departure date is too close |\n|  38411  | INVALID REQUESTED BOUND         | Error returned when an invalid bound offer id is provided in input                                                            |\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "500": {
            "description": "Other Error\nErrors that can be returned by the application:\n\n|  Code   |        Title         | Description                                            |\n|:-------:|:--------------------:|--------------------------------------------------------|\n|  11     | UNABLE TO PROCESS    | Error returned in case of a technical failure          |\n|  5042   | SYSTEM ERROR         | Error returned in case of internal system error        |\n|  27565  | ENTRY NOT AUTHORIZED | Error returned in case of invalid office configuration |\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/shopping/carts/{cartId}": {
      "get": {
        "tags": [
          "Cart"
        ],
        "operationId": "retrieveCart",
        "summary": "Retrieve shopping cart",
        "description": "Retrieve a cart  based on its cart id.\nDictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).\n",
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "$ref": "#/parameters/refresh"
          },
          {
            "$ref": "#/parameters/includeWaitlist"
          },
          {
            "$ref": "#/parameters/includeMoreCartDetails"
          }
        ],
        "responses": {
          "200": {
            "description": "OK\nWarnings that can be returned by the application:\n|  Code   |                                 Title                                 | Description                                                                                                                                            |\n|:-------:|:---------------------------------------------------------------------:|--------------------------------------------------------------------------------------------------------------------------------------------------------|\n|  39743  | MISSING ENTITLEMENT DOCUMENTS                                         | Warning returned when offer in Cart contains resident or large family discount but not all travellers have the necessary entitlement documents         |\n|  39841  | ENTITLEMENT DOCUMENT NAME DOES NOT MATCH WITH TRAVELER NAME           | Warning returned when name in entitlement document does not match traveler name                                                                        |\n|  39842  | ENTITLEMENT DOCUMENT LAST NAME DOES NOT MATCH WITH TRAVELER LAST NAME | Warning returned when last name in entitlement document does not match traveler last name                                                              |\n|  36806  | OFFER HAS CHANGED                                                     | Warning returned when the air offer revalidation returns a new offer                                                                                   |\n|  38182  | SERVICES PRICES HAVE CHANGED                                          | Warning returned when services prices changed following their revalidation along with the offer                                                        |\n|  38183  | SERVICES NO MORE AVAILABLE                                            | Warning returned when services are no more available following their revalidation along with the offer                                                 |\n|  38368  | SEATS PRICES HAVE CHANGED                                             | Warning returned when seats prices changed following their revalidation along with the offer                                                           |\n|  38369  | SEATS NO MORE AVAILABLE                                               | Warning returned when seats are no more available following their revalidation along with the offer                                                    |\n|  38809  | LOW AVAILABILITY FOR SOME FLIGHTS                                     | Warning returned in case the number of available seats in the chosen booking class is less than 9 but greater than the number of passengers in offer   |\n|  40347  | FLIGHT TIME HAS CHANGED                                               | Warning returned in case of schedule change for one or multiple flights with their ids                                                                 |\n|  36803  | OFFER EXPIRED                                                         | Warning returned when the offer is no more available                                                                                                   |\n|  40061  | PACKS WITH SEAT NOW INCOMPLETE                                        | Warning returned when a pack becomes incomplete because at least one of its seats is no more available in the Cart                                     |\n|  36800  | NUMBER OF TRAVELERS DOES NOT MATCH THE FLIGHTS                        | Warning returned when the number of travellers in cart and in offer are not aligned                                                                    |\n|  39442  | AVAILABILITY HAS CHANGED FOR SOME FLIGHTS                             | Warning returned when the number of passengers in the offer is greater than available seats. This happens only in case of refresh with waitlist        |\n|  40807  | AIRCRAFT HAS CHANGED                                                  | Warning returned in case of aircraft type change for one or multiple flights with their ids                                                            |\n|  40900  | PARTIAL INFORMATION RETURNED                                          | Warning returned when some information has been truncated for maximum length reason                                                                    |\n|  41235  | BOOKING CLASS HAS CHANGED                                             | Warning returned in case of booking class change for one or multiple flights with their ids                                                            |\n|  40985  | PROMOTION CODE HAS BEEN REMOVED                                       | Warning returned when AAM promocode has been removed during the air offer revalidation                                                                 |\n|  40983  | AIR DISCOUNT HAS CHANGED                                              | Warning returned in case of AAM discount update during the air offer revalidation                                                                      |\nErrors that can be returned by the application:\n|  Code   |            Title            | Description                                                                       |\n|:-------:|:---------------------------:|-----------------------------------------------------------------------------------|\n|  40258  | UNABLE TO REVALIDATE OFFER                    | Error returned when the application could not revalidate the offer                |\n|  38775  | UNABLE TO RETRIEVE OFFER                      | Error returned when the application could not retrieve the air offer              |\n|  39373  | UNABLE TO UPDATE SERVICES AND SEATS PRICES    | Error returned when ancillary pricing has failed.                                 |\n",
            "schema": {
              "$ref": "#/definitions/CartReply"
            }
          },
          "400": {
            "description": "Bad request\nErrors that can be returned by the application:\n\n|  Code   |          Title          | Description                                                       |\n|:-------:|:-----------------------:|-------------------------------------------------------------------|\n|  04926  | INVALID DATA RECEIVED   | It depends on the error, Mandatory field missing, Bad format,etc. |\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Not Found\nErrors that can be returned by the application:\n\n|  Code   |              Title                   | Description                                                     |\n|:-------:|:------------------------------------:|-----------------------------------------------------------------|\n|  36798  | CART NOT FOUND                       | Error returned when no cart was found for the provided cart id  |\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "500": {
            "description": "Other Error\nErrors that can be returned by the application:\n\n|  Code   |        Title         | Description                                            |\n|:-------:|:--------------------:|--------------------------------------------------------|\n|  11     | UNABLE TO PROCESS    | Error returned in case of a technical failure          |\n|  5042   | SYSTEM ERROR         | Error returned in case of internal system error        |\n|  27565  | ENTRY NOT AUTHORIZED | Error returned in case of invalid office configuration |\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Cart"
        ],
        "operationId": "updateCart",
        "summary": "Update a cart",
        "description": "Update an existing cart with the data provided in input:\n  - It is possible to add, update or delete sub-resources from the Cart.\n  - The sub-resources travelers, contacts, frequent-flyer-cards, seats and services can be modified.\n  - The sub-resource extensions cannot be updated from here.\n  - Contacts, Frequent flyer cards, Seats and Services can be associated to Travelers using temporary ids, when those sub-resources are manipulated in the same transaction.\n  - Air Offer can be updated if it exists, in this case, no other fields should be accepted in input.\nDictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).\n",
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "$ref": "#/parameters/includeWaitlist"
          },
          {
            "name": "patchCartBody",
            "in": "body",
            "description": "Cart details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateCartRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK\nWarnings that can be returned by the application:\n|  Code   |                     Title                      | Description                                                                                                                                          |\n|:-------:|:----------------------------------------------:|------------------------------------------------------------------------------------------------------------------------------------------------------|\n|  38182  | SERVICES PRICES HAVE CHANGED                   | Warning returned when services prices changed following their revalidation along with the offer                                                      |\n|  38183  | SERVICES NO MORE AVAILABLE                     | Warning returned when services are no more available following their revalidation along with the offer                                               |\n|  38368  | SEATS PRICES HAVE CHANGED                      | Warning returned when seats prices changed following their revalidation along with the offer                                                         |\n|  38369  | SEATS NO MORE AVAILABLE                        | Warning returned when seats are no more available following their revalidation along with the offer                                                  |\n|  36800  | NUMBER OF TRAVELERS DOES NOT MATCH THE FLIGHTS | Warning returned when the number of travellers in cart and in offer are not aligned                                                                  |\n|  40900  | PARTIAL INFORMATION RETURNED                   | Value %s is truncated from %s                                                                                                                        |\n|  40346  | SERVICE HAS BEEN REMOVED                       | Service %s has been removed                                                                                                                          |\n|  40340  | SEAT HAS BEEN REMOVED                          | Seat %s has been removed                                                                                                                             |\n|  40279  | FF CARD HAS BEEN REMOVED                       | Warning returned when the frequent flyer used for award convertor has been removed                                                |\nErrors that can be returned by the application:\n|  Code   |                      Title                      | Description                                                                                                     |\n|:-------:|:-----------------------------------------------:|-----------------------------------------------------------------------------------------------------------------|\n|  29093  | INVALID ASSOCIATION                             | Error returned if the element association is invalid                                                            |\n|  1903   | CHECK PASSENGER ASSOCIATION                     | Error returned if the infant association is invalid                                                             |\n|  37659  | INVALID TEMPORARY ID                            | Error returned when temporary id given in input is not unique                                                   |\n|  36865  | INVALID TRAVELER ID                             | Error returned if an invalid traveler id is given in input                                                      |\n|  37383  | UNABLE TO ADD/UPDATE SERVICE                    | Error returned when trying to add a service for a traveller who is not associated to an offer                   |\n|  38760  | UNABLE TO DELETE TRAVELERS FOR CART CONSISTENCY | Error returned when trying to delete a traveler from cart while change number in party feature is not activated |\n|  37563  | UNABLE TO ADD SEAT(S) TO  CART                  | Error returned when trying to add a seat for a traveller who is not associated to an offer                      |\n|  38140  | UNABLE TO DELETE FREQUENT FLYER CARDS           | Error returned when trying to delete a frequent flyer card from the cart while it is associated to an air offer |\n|  38273  | INVALID REGULATORY REQUEST ID                   | Error returned when trying to switch the Regulatory details between travelers in one Shot Update                |\n|  38919  | FOID NOT CREATED - DUPLICATE EXISTS             | Error returned In case user violates one Form of identication details per passenger per airline rule            |\n|  38296  | INVALID FOID ID                                 | Error returned in case of trying to update a Form of identication details which doesn't exist in cart           |\n|  3420   | MODIFICATIONS RESTRICTED                        | Error returned when an element in the cart cannot be modified                                                   |\n|  38278  | INVALID ADDRESS ID                              | Error returned when an invalid address reference ID is provided in input                                        |\n|  38277  | INVALID REGULATORY DOCUMENT ID                  | Error returned in case of an invalid regulatory document reference ID is provided in input                      |\n|  38849  | UNABLE TO MODIFY APIS REQUESTS                  | Error returned when reference id is used to update an existing resource in the cart                             |\n|  40413  | INVALID INFANT ASSOCIATION                      | Error returned when accompanying traveler of the infant does not exist                                          |\n|  39373  | UNABLE TO UPDATE SERVICES AND SEATS PRICES      | Error returned when ancillary pricing has failed.                                                               |\n|  04926  | INVALID DATA RECEIVED                           | Error returned when airOfferId is sent with other fields in input.                                              |\n|  04926  | INVALID DATA RECEIVED                           | Error returned when air bound IDs is sent in input.                                                             |\n|  38775  | UNABLE TO RETRIEVE OFFER                        | Error returned when the application could not retrieve the new air offer in input                                      |\n",
            "schema": {
              "$ref": "#/definitions/CartReply"
            }
          },
          "400": {
            "description": "Bad request\nErrors that can be returned by the application:\n\n|  Code   |            Title             | Description                                                              |\n|:-------:|:----------------------------:|--------------------------------------------------------------------------|\n|  04926  | INVALID DATA RECEIVED        | It depends on the error, Mandatory field missing, Bad format,etc.        |\n|  3126   | DUPLICATE ID                 | Error returned when an element with an id is duplicated in the request   |\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Not Found\nErrors that can be returned by the application:\n\n|  Code   |              Title                   | Description                                                     |\n|:-------:|:------------------------------------:|-----------------------------------------------------------------|\n|  36798  | CART NOT FOUND                       | Error returned when no cart was found for the provided cart id  |\n|  38276  | UNABLE TO CREATE APIS REQUESTS       | Error returned when APIS could not be added to cart             |\n|  36890  | TRAVELER NOT FOUND                   | Error returned when traveler id does not exist                  |\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "500": {
            "description": "Other Error\nErrors that can be returned by the application:\n\n|  Code   |        Title         | Description                                            |\n|:-------:|:--------------------:|--------------------------------------------------------|\n|  11     | UNABLE TO PROCESS    | Error returned in case of a technical failure          |\n|  5042   | SYSTEM ERROR         | Error returned in case of internal system error        |\n|  27565  | ENTRY NOT AUTHORIZED | Error returned in case of invalid office configuration |\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/shopping/carts/{cartId}/travelers": {
      "post": {
        "tags": [
          "Cart"
        ],
        "operationId": "createTravelersInCart",
        "summary": "Create one or several travelers(s)",
        "description": "Create one or several travelers(s), i.e. individual traveling, and add them to a given cart.\nDictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).\n",
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "$ref": "#/parameters/includeWaitlist"
          },
          {
            "name": "postTravelersBody",
            "description": "Array of travelers",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Traveler"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TravelersListInCartReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Cart"
        ],
        "operationId": "patchTravelersInCart",
        "summary": "Partial update of travelers",
        "description": "Update one or more fields associated to the travelers in a cart.\nDictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).\n",
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "$ref": "#/parameters/includeWaitlist"
          },
          {
            "name": "patchTravelersBody",
            "description": "Array of travelers",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Traveler"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TravelersListInCartReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "get": {
        "tags": [
          "Cart"
        ],
        "summary": "Retrieve all travelers from a cart",
        "description": "Retrieve all travelers from a Cart based on cart id.\nDictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).\n",
        "operationId": "retrieveTravelersFromCart",
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TravelersListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "delete": {
        "summary": "Remove travelers from a cart",
        "description": "Delete travelers from a cart. A traveler associated to an offer can not be deleted.",
        "operationId": "deleteTravelersFromCart",
        "tags": [
          "Cart"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "name": "travelerIds",
            "description": "List of travelers to delete from a cart",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "[a-zA-Z0-9-]{1,20}",
              "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
            },
            "collectionFormat": "csv"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "$ref": "#/parameters/includeWaitlist"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete success with details",
            "schema": {
              "$ref": "#/definitions/TravelersListInCartDeleteReply"
            }
          },
          "204": {
            "description": "No content"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/shopping/carts/{cartId}/travelers/{travelerId}": {
      "get": {
        "tags": [
          "Cart"
        ],
        "summary": "Retrieve a specific traveler from a cart",
        "description": "Retrieve a traveler from a Cart based on its id.\nDictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).\n",
        "operationId": "retrieveTravelerFromCart",
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/travelerId"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TravelerReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "patch": {
        "summary": "Partial update of a traveler",
        "description": "Update one or more attributes of a traveler in a cart. The passenger type code (PTC) of a traveler associated to an offer can not be modified.\nDictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).\n",
        "operationId": "patchTravelerInCart",
        "tags": [
          "Cart"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/travelerId"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "$ref": "#/parameters/includeWaitlist"
          },
          {
            "name": "patchTravelerBody",
            "in": "body",
            "description": "traveler details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Traveler"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TravelerInCartReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a traveler.",
        "description": "Delete a traveler from a cart. A traveler associated to an offer can not be deleted.\nPlease consider that all sub-resources (i.e. Contacts, Frequent Flyer, etc.) associated to the traveler will be removed from cart as well.\n",
        "operationId": "deleteTravelerFromCart",
        "tags": [
          "Cart"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/travelerId"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "$ref": "#/parameters/includeWaitlist"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete success with details",
            "schema": {
              "$ref": "#/definitions/TravelerInCartDeleteReply"
            }
          },
          "204": {
            "description": "No content"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/shopping/carts/{cartId}/form-of-identification-details": {
      "get": {
        "tags": [
          "Cart"
        ],
        "summary": "Retrieve FOID data from a cart",
        "description": "Retrieve Form of Identification data for a specific traveler from a cart.\nThe data can contain a regulatory document or a frequent flyer card (payment card is not yet available).\nFor more information on the Form of identification details, please see the page [FOID documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/foid.html#/IdentificationType/get_).\n",
        "operationId": "retrieveFOIDsFromCart",
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FormOfIdentificationDetailListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Cart"
        ],
        "summary": "Add FOID information in the cart.",
        "description": "Add some Form of identification details (regulatory document or frequent flyer) in the cart for a list of travelers.\nThe payment card is currently not available to be stored in the cart.\nFor more information on the Form of identification details, please see the page [FOID documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/foid.html#/IdentificationType/get_).\n",
        "operationId": "addFOIDsToCart",
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "name": "postFOIDsBody",
            "description": "FOID(s) to create",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FormOfIdentificationDetail"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FormOfIdentificationDetailListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Cart"
        ],
        "summary": "Update FOID information in the cart.",
        "description": "Update the form of identification details (regulatory document or frequent flyer) in the cart for a list of travelers\nThe payment card is currently not available to be stored in the cart.\nFor more information on the Form of identification details, please see the page [FOID documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/foid.html#/IdentificationType/get_).\n",
        "operationId": "updateFOIDsInCart",
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "name": "patchFOIDsBody",
            "description": "FOID(s) to replace",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FormOfIdentificationDetail"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FormOfIdentificationDetailListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete FOID(s) from the cart.",
        "description": "Delete the given Form of Identification from the cart",
        "operationId": "deleteFOIDsFromCart",
        "tags": [
          "Cart"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "name": "formOfIdentificationDetailIds",
            "description": "FOID to delete from the order",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "[a-zA-Z0-9-]{1,20}",
              "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
            },
            "collectionFormat": "csv"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/shopping/carts/{cartId}/form-of-identification-details/{formOfIdentificationDetailId}": {
      "get": {
        "tags": [
          "Cart"
        ],
        "summary": "Retrieve FOID data from a cart based on its id.",
        "description": "Retrieve Form of Identification data from a cart.\nThe data can contain a regulatory document or a frequent flyer card (the payment card is currently not available to be stored in the cart).\nFor more information on the Form of identification details, please see the page [FOID documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/foid.html#/IdentificationType/get_).\n",
        "operationId": "retrieveFOIDFromCart",
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "$ref": "#/parameters/formOfIdentificationDetailId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FormOfIdentificationDetailListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Cart"
        ],
        "summary": "Update FOID information in the cart.",
        "description": "Update the details for the given form of identification (regulatory document or frequent flyer) in the cart.\nThe payment card is currently not available to be stored in the cart.\nFor more information on the Form of identification details, please see the page [FOID documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/foid.html#/IdentificationType/get_).\n",
        "operationId": "updateFOIDInCart",
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "$ref": "#/parameters/formOfIdentificationDetailId"
          },
          {
            "name": "patchFOIDBody",
            "description": "FOID(s) to replace",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/FormOfIdentificationDetail"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FormOfIdentificationDetailListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete FOID(s) from the cart.",
        "description": "Delete the given Form of Identification from the cart based on its id.\nFor more information on the Form of identification details, please see the page [FOID documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/foid.html#/IdentificationType/get_).\n",
        "operationId": "deleteFOIDFromCart",
        "tags": [
          "Cart"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "$ref": "#/parameters/formOfIdentificationDetailId"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/shopping/carts/{cartId}/travelers/{travelerId}/regulatory-details": {
      "get": {
        "tags": [
          "Cart"
        ],
        "summary": "Retrieve regulatory data for a specific traveler from a Cart",
        "description": "Retrieve Advance Passenger Information data for a specific traveler from a Cart.\nThe data can contain a regulatory documents or an addresses.\n",
        "operationId": "retrieveRegulatoryDetailsFromCart",
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/travelerId"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RegulatoryApisDetailListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Cart"
        ],
        "summary": "Add regulatory information in the Cart.",
        "description": "Add some Advance Passenger Information details (regulatory documents or addresses) in the Cart for a given traveler.\n",
        "operationId": "addAPISsToCart",
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "$ref": "#/parameters/travelerId"
          },
          {
            "name": "postAPISBody",
            "description": "APIS(s) to create",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RegulatoryApisDetail"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RegulatoryApisDetailListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Cart"
        ],
        "summary": "Update regulatory information in the Cart.",
        "description": "Update the Advance Passenger Information details (regulatory documents or addresses) in the Cart for a given traveler.\n",
        "operationId": "updateAPISsInCart",
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "$ref": "#/parameters/travelerId"
          },
          {
            "name": "patchAPISBody",
            "description": "APIS to replace",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RegulatoryApisDetail"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RegulatoryApisDetailListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete regulatory information from the Cart.",
        "description": "Delete the given Advance Passenger Information (regulatory document or address) from the Cart for the given traveler.",
        "operationId": "deleteAPISsFromCart",
        "tags": [
          "Cart"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/travelerId"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "name": "regulatoryApisDetailIds",
            "description": "Regulatory information ID to delete from the Cart",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "[a-zA-Z0-9-]{1,20}"
            },
            "collectionFormat": "csv"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/shopping/carts/{cartId}/travelers/{travelerId}/regulatory-details/{regulatoryApisDetailId}": {
      "get": {
        "tags": [
          "Cart"
        ],
        "summary": "Retrieve a specific regulatory information for a specific traveler from a Cart",
        "description": "Retrieve specific regulatory details for Advance Passenger Information for a specific traveler from a Cart.\nThe data can contain a regulatory document or an address.\n",
        "operationId": "retrieveAPISFromCart",
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/travelerId"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "$ref": "#/parameters/regulatoryApisDetailId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RegulatoryApisDetailListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Cart"
        ],
        "summary": "Update regulatory information in the Cart.",
        "description": "Update specific regulatory details for Advance Passenger Information (regulatory document or address) in the Cart for a given traveler.\n",
        "operationId": "updateAPISInCart",
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "$ref": "#/parameters/travelerId"
          },
          {
            "$ref": "#/parameters/regulatoryApisDetailId"
          },
          {
            "name": "patchAPISBody",
            "description": "APIS(s) to replace",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegulatoryApisDetail"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RegulatoryApisDetailListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete regulatory from the cart.",
        "description": "Delete specific regulatory details for Advance Passenger Information data from the Cart for the given traveler.",
        "operationId": "deleteAPISFromCart",
        "tags": [
          "Cart"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/travelerId"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "$ref": "#/parameters/regulatoryApisDetailId"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/shopping/carts/{cartId}/contacts": {
      "post": {
        "tags": [
          "Cart"
        ],
        "operationId": "createContactsInCart",
        "summary": "Add contact information to a cart",
        "description": "Add contact to the cart.\nThere are three types of contact: phone, email and address.\nFor more information on a specific type of contact, please see the page [Contacts documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/contacts.html#/ContactType/get_).\nDictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).\n",
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "name": "postContactsBody",
            "description": "contact data information",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Contact"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ContactsListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Cart"
        ],
        "operationId": "patchContactsInCart",
        "summary": "Partial update of the contacts",
        "description": "Update one or more fields associated to the contacts in a cart.\nThere are three types of contact: phone, email and address.\nFor more information on a specific type of contact, please see the page [Contacts documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/contacts.html#/ContactType/get_).\nDictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).\n",
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "name": "patchContactsBody",
            "description": "contact data information",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Contact"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ContactsListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "get": {
        "tags": [
          "Cart"
        ],
        "summary": "Retrieve contact information",
        "description": "Retrieve a list of contacts for a cart based on the cart id.\nThere are three types of contact: phone, email and address.\nFor more information on a specific type of contact, please see the page [Contacts documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/contacts.html#/ContactType/get_).\nDictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).\n",
        "operationId": "retrieveContactsFromCart",
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ContactsListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "delete": {
        "summary": "Remove contacts from a cart",
        "description": "Delete contacts from a cart.",
        "operationId": "deleteContactsFromCart",
        "tags": [
          "Cart"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "name": "contactIds",
            "description": "List of contacts to delete from a cart.",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "[a-zA-Z0-9-]{1,20}",
              "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
            },
            "collectionFormat": "csv"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/shopping/carts/{cartId}/contacts/{contactId}": {
      "get": {
        "tags": [
          "Cart"
        ],
        "summary": "Retrieve contact information",
        "description": "Retrieve contact information from a cart based on its id.\nThere are three types of contact: phone, email and address.\nFor more information on a specific type of contact, please see the page [Contacts documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/contacts.html#/ContactType/get_).\nDictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).\n",
        "operationId": "retrieveContactFromCart",
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/contactId"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ContactReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "patch": {
        "summary": "Partial update of a contact",
        "description": "Update one or more fields associated to a contact in a cart.\nThere are three types of contact: phone, email and address.\nFor more information on a specific type of contact, please see the page [Contacts documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/contacts.html#/ContactType/get_).\nDictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).\n",
        "operationId": "patchContactInCart",
        "tags": [
          "Cart"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/contactId"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "name": "patchContactBody",
            "in": "body",
            "description": "contact details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ContactReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a contact",
        "description": "Delete a contact from a cart.",
        "operationId": "deleteContactFromCart",
        "tags": [
          "Cart"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/contactId"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/shopping/carts/{cartId}/frequent-flyer-cards": {
      "post": {
        "tags": [
          "Cart"
        ],
        "operationId": "createFrequentFlyerCardsInCart",
        "summary": "Add frequent flyer cards information to a cart",
        "description": "Add frequent flyer cards to the cart.",
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "name": "postFrequentFlyerCardsBody",
            "description": "add frequent flyers cards data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FrequentFlyerCard"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/FrequentFlyerCardsListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Cart"
        ],
        "operationId": "patchFrequentFlyerCardsInCart",
        "summary": "Partial update of frequent flyer cards information",
        "description": "Update one or more fields associated to the frequent flyer cards in a cart. When the Frequent Flyer card is linked to an air-offer, only the information that are not impacting the offer can be updated. Fields not allowed for update in that case:\n  - companyCode\n  - cardNumber\n  - tierLevel\n  - priorityCode",
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "name": "patchFrequentFlyerCardsBody",
            "description": "add frequent flyers cards data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FrequentFlyerCard"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FrequentFlyerCardsListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "get": {
        "tags": [
          "Cart"
        ],
        "summary": "Retrieve frequent flyer cards information.",
        "description": "Retrieve a list of frequent flyer cards from a cart based on the cart id.",
        "operationId": "retrieveFrequentFlyerCardsFromCart",
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FrequentFlyerCardsListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "delete": {
        "summary": "Remove frequent flyer cards from a cart",
        "description": "Delete frequent flyer cards from a cart. Frequent Flyer cards associated to an air-offer cannot be deleted separately from that offer.",
        "operationId": "deleteFrequentFlyerCardsFromCart",
        "tags": [
          "Cart"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "name": "frequentFlyerCardIds",
            "description": "List of frequent flyer cards to delete from a cart.",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "[a-zA-Z0-9-]{1,20}",
              "x-risk-personal-data-field": "FREQUENT_FLYER_NUMBER"
            },
            "collectionFormat": "csv"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/shopping/carts/{cartId}/frequent-flyer-cards/{frequentFlyerCardId}": {
      "get": {
        "tags": [
          "Cart"
        ],
        "summary": "Retrieve frequent flyer card information",
        "description": "Retrieve frequent flyer card information from a cart based on its id.",
        "operationId": "retrieveFrequentFlyerCardFromCart",
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/frequentFlyerCardId"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FrequentFlyerCardReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "patch": {
        "summary": "Partial update of a frequent flyer card",
        "description": "Update one or more fields associated to a frequent flyer card in a cart. When the Frequent Flyer card is linked to an air-offer, only the information that are not impacting the offer can be updated. Fields not allowed for update in that case:\n  - companyCode\n  - cardNumber\n  - tierLevel\n  - priorityCode",
        "operationId": "patchFrequentFlyerCardInCart",
        "tags": [
          "Cart"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/frequentFlyerCardId"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "name": "patchFrequentFlyerCardBody",
            "in": "body",
            "description": "frequent flyer card details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FrequentFlyerCard"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FrequentFlyerCardReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a frequent flyer card.",
        "description": "Delete a frequent flyer card from a cart. Frequent Flyer cards associated to an air-offer cannot be deleted separately from that offer",
        "operationId": "deleteFrequentFlyerCardFromCart",
        "tags": [
          "Cart"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/frequentFlyerCardId"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/shopping/carts/{cartId}/extensions": {
      "post": {
        "tags": [
          "Cart"
        ],
        "operationId": "createExtensionsInCart",
        "summary": "Add extensions to a cart",
        "description": "Add extensions to the cart.\n",
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "name": "postExtensionsBody",
            "description": "extensions to create in the cart",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Extension"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ExtensionListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Cart"
        ],
        "summary": "Retrieve all extensions",
        "description": "Retrieve all extensions.\n",
        "operationId": "retrieveExtensionsFromCart",
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lastName"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ExtensionListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Cart"
        ],
        "operationId": "patchExtensionsInCart",
        "summary": "Partial update of extensions",
        "description": "Update one or more fields associated to the extensions in a shopping cart. Only the following fields can be changed: name, content and travellerId association. To remove traveller ID association to an extension, send null value with the travellerId field. Changing extensionType is not allowed. tId and travelerTId fields should not be used for this update request, if sent in the request, it will simply be ignored. Extension Id is only used to identify an existing extension in the cart, the Id itself can not be updated.\nFor more information on the Extensions, please see the page [Extension documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/#/Cart/retrieveExtensionsFromCart).\n",
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "name": "postExtensionsBody",
            "description": "extensions to update in the cart",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Extension"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ExtensionListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "summary": "Remove extensions from a cart",
        "description": "Remove extensions from a cart.",
        "operationId": "deleteExtensions",
        "tags": [
          "Cart"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "name": "extensionIds",
            "description": "List of extension to delete from a cart",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "[a-zA-Z0-9-]{1,20}"
            },
            "collectionFormat": "csv"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/shopping/carts/{cartId}/extensions/{extensionId}": {
      "get": {
        "tags": [
          "Cart"
        ],
        "summary": "Retrieve an extension",
        "description": "",
        "operationId": "retrieveExtensionFromCart",
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/extensionId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ExtensionReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an extension from a cart",
        "description": "Delete an extension from a cart.",
        "operationId": "deleteExtension",
        "tags": [
          "Cart"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/extensionId"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Cart"
        ],
        "operationId": "patchExtensionInCart",
        "summary": "Partial update of an extension",
        "description": "Update one or more fields associated to an extension in a cart. Only the following fields can be changed: name, content and travellerId association. To remove traveller ID association to an extension, send null value with the travellerId field. Changing extensionType is not allowed. tId and travelerTId fields should not be used for this update request and will be ignored if sent in the request. Similarly, the extension Id should only be given in the url to identify the extension to be updated. If it is given in input, it will be ignore.\nFor more information on the Extension details, please see the page [Extension documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/#/Cart/retrieveExtensionFromCart).\n",
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/extensionId"
          },
          {
            "name": "postExtensionBody",
            "description": "an extension to update in the cart",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Extension"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ExtensionReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/shopping/carts/cloning": {
      "post": {
        "tags": [
          "Cart"
        ],
        "operationId": "cloneCart",
        "summary": "Create a new cart from existing order",
        "description": "Create copy of a cart from a given order",
        "parameters": [
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "name": "postCloneCartBody",
            "description": "Cloning of cart from order",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CloneCartRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CartReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/shopping/carts/{cartId}/extensions/transportation-offers": {
      "get": {
        "tags": [
          "Cart"
        ],
        "summary": "Retrieve external transportation offer details stored in a cart",
        "description": "Retrieve external transportation offer details stored in a cart\n",
        "operationId": "retrieveTransportationOffersFromCart",
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ExtensionsTransportationOffersListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Cart"
        ],
        "summary": "Add external transportation offers to the cart",
        "description": "Add external transportation offers to the cart",
        "operationId": "addTransportationOffersToCart",
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "name": "postTransportationOffersToCart",
            "description": "ETD(s) to create",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExtensionsTransportationOffer"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ExtensionsTransportationOffersListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete external transportations from the cart",
        "description": "Delete the given External Transportation Detail from the cart",
        "operationId": "deleteTransportationOffersFromCart",
        "tags": [
          "Cart"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "name": "transportationOfferIds",
            "description": "List of transportation offers ids",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "[a-zA-Z0-9-]{1,20}"
            },
            "collectionFormat": "csv"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/shopping/carts/{cartId}/extensions/transportation-offers/{transportationOfferId}": {
      "get": {
        "tags": [
          "Cart"
        ],
        "summary": "Retrieve an external transportation offer stored in the cart",
        "description": "",
        "operationId": "retrieveTransportationOfferFromCart",
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/transportationOfferId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ExtensionsTransportationOffersListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "delete": {
        "summary": "Remove one or several external transportationOffer from the cart",
        "description": "Remove one or several external transportationOffer from the cart",
        "operationId": "deleteTransportationOfferFromCart",
        "tags": [
          "Cart"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/transportationOfferId"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/shopping/carts/{cartId}/travelers/{travelerId}/entitlement-documents": {
      "post": {
        "tags": [
          "Cart"
        ],
        "summary": "Add entitlement documents for a given traveler in the Cart.",
        "description": "Add entitlement documents in the Cart for a given traveler. An entitlement document identifies a traveler for a certain purpose. Some examples of entitlement document are a resident card, large family card or a student card. For certain markets and countries, these documents will entitle the traveler to a discount in their fare.\n",
        "operationId": "addEntitlementDocumentsToCart",
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "$ref": "#/parameters/travelerId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "name": "postEntitlementDocumentsBody",
            "description": "List of entitlement document(s) to create in Cart",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EntitlementDocument"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EntitlementDocumentsListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Cart"
        ],
        "summary": "Retrieve entitlement documents for a given traveler in the Cart.",
        "description": "Retrieve entitlement documents from the Cart for a given traveler. An entitlement document identifies a traveler for a certain purpose. Some examples of entitlement document are a resident card, large family card or a student card. For certain markets and countries, these documents will entitle the traveler to a discount in their fare.\n",
        "operationId": "retrieveEntitlementDocumentsFromCart",
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "$ref": "#/parameters/travelerId"
          },
          {
            "$ref": "#/parameters/lastName"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EntitlementDocumentsListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete selected entitlement documents from the Cart.",
        "description": "Delete a list of entitlement-documents from the Cart for the given traveler.",
        "operationId": "deleteEntitlementDocumentsFromCart",
        "tags": [
          "Cart"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/travelerId"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "name": "entitlementDocumentIds",
            "description": "List of entitlement document Ids to delete from the Cart",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "[a-zA-Z0-9=]{1,100}"
            },
            "collectionFormat": "csv"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/shopping/carts/{cartId}/travelers/{travelerId}/entitlement-documents/{entitlementDocumentId}": {
      "get": {
        "tags": [
          "Cart"
        ],
        "summary": "Retrieve single entitlement document for a given traveler in the Cart.",
        "description": "Retrieve entitlement documents from the Cart for a given traveler. An entitlement document identifies a traveler for a certain purpose. Some examples of entitlement document are a resident card, large family card or a student card. For certain markets and countries, these documents will entitle the traveler to a discount in their fare.\n",
        "operationId": "retrieveEntitlementDocumentFromCart",
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/travelerId"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "$ref": "#/parameters/entitlementDocumentId"
          },
          {
            "$ref": "#/parameters/lastName"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EntitlementDocumentReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete selected entitlement document from the cart.",
        "description": "Delete specific entitlement document from the Cart for the given traveler",
        "operationId": "deleteEntitlementDocumentFromCart",
        "tags": [
          "Cart"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/travelerId"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/entitlementDocumentId"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/shopping/carts/{cartId}/check-tasks": {
      "get": {
        "tags": [
          "Cart"
        ],
        "operationId": "checkTasks",
        "summary": "Return tasks to perform by the api user based on the cart content and airline business rules",
        "description": "The end point returns through `tasks` configured by airline business rules what data can or should be collected by the API user. The `task` acts as a reminder for the traveler to enter the requested data.\n\nToday, a `task` returns whether a `regulatory details` or an `entitlement document` should be collected by the API user.\n\n**Note:** a task for `regulatory details` is for information purpose. This allows airline to collect some details earlier in the traveler journey. However, the final validation for regulatory documents remains the responsibility of the check-in process provided by the airline Departure Control System (DCS). The check-in application may request additional details or documents.\n\n**Example 1:** the airline configures the business rules to prompt the API user to enter optionally his passport and home address if the traveler flies to the United States Of America (USA).\n\n**Example 2:** the airline configures the business rules to prompt the API user to enter his Spanish Resident Card if the traveler has selected an offer only available to resident of a Spanish island (e.g. Canary Islands)",
        "parameters": [
          {
            "$ref": "#/parameters/cartId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TaskCheckCartReply"
            }
          },
          "400": {
            "description": "Errors that can be returned by the application:\n|  Code   |          Title          | Description                                                       |\n|:-------:|:-----------------------:|-------------------------------------------------------------------|\n|  04926  | INVALID DATA RECEIVED   | Error raised when the request is invalid e.g. Mandatory field missing, Bad format,etc. |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Errors returned by the application:\n|  Code   |           Title          | Description            |\n|:-------:|:------------------------:|------------------------|\n|  40828  | UNABLE TO PROCESS        | Technical error        |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/utilities/currency-conversions": {
      "get": {
        "tags": [
          "Utilities"
        ],
        "summary": "Get basic currency conversion",
        "description": "This entry point allows getting an amount converted from a given currency to an other currency.  To perform a conversion, an origin and a destination currency code are mandatory.  If the amount is not specified, the conversion is done for a amount of 1 unit allowing getting the rate. Exchange rates are returned for the current date. The rate provided is the bankers selling rates (BSR) is provided by IATA consolidated exchange rates (ICER) updated once a day from Monday to Friday.\n",
        "operationId": "getCurrencyConversionDetails",
        "parameters": [
          {
            "$ref": "#/parameters/originCurrencyCode"
          },
          {
            "$ref": "#/parameters/targetCurrencyCode"
          },
          {
            "$ref": "#/parameters/amounts"
          }
        ],
        "responses": {
          "200": {
            "description": "Request to get informative currency conversion.",
            "schema": {
              "$ref": "#/definitions/CurrencyConversionListReply"
            }
          },
          "400": {
            "description": "Bad request Errors or warnings that can be returned by the application:\n|  Code   |           Title                    | Description                                                                         |\n|:-------:|:----------------------------------:|-------------------------------------------------------------------------------------|\n|  39253  | INVALID CURRENCY                   | Invalid currency code that does not exists.                                         |\n|  39334  | INVALID AMOUNT                     | Invalid amount for the given currency or out of limits.                             |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/purchase/vouchers/{voucherId}": {
      "post": {
        "tags": [
          "Vouchers"
        ],
        "operationId": "retrieveVoucher",
        "summary": "Retrieve voucher details",
        "description": "Retrieve the details on a voucher or wallet given:\n   - the voucher or wallet Identifier\n   - the associated verification code (if needed)",
        "parameters": [
          {
            "$ref": "#/parameters/voucherId"
          },
          {
            "name": "voucherRetrieveRequest",
            "in": "body",
            "description": "The verificationCode needed to retrieve the voucher (if provided at creation time)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VoucherRetrieveRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK, Voucher details returned",
            "schema": {
              "$ref": "#/definitions/RetrieveVoucherReply"
            }
          },
          "400": {
            "description": "Bad request\ncode    | title ------- | ------------------------------------- 1       | CHECK FORMAT",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Resource not found\ncode    | title ------- | ------------------------------------- 38828   | VOUCHER NOT FOUND",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "500": {
            "description": "Internal error\ncode    | title ------- | ------------------------------------- 11      | UNABLE TO PROCESS",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/purchase/vouchers/by-emails": {
      "post": {
        "tags": [
          "Vouchers"
        ],
        "operationId": "retrieveWalletByEmail",
        "summary": "Retrieve voucher details",
        "description": "Retrieve the details on a wallet given:\n   - wallet owner's email\n   - the associated verification code (if needed)",
        "parameters": [
          {
            "name": "voucherRetrieveRequest",
            "in": "body",
            "description": "The verificationCode needed to retrieve the voucher (if provided at creation time)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VoucherRetrieveRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK, Voucher details returned",
            "schema": {
              "$ref": "#/definitions/RetrieveVoucherReply"
            }
          },
          "400": {
            "description": "Bad request\ncode    | title ------- | ------------------------------------- 1       | CHECK FORMAT",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Resource not found\ncode    | title ------- | ------------------------------------- 38828   | VOUCHER NOT FOUND",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "500": {
            "description": "Internal error\ncode    | title ------- | ------------------------------------- 11      | UNABLE TO PROCESS",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/search/customer-insights": {
      "post": {
        "summary": "Return customer insights",
        "description": "Enables the retrieval of customer insights id corresponding to data such as customer value, preferred destination etc.",
        "operationId": "customer-insights",
        "tags": [
          "CustomerInsights"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/lang"
          },
          {
            "name": "postCustomerInsightsBody",
            "in": "body",
            "description": "Customer insights details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomersInsightsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CustomersInsightsResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/search/frequent-flyer-profiles": {
      "get": {
        "tags": [
          "FrequentFlyerProfile"
        ],
        "summary": "Get frequent flyer profile information",
        "description": "This entry point allows getting the frequent flyer profile information.\n",
        "operationId": "frequentflyerProfileSearch",
        "parameters": [
          {
            "$ref": "#/parameters/frequentFlyerCardHolderLastName"
          },
          {
            "$ref": "#/parameters/frequentFlyerCardNumber"
          },
          {
            "$ref": "#/parameters/companyCode"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "description": "Profile information for a given frequent flyer card number",
            "schema": {
              "$ref": "#/definitions/FrequentFlyerProfileInformationReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/reference-data/air-routing/iata-ticketed-point-mileage": {
      "post": {
        "summary": "Return IATA ticketed point mileage for one or more air itineraries",
        "description": "Enables the retrieval of the miles distance (IATA ticketed-point-mileage) for one or several air itineraries.",
        "operationId": "airRoutingIataTicketedPointMileage",
        "tags": [
          "ReferenceData"
        ],
        "parameters": [
          {
            "name": "postIataTicketedPointMileageBody",
            "in": "body",
            "description": "List of air itineraries to compute the ticketed point mileage.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AirRoutingRequest"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/IataTicketedPointMileageListReply"
            }
          },
          "207": {
            "description": "Partial success",
            "schema": {
              "$ref": "#/definitions/IataTicketedPointMileageListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/purchase/orders/{orderId}/other-service-informations": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Retrieve OSI elements information",
        "description": "Retrieve a list of OSI for an order based on the order id.\n",
        "operationId": "retrieveOtherServiceInformationsFromOrder",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OtherServiceInformationsListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Add Other Service Information(s) in the order.",
        "description": "Add Other Service Information(s) in the order.\n",
        "operationId": "addOtherServiceInformationsToOrder",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "name": "postOtherServiceInformationsBody",
            "description": "Other Service Information(s) to create",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OtherServiceInformation"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OtherServiceInformationsListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Order"
        ],
        "operationId": "updateOtherServiceInformationsInOrder",
        "summary": "Update OSI in an Order",
        "description": "Update Other Service Informations in the order. This operation allows a partial update of some elements of the list.\n",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "name": "patchOtherServiceInformationsBody",
            "description": "Update several OSI in an Order",
            "in": "body",
            "required": true,
            "schema": {
              "#ref": "#/definitions/OtherServiceInformation",
              "type": "array",
              "items": {
                "$ref": "#/definitions/OtherServiceInformation"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OtherServiceInformationsListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Other Service Information(s) from the order.",
        "description": "Delete Other Service Information(s) from the order.",
        "operationId": "deleteOtherServiceInformationsFromOrder",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "name": "otherServiceInformationIds",
            "description": "List of Other Service Information(s) to delete from the order",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "[a-zA-Z0-9-]{1,20}"
            },
            "collectionFormat": "csv"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/purchase/orders/{orderId}/other-service-informations/{otherServiceInformationId}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Retrieve an OSI element",
        "description": "Retrieve an OSI element from an order based on its id.\n",
        "operationId": "retrieveOtherServiceInformationFromOrder",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/otherServiceInformationId"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OtherServiceInformationReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "patch": {
        "summary": "Update an Other Service Information element (OSI)",
        "description": "Update an Other Service Information in the order.\n\nLimitations:\n- Airline code and passenger association cannot be changed. Only the freetext of the Other Service Information can be updated.\n",
        "operationId": "updateOtherServiceInformationInOrder",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/otherServiceInformationId"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "name": "patchOtherServiceInformationBody",
            "in": "body",
            "description": "Content of the Other Service Information to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OtherServiceInformation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OtherServiceInformationReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an Other Service Information from the order",
        "description": "Delete an Other Service Information from the order.",
        "operationId": "deleteOTherServiceInformationFromOrder",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/otherServiceInformationId"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/purchase/orders/{orderId}/special-keywords": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Retrieve SK information",
        "description": "Retrieve a list of contacts for an order based on the order id.\n",
        "operationId": "retrieveSpecialKeywordsFromOrder",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SpecialKeywordsListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Add Special Keyword(s) in the order.",
        "description": "Add Special Keyword(s) in the order.\n",
        "operationId": "addSpecialKeywordsToOrder",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "name": "postSpecialKeywordsBody",
            "description": "Special Keyword(s) to create",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SpecialKeyword"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SpecialKeywordsListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Special Keyword(s) from the order.",
        "description": "Delete Special Keyword(s) from the order.",
        "operationId": "deleteSpecialKeywordsFromOrder",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "name": "specialKeywordIds",
            "description": "List of Special Keyword(s) to delete from the order",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "[a-zA-Z0-9-]{1,20}"
            },
            "collectionFormat": "csv"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/purchase/orders/{orderId}/special-keywords/{specialKeywordId}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Retrieve SK information",
        "description": "Retrieve an SK information from an order based on its id.\n",
        "operationId": "retrieveSpecialKeywordFromOrder",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/specialKeywordId"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SpecialKeywordReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a Special Keyword from the order",
        "description": "Delete a Special Keyword from the order.",
        "operationId": "deleteSpecialKeywordFromOrder",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/specialKeywordId"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/purchase/orders/{orderId}/hotel-offers": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Add Hotel Offers to the order.",
        "description": "Add Hotel offer(s) (chosen from hotel availability) in the order.\nDictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).\n",
        "operationId": "addHotelsToOrder",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "name": "postHotelsBody",
            "description": "Hotel offers to book",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/PostOrderHotelRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returned in case of successful Hotel Booking process.\nPossible warnings that can be returned by the API:\n|  Code  |           Title                                      | Description                                                                                               |\n|:------:|:----------------------------------------------------:|-----------------------------------------------------------------------------------------------------------|\n|  40208 | UNSUCCESSFUL FORM OF PAYMENT PROCESS                 | Warning returned if there was an issue while adding Form of payment to Merchant Hotel.                    |\n|  37184 | UNABLE TO CREATE A TRAVEL DOCUMENT                   | Warning returned if there was an issue while creating the EMD for the Merchant Hotel.                     |\n|  38126 | UNABLE TO QUEUE                                      | Warning returned if the PNR queuing fails.                                                                |\n|  39731 | HOTEL ISSUANCE IS NOT COMPLETED AS FOP IS MISSING    | Warning returned if Hotel Merchant is to be processed and if no form of payment received in input of API. |\n",
            "schema": {
              "$ref": "#/definitions/HotelItemsListReply"
            }
          },
          "400": {
            "description": "Errors returned by the application:\n|  Code   |           Title                                 | Description                                                                                                                           |\n|:-------:|:-----------------------------------------------:|---------------------------------------------------------------------------------------------------------------------------------------|\n|  39371  | UNABLE TO BOOK HOTEL                            | Error returned if Hotel Booking could not be done.                                                                                    |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Errors returned by the application:\n|  Code   |           Title                                 | Description                                                                                                                           |\n|:-------:|:-----------------------------------------------:|---------------------------------------------------------------------------------------------------------------------------------------|\n|  36894  | ORDER NOT FOUND                                 | Error returned when the order could not be found. The order id or last name might be invalid.                                         |\n|  36962  | LAST NAME SHOULD BE PROVIDED                    | Error returned when passenger name missing.                                                            |\n|  39370  | HOTEL PRICE DISCREPANCY                         | Error returned when price of hotel is different than the one shown in the offer. Hotel is not booked in this case.                    |\n|  39374  | CANCELLATION POLICY DISCREPANCY                 | Error returned when Cancellation policies of hotel is different than the ones shown in the offer. Hotel is not booked in this case.   |\n|  39372  | HOTEL BOOKING FAILED                            | Error returned if Hotel Booking failed on provider side.                                                                              |\n|  40351  | PRICE DOCUMENT CREATION FAILED FOR HOTEL        | Error returned when price document creation failed for the hotel.                                                                     |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "summary": "Remove Hotels from an order. Deprecated. Use POST /purchase/orders/{orderId}/hotel-offers/cancellation.",
        "description": "Delete Hotels from an order.",
        "operationId": "deleteHotelsFromOrder",
        "deprecated": true,
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "name": "ids",
            "description": "List of Hotels to delete from an order.",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^ST[0-9]{1,2}$",
              "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
            },
            "collectionFormat": "csv"
          },
          {
            "$ref": "#/parameters/lang"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/purchase/orders/{orderId}/hotel-offers/cancellation": {
      "post": {
        "summary": "Remove Hotels from an order",
        "description": "Delete Hotels from an order.",
        "operationId": "cancelHotelsFromOrder",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "name": "cancelHotelsBody",
            "description": "Delete Hotels from an order",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/HotelCancelAndRefundRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned in case of successful Hotel deletion.\nPossible warnings that can be returned by the API:\n|  Code   |           Title                 | Description                                                                         |\n|:-------:|:-------------------------------:|-------------------------------------------------------------------------------------|\n|  39633  | HOTEL DELETED BUT REFUND FAILED | Warning returned when merchant hotel well deleted from PNR but related refund failed. |",
            "schema": {
              "$ref": "#/definitions/OrderCancelAndRefundReply"
            }
          },
          "400": {
            "description": "Errors returned by the application:\n|  Code   |           Title                                 | Description                                                                                   |\n|:-------:|:-----------------------------------------------:|-----------------------------------------------------------------------------------------------|\n|  39376  | UNABLE TO DELETE HOTEL                          | Error returned when Hotel cannot be deleted from PNR.                                         |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Errors returned by the application:\n|  Code   |           Title                                 | Description                                                                                   |\n|:-------:|:-----------------------------------------------:|-----------------------------------------------------------------------------------------------|\n|  36894  | ORDER NOT FOUND                                 | Error returned when the order could not be found. The order id or last name might be invalid. |\n|  36962  | LAST NAME SHOULD BE PROVIDED                    | Error returned when passenger name missing.                                                   |\n|  39377  | HOTEL NOT FOUND                                 | Error returned when requested hotel is not found in Order.                                    |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        }
      }
    },
    "/purchase/orders/{orderId}/hotel-cancellation-eligibilities": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Check the eligibility of Hotel refund.",
        "description": "Simulate the refund of hotel product and view the refund price.\nDictionary structure is available on page [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_).\n",
        "operationId": "checkHotelRefundEligibility",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "name": "postHotelsInformativeRefundBody",
            "description": "Hotels to refund informatively. We only handle one hotel for now.",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/HotelCancelAndRefundRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OrderCancelAndRefundEligibilityReply"
            }
          },
          "400": {
            "description": "Errors returned by the application:\n|  Code   |           Title                     | Description                                                        |\n|:-------:|:-----------------------------------:|--------------------------------------------------------------------|\n|  40282  | UNABLE_TO_COMPUTE_REFUND_AMOUNTS    | Generic error raised when the refund price was not computed. |\n                                   ",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Errors returned by the application:\n|  Code   |           Title                 | Description                                                                                   |\n|:-------:|:-------------------------------:|-----------------------------------------------------------------------------------------------|\n|  36894  | ORDER NOT FOUND                 | Error returned when the order could not be found. The order id or last name might be invalid. |\n|  36962  | LAST NAME SHOULD BE PROVIDED    | Error returned when passenger name missing.                                              |\n|  39377  | HOTEL NOT FOUND                 | Error returned when requested hotel is not found in Order.                                    |\n                           ",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/purchase/orders/{orderId}/ticketing-arrangements/replacement": {
      "post": {
        "summary": "Replaces the entire set of ticketing arrangement elements in an order",
        "description": "Replaces the entire set of ticketing arrangement elements in an order.\n",
        "operationId": "replaceTicketingArrangements",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "name": "ticketingArrangementsBody",
            "description": "Ticketing arrangement element data",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TicketingArrangement"
              }
            }
          }
        ],
        "tags": [
          "Order"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TicketingArrangementsListReply"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/purchase/orders/{orderId}/queue-placement": {
      "post": {
        "summary": "Place an order into one or more queues",
        "description": "Place an order into one or more queues\n",
        "operationId": "placeOrderOnQueues",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "name": "QueuePlacementRequestBody",
            "description": "Queue placement details",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/QueuePlacementDetail"
              },
              "maxItems": 9
            }
          }
        ],
        "tags": [
          "Order"
        ],
        "responses": {
          "200": {
            "description": "Possible warnings that can be returned by the API:\n|  Code  |           Title                                      | Description                                                                                               |\n|:------:|:----------------------------------------------------:|-----------------------------------------------------------------------------------------------------------|\n|  38126 | UNABLE TO QUEUE                                      | Warning returned if there was an issue while placing an order into a particular queue.                    |",
            "schema": {
              "$ref": "#/definitions/QueuePlacementReply"
            }
          },
          "404": {
            "description": "Errors returned by the application:\n|  Code   |           Title                                 | Description                                                                                                   |\n|:-------:|:-----------------------------------------------:|---------------------------------------------------------------------------------------------------------------|\n|  36894  | ORDER NOT FOUND                                     | Error returned when the order could not be found. The order id or last name might be invalid.             |\n|  36962  | LAST NAME SHOULD BE PROVIDED                    | Error returned when passenger name missing.                                                                   |",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/purchase/orders/{orderId}/externallyPricedServices": {
      "post": {
        "summary": "Add and manually price a service for its associated passengers",
        "description": "Add and manually price a service for its associated pasengers based on orderId",
        "operationId": "externallyPricedServices",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/lastName"
          },
          {
            "$ref": "#/parameters/lang"
          },
          {
            "name": "postExternallyPricedServiceBody",
            "description": "Add and manually price a service for its associated passengers",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PostManualServiceRequest"
              }
            }
          }
        ],
        "tags": [
          "Order"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/OrderServicesReply"
            }
          },
          "400": {
            "description": "** Error Codes **\n\ncode    | title\n------- | -----------------------\n41736   | Error in handling manual pricing of services\n41738   | Manual pricing of services are not allowed\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/purchase/orders/{orderId}/authentication-challenges": {
      "post": {
        "summary": "Initialise Authentication challenge for a given order",
        "description": "Initialise Authentication challenge for a given order\n",
        "operationId": "authenticationChallengeInitiate",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "name": "authenticationChallengeInitialisationBody",
            "description": "Body for the initialisation of Authentication challenge",
            "required": false,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AuthenticationChallengeInitialisationRequest"
            }
          }
        ],
        "tags": [
          "Order"
        ],
        "responses": {
          "200": {
            "description": "OK\n",
            "schema": {
              "$ref": "#/definitions/AuthenticationChallengeInitialisationReply"
            }
          },
          "400": {
            "description": "Bad request\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Not Found\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/purchase/orders/{orderId}/authentication-challenges/{challengeId}/validation": {
      "post": {
        "summary": "Validate Authentication challenge for a given order",
        "description": "Validate Authentication challenge for a given order\n",
        "operationId": "authenticationChallengeValidate",
        "parameters": [
          {
            "$ref": "#/parameters/orderId"
          },
          {
            "$ref": "#/parameters/challengeId"
          },
          {
            "name": "authenticationChallengeValidationBody",
            "description": "Body for the validation of Authentication challenge",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AuthenticationChallengeValidationRequest"
            }
          }
        ],
        "tags": [
          "Order"
        ],
        "responses": {
          "204": {
            "description": "No content\n"
          },
          "400": {
            "description": "Bad request\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "403": {
            "description": "Forbidden\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/purchase/vouchers": {
      "post": {
        "tags": [
          "Vouchers"
        ],
        "operationId": "createVoucher",
        "summary": "Create a new voucher",
        "description": "Create a new voucher based on the provided information. If an amount and a paymentMethod are provided, the voucher is created with an initial amount on it.",
        "parameters": [
          {
            "name": "postVoucherBody",
            "in": "body",
            "description": "Categories, amount, payment details and eligibilities",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VoucherPostRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "'OK, Voucher details returned with the associated voucherId'\n\ncode    | title\n------- | -------------------------------------\n32399   | PAYMENT FAILED\n",
            "schema": {
              "$ref": "#/definitions/RetrieveVoucherReply"
            }
          },
          "400": {
            "description": "Received input with an unexpected format\n\ncode    | title\n------- | -------------------------------------\n1       | CHECK FORMAT\n04926   | INVALID DATA RECEIVED\n3654    | INVALID NUMBER OF DECIMAL POSITIONS\n6323    | INVALID CURRENCY CODE\n37576   | INVALID PAYMENT METHOD\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "500": {
            "description": "Unable to process\n\ncode    | title\n------- | -------------------------------------\n11      | UNABLE TO PROCESS\n33175   | VOUCHER CREATION FAILED\n39074   | VOUCHER CREATION FAILED - AMOUNT STILL AUTHORIZED\n"
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/purchase/vouchers/{voucherId}/top-up": {
      "post": {
        "tags": [
          "Vouchers"
        ],
        "operationId": "topUpVoucher",
        "summary": "Top-up money on a voucher",
        "description": "Top-up additional amount on a given voucher.\nIn order to top-up money:\n- Voucher should already exist and still be in 'Usable' status\n- Amount should be in the same currency\n",
        "parameters": [
          {
            "$ref": "#/parameters/voucherId"
          },
          {
            "name": "postVoucherTopUpBody",
            "in": "body",
            "description": "Verification code and payment information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VoucherTopUpRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "'OK, Voucher details returned with the associated voucherId'\n\ncode    | title\n------- | -------------------------------------\n27802   | VOUCHER NOT ACTIVE\n32399   | PAYMENT FAILED\n",
            "schema": {
              "$ref": "#/definitions/RetrieveVoucherReply"
            }
          },
          "400": {
            "description": "Received input with an unexpected format\n\ncode    | title\n------- | -------------------------------------\n1       | CHECK FORMAT\n04926   | INVALID DATA RECEIVED\n3654    | INVALID NUMBER OF DECIMAL POSITIONS\n6323    | INVALID CURRENCY CODE\n37576   | INVALID PAYMENT METHOD\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Resource not found with the received inputs\n\ncode    | title\n------- | -------------------------------------\n38828   | VOUCHER NOT FOUND\n",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "500": {
            "description": "Unable to process\n\ncode    | title\n------- | -------------------------------------\n11      | UNABLE TO PROCESS\n39075   | VOUCHER UPDATE FAILED\n39076   | VOUCHER UPDATE FAILED - AMOUNT STILL AUTHORIZED\n"
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    }
  },
  "definitions": {
    "Acceptance": {
      "type": "object",
      "description": "Acceptance of the item with the list of travelers on flights associated if relevant.\nAn acceptance can be partial if a traveler of the journey is not eligible. In this case the list of accepted travelerd on flight is provided.\nIn case of acceptance for a single FlightTravelerInfo, only isAccepted will be returned.\n",
      "required": [
        "isAccepted"
      ],
      "properties": {
        "isAccepted": {
          "description": "Has this item been accepted, i.e. all travelers on flights inside are accepted.",
          "type": "boolean"
        },
        "isPartial": {
          "description": "Has some of the travelers on flights within this item not accepted",
          "type": "boolean"
        },
        "checkedInJourneyElements": {
          "type": "array",
          "description": "List of JourneyElements in the journey who are checked in (Accepted or StandBy)",
          "items": {
            "$ref": "#/definitions/JourneyElementCommon"
          }
        },
        "notCheckedInJourneyElements": {
          "type": "array",
          "description": "List of JourneyElements in the journey who are not checked in (notAccepted or rejected)",
          "items": {
            "$ref": "#/definitions/JourneyElementCommon"
          }
        },
        "securityQuestionsToAnswer": {
          "type": "array",
          "description": "List of security questions needed to be answered by the travelers before they can be accepted. Questions are set by the airlines within the Departure Control System business rule system. They are returned by the Departure Control System if required when trying to do an acceptance without the `areSecurityQuestionsAnswered` boolean set to true.\n",
          "items": {
            "$ref": "#/definitions/CheckInSecurityQuestion"
          }
        },
        "isEligibleForVoluntaryDeniedBoarding": {
          "type": "boolean",
          "default": false,
          "description": "This field represents the eligibility for the relevant travelers to volunteer for denied boarding on the relevant flights. This is only possible if all travelers are checked in. If not present, assumed to be false"
        },
        "isVoluntaryDeniedBoarding": {
          "type": "boolean",
          "description": "This field represents whether the relevant travelers have volunteered for denied boarding on the relevant flights. If not present, assumed to be unknown/undefined in DCS"
        }
      },
      "x-api-ref": "Acceptance"
    },
    "AcceptanceDictionary": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/JourneyElementDictionary"
        },
        {
          "type": "object",
          "properties": {
            "journeyElement": {
              "type": "object",
              "description": "Journey element information corresponding to a traveler flight id.",
              "additionalProperties": {
                "$ref": "#/definitions/JourneyElement"
              }
            }
          }
        }
      ],
      "x-api-ref": "AcceptanceDictionary"
    },
    "AcceptanceReply": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/Acceptance"
            },
            "dictionaries": {
              "$ref": "#/definitions/AcceptanceDictionary"
            }
          }
        }
      ],
      "x-api-ref": "AcceptanceReply"
    },
    "Account": {
      "type": "object",
      "description": "Container for a customer account e.g. miles, upgrade credits",
      "allOf": [
        {
          "type": "object",
          "properties": {
            "accountId": {
              "type": "string",
              "description": "ID of this account",
              "x-risk-personal-data-field": "FREQUENT_FLYER_NUMBER"
            },
            "travelerId": {
              "type": "string",
              "description": "Traveler to whom this account belongs"
            },
            "accountBalance": {
              "description": "the balance of this account",
              "$ref": "#/definitions/Amount"
            }
          }
        }
      ],
      "x-api-ref": "Account"
    },
    "AcknowledgeEligibility": {
      "description": "Indicates the eligibility to acknowledge a bound that has been reaccommodated after a disruption",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/BoundEligibility"
        },
        {
          "type": "object",
          "properties": {
            "nonEligibilityReasons": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NonEligibilityReason"
              }
            }
          }
        }
      ],
      "x-api-ref": "AcknowledgeEligibility"
    },
    "AcknowledgeOrderEligibility": {
      "description": "Indicates the eligibility to acknowledge a bound changed by the airline.\n3 use cases are supported:  - Disruption - Waitlist confirmation - Seats\nIf the bound cannot be acknowledged by the API, a reason code and title is provided for each use case.\n## Disruption\nThe acknowlegment of disruption is only available for airlines, having contracted the `Digital Disruption Recovery` product.\n\nIn case of disruption, the airline can reaccomodate travelers on new flights. The traveler is then able to acknowledge the changes done by the airline.\nIn case the disruption bound cannot be acknowledged by the API, the following reason code can be mapped:\n| Code  | Title                                            |\n|-------|--------------------------------------------------|\n| 101   | PNR containing no-show segment                   |\n| 201   | Bound is cancelled or partially cancelled.       |\n| 206   | Bound has already been rebooked via SELF channel |\n| 210   | First flight of the bound already departed.      |\n| 213   | Bound already acknowledged.                      |\n| 214   | Connection broken.                               |\n| 39408 | Functionality not enabled                        |\n| 50000 | Functionality is temporarily unavailable         |\n\n## Waitlist confirmation\n      \nIn case of waitlist confirmation, the traveler booked a waitlisted flight. Once  the airline confirms the waitlisted flight for the traveler, the user can acknowledge the confirmation and then pay for the flight just confirmed with his available payment method.\nIn case the disruption bound cannot be acknowledged by the API, the following reason code can be mapped:\n| Code  | Title                                    |\n|-------|------------------------------------------|\n| 50002 | Bound has flown flights.                 |\n| 39408 | Functionality is not enabled             |\n| 50003 | Group booking.                           |\n| 50005 | Invalid flight status.                   |\n| 50004 | No flights for waitlist acknowledgement. |\n\n## Seats\nFor operational reasons, the airline might have to reseat passengers in a flight. For example,  the airline decides to change the seat positions in the aircraft to improve the quality of service  and go from a 3-3-3 to 2-4-2 seat setup. \n\nWhen this happens, the airline tries to reseat the passenger on a new seat: the old seat selection is  updated with a status UN, whereas the new seat automatically assigned by the airline has a KK status  (if any suitable seat has been found). The traveler can then go on an airline application to acknowledge  the seating changes done by the airline.\n\nIn case the seats in the requested bound cannot be acknowledged by the API, the following reason code can be mapped:\n\n| Code  | Title                                    |\n|-------|------------------------------------------|\n| 39408 | Acknowledge seat functionality is not enabled. |\n| 50009 | Group booking. |\n| 50007 | There are no seats with one of the following status: KK, UN. |\n| 50010 | Flight ST1 with acknowledge-able seats is flown |\n| 50008 | Flight ST1 with acknowledge-able seats is not confirmed (TK flight status). |\n| 50012 | Seat(s) have invalid status: UC (for flight ST1). |",
      "type": "object",
      "required": [
        "airBoundId"
      ],
      "properties": {
        "airBoundId": {
          "type": "string",
          "description": "Identifier of the bound"
        },
        "disruption": {
          "$ref": "#/definitions/EligibilityGeneric"
        },
        "waitlistConfirmation": {
          "$ref": "#/definitions/EligibilityGeneric"
        },
        "seats": {
          "$ref": "#/definitions/EligibilityGeneric"
        }
      },
      "x-api-ref": "AcknowledgeOrderEligibility"
    },
    "AcknowledgeReply": {
      "type": "object",
      "description": "Reply containing the acknowledge result. Only warning is returned.",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        }
      ],
      "x-api-ref": "AcknowledgeReply"
    },
    "AcknowledgeRequest": {
      "type": "object",
      "description": "Request to acknowledge per bound",
      "required": [
        "airBoundIds"
      ],
      "properties": {
        "lastName": {
          "type": "string",
          "example": "Holmes",
          "pattern": "^[A-Za-z\\u00C0-\\u1FFF\\u3040-\\uD7AF][A-Za-z\\u00C0-\\u1FFF\\u3040-\\uD7AF\\u2019 \\-.]{0,69}$",
          "x-risk-personal-data-field": "PASSENGER_NAME"
        },
        "airBoundIds": {
          "type": "array",
          "description": "List of airbounds to acknowledge",
          "items": {
            "type": "string",
            "pattern": "[a-zA-Z0-9-]{1,120}"
          }
        }
      },
      "x-api-ref": "AcknowledgeRequest"
    },
    "AdditionalPaymentIndicators": {
      "type": "object",
      "description": "List of different payment indicators. They are used for reporting purposes,  without specific processes on Amadeus side.\nThis object allows the airlines to send specific reporting flags at Payment  and get them back after booking for their internal business needs.",
      "properties": {
        "customSalesProcessingFlag141": {
          "type": "string",
          "description": "SaleIndicator associated to Switch 141.\nThe meaning of the value depends on the airline needs.  However, below are illustrations of commonly used values:\n    - I: Internet Sale Indicator for Online transactions\n    - M: requiredAtAirport waiving for Online transactions",
          "pattern": "^[A-Z]{1}$"
        },
        "externalPspPaymentId": {
          "type": "string",
          "description": "Mapping from switch 151\nPayment transction ID generated on external payment service provider side    "
        }
      },
      "x-api-ref": "AdditionalPaymentIndicators"
    },
    "Address": {
      "type": "object",
      "description": "Address information. Derived from Contact object by polymorphism",
      "allOf": [
        {
          "$ref": "#/definitions/Contact"
        },
        {
          "type": "object",
          "properties": {
            "purpose": {
              "description": "Contact purpose",
              "type": "string",
              "enum": [
                "billing",
                "mailing"
              ]
            },
            "lines": {
              "description": "Line 1 = Street address, Line 2 = Apartment, suite, unit, building, floor, etc",
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "[a-zA-Z0-9 ]{1,70}"
              },
              "maxItems": 2,
              "minItems": 1,
              "x-risk-personal-data-field": "ADDRESS"
            },
            "companyName": {
              "type": "string",
              "description": "Name of the company",
              "pattern": "[a-zA-Z -]{1,30}",
              "x-risk-personal-data-field": "ADDRESS"
            },
            "zipCode": {
              "description": "Post office code number",
              "type": "string",
              "pattern": "[a-zA-Z0-9 -]{1,20}",
              "x-risk-personal-data-field": "ADDRESS"
            },
            "countryCode": {
              "type": "string",
              "description": "ISO 3166-1 country code",
              "pattern": "[a-zA-Z0-9]{2}",
              "x-dictionary-name": "country",
              "x-field-name": "country",
              "x-field-type": "string",
              "x-risk-personal-data-field": "ADDRESS"
            },
            "cityName": {
              "type": "string",
              "description": "Localized name of the city",
              "pattern": "[a-zA-Z -]{1,35}",
              "x-risk-personal-data-field": "ADDRESS"
            },
            "stateCode": {
              "description": "State code (two character standard IATA state code)",
              "type": "string",
              "pattern": "[a-zA-Z0-9]{1,2}",
              "x-risk-personal-data-field": "ADDRESS"
            },
            "postalBox": {
              "description": "Postal Office Box",
              "type": "string",
              "pattern": "[a-zA-Z0-9]{1,10}",
              "x-risk-personal-data-field": "ADDRESS"
            }
          },
          "required": [
            "lines"
          ]
        }
      ],
      "x-api-ref": "Address"
    },
    "AddressBase": {
      "type": "object",
      "description": "Base elements forming an address (street address, zip code, city name...)",
      "properties": {
        "lines": {
          "description": "Line 1 = Street address, Line 2 = Apartment, suite, unit, building, floor, etc",
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "[a-zA-Z0-9 ]{1,70}"
          },
          "maxItems": 2,
          "minItems": 1,
          "x-risk-personal-data-field": "ADDRESS"
        },
        "zipCode": {
          "description": "Post office code number",
          "type": "string",
          "pattern": "[a-zA-Z0-9 ]{1,20}",
          "x-risk-personal-data-field": "ADDRESS"
        },
        "countryCode": {
          "type": "string",
          "description": "ISO 3166-1 country code",
          "pattern": "[a-zA-Z0-9]{2}",
          "x-dictionary-name": "country",
          "x-field-name": "country",
          "x-field-type": "string",
          "x-risk-personal-data-field": "ADDRESS"
        },
        "cityName": {
          "type": "string",
          "description": "Localized name of the city",
          "pattern": "[a-zA-Z -]{1,35}",
          "x-risk-personal-data-field": "ADDRESS"
        },
        "stateCode": {
          "description": "State code (two character standard IATA state code)",
          "type": "string",
          "pattern": "[a-zA-Z0-9]{1,2}",
          "x-risk-personal-data-field": "ADDRESS"
        },
        "postalBox": {
          "description": "Postal Office Box",
          "type": "string",
          "pattern": "[a-zA-Z0-9]{1,10}",
          "x-risk-personal-data-field": "ADDRESS"
        },
        "text": {
          "type": "string",
          "description": "Field containing a full unformatted address. Only applicable when the fields lines, postalCode, countryCode, cityName are not filled.",
          "x-risk-personal-data-field": "ADDRESS"
        }
      },
      "required": [
        "lines"
      ],
      "x-api-ref": "AddressBase"
    },
    "AdvancedAirCalendarItinerary": {
      "type": "object",
      "description": "Description of an itinerary subject of an advanced air calendar search",
      "allOf": [
        {
          "$ref": "#/definitions/CommonItinerary"
        },
        {
          "type": "object",
          "properties": {
            "flexibility": {
              "description": "Flexibility in days for the outbound (first flight) or inbound (return). Flexibility = 3 means +/- 3 days. The number of offers for complex itinerary returned is limited, thus recommended value of the flexibility will depend on the number of bounds requested.  For 3 bounds, the recommended flexibility is +/-2, for 4 or 5 bounds recommended flexibility is +/-1 and for 6 bounds no flexibility is allowed. If not specified for 6 bounds, default value of +1 is taken into account.  If not specified in one way, round trip or open jaw, the default value of +/-3 days is taken into account. E.g departure date 13NOV, return date 23NOV and flexibility 3 : the response will contain travel solutions with  [10NOV-16NOV] for departure range and [20NOV-26NOV] for arrival range.",
              "type": "integer",
              "minimum": 1
            },
            "stopOver": {
              "description": "Stop over for the bound.",
              "$ref": "#/definitions/StopOver"
            },
            "commercialFareFamilies": {
              "type": "array",
              "description": "Commercial fare families to be used for the chosen bound. Must not be provided along with commercial fare families for the entire trip at itinerary level.\n",
              "items": {
                "type": "string",
                "pattern": "[a-zA-Z0-9 -]{1,35}"
              },
              "minItems": 1
            },
            "connection": {
              "description": "Connection for the bound",
              "$ref": "#/definitions/Connection"
            },
            "isRequestedBound": {
              "type": "boolean",
              "description": "This defines which bound needs to be kept for the bound-by-bound search, in the given itinerary. In case \"isRequestedBound: true\" corresponding flexibility cannot be 0, it will be defaulted to 3. In case \"isRequestedBound: false\" flexibility selection will not be allowed (therefore no default value defined).\n"
            }
          }
        }
      ],
      "x-api-ref": "AdvancedAirCalendarItinerary"
    },
    "Air": {
      "required": [
        "bound"
      ],
      "properties": {
        "bound": {
          "$ref": "#/definitions/AirBound"
        }
      },
      "x-api-ref": "Air"
    },
    "AirBestPrices": {
      "type": "object",
      "description": "return best price per day in the calendar",
      "allOf": [
        {
          "$ref": "#/definitions/AirCalendarCommon"
        },
        {
          "type": "object",
          "properties": {
            "bounds": {
              "type": "array",
              "description": "Each bound corresponds to a group of flights. A one way trip contains one single bound. A round trip or open jaw trip contains two bounds (outbound and inbound). In calendar mode, flights and services information are not returned",
              "items": {
                "$ref": "#/definitions/BoundFlights"
              }
            },
            "lastTicketingDate": {
              "description": "time limit to issue the ticket for this itinerary",
              "type": "string",
              "format": "date",
              "example": "2016-07-01"
            },
            "themeCodes": {
              "type": "array",
              "description": "theme codes associated to the origin and destination",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ],
      "x-api-ref": "AirBestPrices"
    },
    "AirBestPricesItinerary": {
      "type": "object",
      "description": "Description of an itinerary subject of an air calendar instant search",
      "allOf": [
        {
          "$ref": "#/definitions/CommonItinerary"
        },
        {
          "type": "object",
          "properties": {
            "daysOfWeek": {
              "description": "Specify the days of the week to consider for the search for the current bound. By default, all days are considered",
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "monday",
                  "tuesday",
                  "wednesday",
                  "thursday",
                  "friday",
                  "saturday",
                  "sunday"
                ]
              }
            },
            "additionalLocations": {
              "description": "Additional city pairs to consider for the search. Additional city pairs can not be provided with additional locations.",
              "$ref": "#/definitions/EndPointLocations"
            },
            "additionalCityPairs": {
              "type": "array",
              "description": "Additional locations for either departure or destination for a search returning recommendation for all combinations.\nAdditional locations can not be provided with additional city pairs.\n(e.g. for the origins of PAR and TYO and destinations of BKK and LAX, the result contains recommendations for PAR-BKK, PAR-LAX, TYO-BKK and TYO-LAX)\n",
              "items": {
                "$ref": "#/definitions/CityPair"
              },
              "minItems": 1,
              "maxItems": 50
            }
          }
        }
      ],
      "x-api-ref": "AirBestPricesItinerary"
    },
    "AirBestPricesReply": {
      "type": "object",
      "description": "Returns the best price per day in the calendar",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AirBestPrices"
              }
            },
            "dictionaries": {
              "$ref": "#/definitions/AirCalendarDictionary"
            }
          }
        }
      ],
      "x-api-ref": "AirBestPricesReply"
    },
    "AirBestPricesSearchPreferences": {
      "type": "object",
      "description": "This object contains a list of search preferences to customize search based on user requirements",
      "allOf": [
        {
          "$ref": "#/definitions/AirCalendarCommonSearchPreferences"
        },
        {
          "type": "object",
          "properties": {
            "cheapestPriceInMiles": {
              "description": "This option is available only when displaying the price in miles (Miles and Cash scenario).If set, the cheapest price returned is based on the miles amount, else the amount in cash is taken into account.",
              "type": "boolean",
              "default": false
            },
            "mode": {
              "description": "Specify a specific aggregation mode of the search. If not specified, a standard calendar search by date combination is processed.\nBest By Day : Show the cheapest recommendation per departure date according the range specified and from the specified date\nBest By Month : Show the cheapest recommendation per month\nBest Overall : Show the cheapest recommendation for the given search criteria\nThe bestMyTrip mode is not implemented yet.\n",
              "type": "string",
              "enum": [
                "bestByDay",
                "bestByMonth",
                "bestOverall",
                "bestByTrip"
              ]
            },
            "showPricesPerBound": {
              "description": "If set, prices are also displayed per bound",
              "type": "boolean",
              "default": false
            },
            "showFlightDetails": {
              "description": "If set, flight data is displayed for each bound with the details in the dictionary. If not set, both flight data and fare information are not returned.",
              "type": "boolean",
              "default": true
            },
            "showFareDetails": {
              "description": "If set, fare information is displayed for each recommendation. This option is available only if flight details are displayed.",
              "type": "boolean",
              "default": true
            },
            "showThemes": {
              "description": "If set, theme codes are displayed for each recommendation. In case of theme codes are requested  in input, theme are always returned in output.",
              "type": "boolean",
              "default": false
            },
            "themes": {
              "type": "array",
              "description": "list of theme codes to be taken into account for the search.",
              "items": {
                "type": "string",
                "maxItems": 10
              }
            },
            "themeSearchMode": {
              "type": "string",
              "enum": [
                "matchAll",
                "matchAtLeastOne"
              ],
              "default": "matchAtLeastOne"
            }
          }
        }
      ],
      "x-api-ref": "AirBestPricesSearchPreferences"
    },
    "AirBestPricesSearchRequest": {
      "type": "object",
      "description": "Inputs needed to perform an advanced air calendar search",
      "allOf": [
        {
          "$ref": "#/definitions/AirOffersCommonSearchRequest"
        },
        {
          "type": "object",
          "properties": {
            "itineraries": {
              "type": "array",
              "description": "List of itineraries. One for one-way and two for round-trip.",
              "items": {
                "$ref": "#/definitions/AirBestPricesItinerary"
              }
            },
            "tripDetails": {
              "$ref": "#/definitions/AirBestPricesTripDetails"
            },
            "searchPreferences": {
              "description": "Search preferences are intended to allow user to provide specific options for the search",
              "$ref": "#/definitions/AirBestPricesSearchPreferences"
            }
          }
        }
      ],
      "x-api-ref": "AirBestPricesSearchRequest"
    },
    "AirBestPricesTripDetails": {
      "type": "object",
      "properties": {
        "rangeOfDeparture": {
          "type": "integer",
          "description": "Range of departure in days where the search is processed starting the departure date.",
          "minimum": 1,
          "maximum": 360
        },
        "tripDuration": {
          "type": "integer",
          "description": "Trip duration in days",
          "minimum": 1,
          "maximum": 360
        },
        "durationFlexibility": {
          "description": "Flexibility in days for the trip duration. Flexibility = 3 means +/- 3 days. If not specified, the search is taking into account the duration specified. If a flexibility n is specified, the search of trip recommendations applies to a trip duration from x-n days to x+n days",
          "type": "integer",
          "minimum": 1
        }
      },
      "x-api-ref": "AirBestPricesTripDetails"
    },
    "AirBound": {
      "type": "object",
      "description": "A bound corresponds to one or a group of flights. Only flight reference ids are provided: for the full flight content please refer to the flightDictionary",
      "required": [
        "flights",
        "originLocationCode",
        "destinationLocationCode"
      ],
      "properties": {
        "flights": {
          "description": "Flights, and for each flight, associated services",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FlightItem"
          }
        },
        "originLocationCode": {
          "description": "Departure location (airport code) of the flight bound",
          "type": "string",
          "pattern": "[a-zA-Z]{3}",
          "x-dictionary-name": "location",
          "x-field-name": "originLocation",
          "x-field-type": "LocationDictionaryItem"
        },
        "destinationLocationCode": {
          "description": "Arrival location (airport code) of the flight bound",
          "type": "string",
          "pattern": "[a-zA-Z]{3}",
          "x-dictionary-name": "location",
          "x-field-name": "destinationLocation",
          "x-field-type": "LocationDictionaryItem"
        },
        "duration": {
          "description": "Duration of the entire bound expressed in seconds",
          "type": "integer"
        }
      },
      "x-api-ref": "AirBound"
    },
    "AirBoundExchangeGroup": {
      "type": "object",
      "description": "Group of air bounds associated to a flight proposal.",
      "required": [
        "boundDetails",
        "airBounds"
      ],
      "properties": {
        "boundDetails": {
          "$ref": "#/definitions/BoundFlightDetails"
        },
        "airBounds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AirBoundExchangeItem"
          }
        }
      },
      "x-api-ref": "AirBoundExchangeGroup"
    },
    "AirBoundExchangeItem": {
      "type": "object",
      "description": "The air bound will consist fare family and price information for a given bound offer.",
      "allOf": [
        {
          "$ref": "#/definitions/AirBoundItem"
        },
        {
          "type": "object",
          "properties": {
            "isWaived": {
              "type": "boolean",
              "description": "Indicates if the bound is composed of flights where a waiver has been applied and penalties have been waived (Dynamic Waiver product)."
            }
          }
        }
      ],
      "x-api-ref": "AirBoundExchangeItem"
    },
    "AirBoundExchangeListReply": {
      "type": "object",
      "description": "List of air offers for exchange corresponding to the search criteria",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/AirBoundExchangeListReplyData"
            },
            "dictionaries": {
              "$ref": "#/definitions/AirOfferDictionary"
            }
          }
        }
      ],
      "x-api-ref": "AirBoundExchangeListReply"
    },
    "AirBoundExchangeListReplyData": {
      "type": "object",
      "required": [
        "airBoundExchangeGroups",
        "originalTrip"
      ],
      "properties": {
        "airBoundExchangeGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AirBoundExchangeGroup"
          }
        },
        "originalTrip": {
          "$ref": "#/definitions/OriginalTrip"
        }
      },
      "x-api-ref": "AirBoundExchangeListReplyData"
    },
    "AirBoundExchangesDetailsReply": {
      "type": "object",
      "description": "Returns the broken down prices for the exchange",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/AirBoundExchangesDetailsReplyData"
            },
            "dictionaries": {
              "$ref": "#/definitions/DictionaryCommon"
            }
          }
        }
      ],
      "x-api-ref": "AirBoundExchangesDetailsReply"
    },
    "AirBoundExchangesDetailsReplyData": {
      "type": "object",
      "description": "Returns the detailed price and itinerary data for an exchange",
      "required": [
        "prices",
        "bounds"
      ],
      "properties": {
        "prices": {
          "description": "Prices of the selected bound exchange",
          "$ref": "#/definitions/MultiCurrencyAirPricingRecords"
        },
        "bounds": {
          "type": "array",
          "description": "Each bound corresponds to a group of flights. A one way trip contains one single bound. A round trip or open jaw trip contains two bounds (outbound and inbound)",
          "items": {
            "$ref": "#/definitions/Bound"
          }
        }
      },
      "x-api-ref": "AirBoundExchangesDetailsReplyData"
    },
    "AirBoundExchangesDetailsRequest": {
      "type": "object",
      "description": "Inputs needed to perform a pricing on selected bound for an exchange.",
      "required": [
        "airBoundIds"
      ],
      "properties": {
        "airBoundIds": {
          "type": "array",
          "description": "List of air bounds ids selected following the exchange search.",
          "items": {
            "type": "string"
          }
        }
      },
      "x-api-ref": "AirBoundExchangesDetailsRequest"
    },
    "AirBoundExchangeSearchPreferences": {
      "type": "object",
      "description": "This object contains a list of search preferences to customize search based on user requirements",
      "properties": {
        "showSoldOut": {
          "description": "This is to request sold out flights along with the available ones",
          "type": "boolean",
          "default": false
        },
        "showMilesPrice": {
          "description": "Enables the award converter feature that converts a commercial fare paid in cash into a fare paid in cash and miles",
          "type": "boolean",
          "default": false
        }
      },
      "x-api-ref": "AirBoundExchangeSearchPreferences"
    },
    "AirBoundExchangeSearchRequest": {
      "type": "object",
      "description": "Inputs needed to perform a re-shopping search in construction mode per bound.",
      "required": [
        "orderId"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AirExchangeCommonSearchRequest"
        },
        {
          "type": "object",
          "properties": {
            "itineraries": {
              "type": "array",
              "description": "List of itineraries. It will cover all use cases: one-way (one itinerary) / round-trip (two itineraries), complex / stop-over (multiple itineraries).",
              "items": {
                "$ref": "#/definitions/AirExchangeItinerary"
              }
            },
            "orderId": {
              "type": "string",
              "description": "identifier of the order",
              "minLength": 6,
              "maxLength": 6,
              "x-risk-personal-data-field": "PNR_RECORD_LOCATOR"
            },
            "selectedBoundId": {
              "type": "string",
              "description": "Selected bound from the previous air-bounds search response."
            },
            "searchPreferences": {
              "description": "Search preferences are intended to allow user to provide specific options for the search\n",
              "$ref": "#/definitions/AirBoundExchangeSearchPreferences"
            }
          }
        }
      ],
      "x-api-ref": "AirBoundExchangeSearchRequest"
    },
    "AirBoundGroup": {
      "type": "object",
      "description": "Group of air bounds associated to a flight proposal.",
      "required": [
        "boundDetails",
        "airBounds"
      ],
      "properties": {
        "boundDetails": {
          "$ref": "#/definitions/BoundFlightDetails"
        },
        "airBounds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AirBoundItem"
          }
        }
      },
      "x-api-ref": "AirBoundGroup"
    },
    "AirBoundGroupsListReplyData": {
      "type": "object",
      "description": "List of airBounds corresponding to the search criteria.\nThe air bounds are grouped together with respect to a flight and the associated fares. For example let us consider following air-bounds for outbound LON-MAD, where  Flight F1 is offered for $100 for Economy Flight F1 is offered for $150 for Business Flight F2 is offered for $120 for Economy Flight F2 is offered for $150 for Business  They are grouped together and represented in format F1 -> [Economy: $100, Business: $150]  F2 -> [Economy: $120, Business: $150]\n",
      "properties": {
        "itineraryViewMetrics": {
          "type": "array",
          "description": "It contains the information about number of people watching for each bound (where the bound is  identified by the combination of: originalLocationCode, destinationLocationCode and departureDateTime)\n",
          "items": {
            "$ref": "#/definitions/ItineraryViewMetrics"
          }
        },
        "airBoundGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AirBoundGroup"
          }
        }
      },
      "x-api-ref": "AirBoundGroupsListReplyData"
    },
    "AirBoundItem": {
      "type": "object",
      "description": "The air bound will consist fare family and price information for a given bound offer.",
      "properties": {
        "airBoundId": {
          "type": "string",
          "description": "The unique airbound Id, which will be finally used to select the bound offer and will be used to shop for construction mode shopping."
        },
        "fareFamilyCode": {
          "description": "In case of different fare families returned for the different bounds, it corresponds to the most restrictive fare family for the whole journey",
          "type": "string",
          "x-dictionary-name": "fareFamilyWithServices",
          "x-field-name": "fareFamily",
          "x-field-type": "FareFamilyWithServicesDictionaryItem"
        },
        "isCheapestOffer": {
          "description": "Tag highlighting the airBound leading to the cheapest airOffer (result of the combination of 2 airBounds)",
          "type": "boolean"
        },
        "availabilityDetails": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AvailabilityInfoItem"
          }
        },
        "fareInfos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FareInfo"
          }
        },
        "prices": {
          "$ref": "#/definitions/AirPricingRecords"
        },
        "services": {
          "type": "array",
          "description": "A list of ancillary services available for this AirBound item",
          "items": {
            "$ref": "#/definitions/AirBoundItemService"
          }
        },
        "cheapestAirOffer": {
          "description": "DEPRECATED - To be removed on v3",
          "$ref": "#/definitions/AirBoundsCheapestAiroffer"
        },
        "airOffer": {
          "$ref": "#/definitions/AirBoundsAiroffer"
        },
        "status": {
          "description": "Indicates if the AirBound has a specific status such as soldOut, waitList, etc.",
          "$ref": "#/definitions/Status"
        },
        "fareConditionsCodes": {
          "description": "FareConditionsCode provides a reference to the purchase conditions defined in the dictionary. In case of more than one bound, fare conditions might change between airbound responses.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-dictionary-name": "fareConditions",
          "x-map-name": "fareConditions",
          "x-field-type": "FareConditionsDictionaryItem"
        },
        "isMixedCabin": {
          "description": "Indicates if the bound is composed of flights with different cabin.",
          "type": "boolean"
        },
        "upsell": {
          "description": "Provides differences between a reference bound and the current bound      ",
          "$ref": "#/definitions/UpsellBenefits"
        },
        "shoppingProfileRankings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ShoppingProfileRanking"
          }
        }
      },
      "x-api-ref": "AirBoundItem"
    },
    "AirBoundItemService": {
      "type": "object",
      "description": "Describes an ancillary service available for this AirBound item.",
      "properties": {
        "serviceCode": {
          "type": "string",
          "description": "Service item identifier as defined in the services dictionary",
          "x-dictionary-name": "service",
          "x-field-name": "service",
          "x-field-type": "ServiceDictionaryItem"
        },
        "price": {
          "$ref": "#/definitions/Price",
          "description": "Price details of the service item for 1 Adult (price given for information only)."
        },
        "flightIds": {
          "type": "array",
          "description": "Flight identifiers, as defined in flights dictionary",
          "x-dictionary-name": "flight",
          "x-field-name": "flight",
          "x-field-type": "Flight",
          "pattern": "[a-zA-Z0-9]{1,20}",
          "items": {
            "type": "string"
          }
        }
      },
      "x-api-ref": "AirBoundItemService"
    },
    "AirBoundsAdvancedSearchPreferences": {
      "type": "object",
      "description": "This object contains a list of search preferences to customize search based on user requirements",
      "properties": {
        "showMilesPrice": {
          "description": "Enables the award converter feature that converts a commercial fare paid in cash into a fare paid in cash and miles.",
          "type": "boolean",
          "default": false
        },
        "showSoldOut": {
          "description": "This is to request sold out flights along with the available ones",
          "type": "boolean",
          "default": false
        },
        "includeWaitlist": {
          "description": "Enables to indicate whether the flight is in waitlist or not.",
          "type": "boolean",
          "default": false
        },
        "showUnavailableEntries": {
          "description": "Enables the empty cell feature in air-bounds that allows to receive information about the cause when flights are not available in a certain date",
          "type": "boolean",
          "default": false
        },
        "maxFlightCombinationsPerBound": {
          "description": "Restricts the maximum number of flight combination per bounds. This parameter does not apply if direct flights are requested or only direct flights are available in the requested itinerary",
          "type": "integer",
          "minimum": 1
        },
        "shoppingProfile": {
          "$ref": "#/definitions/ShoppingProfile"
        }
      },
      "x-api-ref": "AirBoundsAdvancedSearchPreferences"
    },
    "AirBoundsAiroffer": {
      "type": "object",
      "description": "Air offer information based on previous and current airBound selection. It allows for example to indicate if the previous selected bound price has changed in respect of the current bound association. Air offer information  will not be populated for non combinable offers indicated using status field with value nonCombinableWithSelectedBound.",
      "properties": {
        "totalPrice": {
          "description": "AirOffer total price.It will be deprecated in v3 as prices property will contain totalPrice also.",
          "$ref": "#/definitions/Amount"
        },
        "prices": {
          "description": "Price Breakup of the offer item. It contains list of totalprices and unitprices which expresses a price per single Traveler type.",
          "$ref": "#/definitions/AirPricingRecords"
        },
        "milesConversion": {
          "description": "Contains information about converted miles and non converted cash when the Award converter or the Miles&Cash slider is used. It will be deprecated in v3 as prices property will contain milesConversion also",
          "type": "object",
          "$ref": "#/definitions/MilesConversion"
        },
        "previousSelectedBound": {
          "description": "Bound details of selection made in previous step.",
          "$ref": "#/definitions/PreviousSelectedBound"
        },
        "shoppingProfileRankings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ShoppingProfileRanking"
          }
        }
      },
      "x-api-ref": "AirBoundsAiroffer"
    },
    "AirBoundsCheapestAiroffer": {
      "type": "object",
      "description": "Cheapest air offer you can get while selecting this bound",
      "properties": {
        "totalPrice": {
          "description": "Best total price you can get while selecting this bound",
          "$ref": "#/definitions/Amount"
        },
        "airOfferId": {
          "description": "Identifier of the cheapest air offer that could be generated while selecting this bound",
          "type": "string"
        }
      },
      "x-api-ref": "AirBoundsCheapestAiroffer"
    },
    "AirBoundsItinerary": {
      "type": "object",
      "description": "Description of an itinerary subject of the air bounds search. It is a bound itinerary. To perform a return journey search, two itineraries will be required, one itinerary for each bound.",
      "allOf": [
        {
          "$ref": "#/definitions/CommonItinerary"
        },
        {
          "type": "object",
          "properties": {
            "commercialFareFamilies": {
              "type": "array",
              "description": "Commercial fare families to be used for the choosen bound. Must not be provided along with commercial fare families for the entire trip at itinerary level.\n",
              "items": {
                "type": "string",
                "pattern": "[a-zA-Z0-9 -]{1,35}"
              },
              "minItems": 1
            },
            "isRequestedBound": {
              "type": "boolean",
              "description": "This defines which bound needs to searched for the bound-by-bound search, in the given itinerary.\n"
            },
            "stopOver": {
              "description": "Stop over for the bound",
              "$ref": "#/definitions/StopOver"
            },
            "connection": {
              "description": "Connection for the bound",
              "$ref": "#/definitions/Connection"
            }
          }
        }
      ],
      "x-api-ref": "AirBoundsItinerary"
    },
    "AirBoundsListReply": {
      "type": "object",
      "description": "List of air bounds corresponding to the search criteria",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/AirBoundGroupsListReplyData"
            },
            "dictionaries": {
              "$ref": "#/definitions/AirOfferDictionary"
            }
          }
        }
      ],
      "x-api-ref": "AirBoundsListReply"
    },
    "AirBoundsSearchRequest": {
      "type": "object",
      "description": "Inputs needed to perform an air bounds search. To perform a round-trip, two itineraries needed, one for each bound without return date.",
      "allOf": [
        {
          "$ref": "#/definitions/AirOffersCommonSearchRequest"
        },
        {
          "type": "object",
          "properties": {
            "itineraries": {
              "type": "array",
              "description": "List of itineraries. It will cover all use cases: one-way (one itinerary) / round-trip (two itineraries), complex / stop-over (multiple itineraries).",
              "items": {
                "$ref": "#/definitions/AirBoundsItinerary"
              }
            },
            "selectedBoundId": {
              "type": "string",
              "description": "Selected bound from the previous air-bounds search response.",
              "pattern": "[a-zA-Z0-9 -]{1,40}"
            },
            "searchPreferences": {
              "description": "Search preferences are intended to allow user to provide specific options for the search\n",
              "$ref": "#/definitions/AirBoundsAdvancedSearchPreferences"
            }
          }
        }
      ],
      "x-api-ref": "AirBoundsSearchRequest"
    },
    "AirCalendar": {
      "type": "object",
      "description": "return best price per day in the calendar",
      "allOf": [
        {
          "$ref": "#/definitions/AirCalendarCommon"
        },
        {
          "type": "object",
          "required": [
            "bounds"
          ],
          "properties": {
            "status": {
              "description": "Indicates if flight solution is unavailable and provides more specific reasons",
              "$ref": "#/definitions/Status"
            },
            "bounds": {
              "type": "array",
              "description": "Each bound corresponds to a group of flights. A one way trip contains one single bound. A round trip or open jaw trip contains two bounds (outbound and inbound). In calendar mode, flights and services information are not returned.The bounds returned in the list are in the same  order as in the requested itinerary.",
              "items": {
                "$ref": "#/definitions/BoundCommon"
              }
            }
          }
        }
      ],
      "x-api-ref": "AirCalendar"
    },
    "AirCalendarAdvancedSearchPreferences": {
      "type": "object",
      "description": "This object contains a list of search preferences to customize search based on user requirements",
      "allOf": [
        {
          "$ref": "#/definitions/AirCalendarCommonSearchPreferences"
        },
        {
          "type": "object",
          "properties": {
            "showUnavailableEntries": {
              "description": "Enables the empty cell feature in calendar that allows to receive information about the cause when flights are not available in a certain date",
              "type": "boolean",
              "default": false
            },
            "includeWaitlist": {
              "description": "Enables to indicate whether the flight is in waitlist or not.",
              "type": "boolean",
              "default": false
            }
          }
        }
      ],
      "x-api-ref": "AirCalendarAdvancedSearchPreferences"
    },
    "AirCalendarAdvancedSearchRequest": {
      "type": "object",
      "description": "Inputs needed to perform an advanced air calendar search",
      "allOf": [
        {
          "$ref": "#/definitions/AirOffersCommonSearchRequest"
        },
        {
          "type": "object",
          "properties": {
            "itineraries": {
              "type": "array",
              "description": "List of itineraries. One for one-way and two for round-trip or open-jaw.",
              "items": {
                "$ref": "#/definitions/AdvancedAirCalendarItinerary"
              },
              "minItems": 1,
              "maxItems": 6
            },
            "searchPreferences": {
              "description": "Search preferences are intended to allow user to provide specific options for the search\n",
              "$ref": "#/definitions/AirCalendarAdvancedSearchPreferences"
            },
            "selectedBoundId": {
              "type": "string",
              "description": "Selected bound from the first step (outbound) of a bound-by-bound search.",
              "pattern": "[a-zA-Z0-9 -]{1,40}"
            }
          }
        }
      ],
      "x-api-ref": "AirCalendarAdvancedSearchRequest"
    },
    "AirCalendarCommon": {
      "type": "object",
      "description": "return best price per day in the calendar",
      "required": [
        "departureDate"
      ],
      "properties": {
        "departureDate": {
          "description": "departure date without timezone (local time)",
          "type": "string",
          "format": "date",
          "example": "2016-07-01"
        },
        "returnDate": {
          "description": "return date without timezone (local time)",
          "type": "string",
          "format": "date",
          "example": "2016-07-01"
        },
        "prices": {
          "description": "best prices for the entry",
          "$ref": "#/definitions/AirPricingRecords"
        },
        "fareInfos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FareInfo"
          }
        },
        "fareFamilyCode": {
          "description": "In case of different fare families returned for the different bounds, it corresponds to the most restrictive fare family for the whole journey",
          "type": "string",
          "x-dictionary-name": "fareFamilyWithServices",
          "x-field-name": "fareFamily",
          "x-field-type": "FareFamilyWithServicesDictionaryItem"
        }
      },
      "x-api-ref": "AirCalendarCommon"
    },
    "AirCalendarCommonSearchPreferences": {
      "type": "object",
      "description": "This object contains a list of search preferences to customize search based on user requirements",
      "properties": {
        "showMilesPrice": {
          "description": "Enables the award converter feature that converts a commercial fare paid in cash into a fare paid in cash and miles",
          "type": "boolean",
          "default": false
        }
      },
      "x-api-ref": "AirCalendarCommonSearchPreferences"
    },
    "AirCalendarDictionary": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/DictionaryCommon"
        },
        {
          "type": "object",
          "properties": {
            "fareFamilyWithServices": {
              "type": "object",
              "description": "Fare families with services map. For more details please see [Maps\nin dictionary\ndocumentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)\n",
              "additionalProperties": {
                "$ref": "#/definitions/FareFamilyWithServicesDictionaryItem"
              }
            },
            "unavailabilityReason": {
              "type": "object",
              "description": "Provides explanations for travel solution unavailability reason codes\n",
              "additionalProperties": {
                "type": "string"
              }
            },
            "service": {
              "type": "object",
              "description": "Services map. For more details please see [Maps in dictionary documentation](http://e-travel.mkt .amadeus.net/digitalapi/swagger-ui/display/documentation.html#!/Maps/get)",
              "additionalProperties": {
                "$ref": "#/definitions/ServiceDictionaryItem"
              }
            }
          }
        }
      ],
      "x-api-ref": "AirCalendarDictionary"
    },
    "AirCalendarReply": {
      "type": "object",
      "description": "Returns the best price per day in the calendar",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AirCalendar"
              }
            },
            "dictionaries": {
              "$ref": "#/definitions/AirCalendarDictionary"
            }
          }
        }
      ],
      "x-api-ref": "AirCalendarReply"
    },
    "AirCommon": {
      "type": "object",
      "description": "Common information to be used by air offer elements",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "offerNdcId": {
          "description": "NDC identifier (for information only)",
          "type": "string"
        },
        "status": {
          "description": "Indicates if the Offer has a specific status such as soldOut, waitList, etc.",
          "$ref": "#/definitions/Status"
        }
      },
      "x-api-ref": "AirCommon"
    },
    "AircraftDictionary": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CountryDictionary"
        },
        {
          "type": "object",
          "properties": {
            "airline": {
              "type": "object",
              "description": "Airlines map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "type": "string"
              }
            },
            "aircraft": {
              "type": "object",
              "description": "Aircrafts map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        }
      ],
      "x-api-ref": "AircraftDictionary"
    },
    "AirExchangeAdvancedSearchTraveler": {
      "type": "object",
      "description": "Object used to define common traveler input for a search",
      "required": [
        "travelerId"
      ],
      "properties": {
        "travelerId": {
          "type": "string",
          "description": "traveler ID associated to the Order"
        },
        "frequentFlyerCards": {
          "type": "array",
          "description": "FrequentFlyer information.  The addition or the modification of frequent flyer information in the order is not supported in an exchange flow.\n",
          "items": {
            "$ref": "#/definitions/SearchFrequentFlyer"
          }
        }
      },
      "x-api-ref": "AirExchangeAdvancedSearchTraveler"
    },
    "AirExchangeCalendar": {
      "type": "object",
      "description": "return best price per day in the calendar",
      "allOf": [
        {
          "$ref": "#/definitions/AirCalendar"
        },
        {
          "type": "object",
          "properties": {
            "isWaived": {
              "type": "boolean",
              "description": "Indicates if the bound is composed of flights where a waiver has been applied and penalties have been waived (Dynamic Waiver product)."
            }
          }
        }
      ],
      "x-api-ref": "AirExchangeCalendar"
    },
    "AirExchangeCalendarAdvancedSearchPreferences": {
      "type": "object",
      "description": "This object contains a list of search preferences to customize search based on user requirements",
      "properties": {
        "showUnavailableEntries": {
          "description": "Enables the empty cell feature in calendar that allows to receive information about the cause when flights are not available in a certain date",
          "type": "boolean",
          "default": false
        }
      },
      "x-api-ref": "AirExchangeCalendarAdvancedSearchPreferences"
    },
    "AirExchangeCalendarAdvancedSearchRequest": {
      "type": "object",
      "description": "Inputs needed to perform an advanced air calendar search",
      "allOf": [
        {
          "$ref": "#/definitions/AirExchangeCommonSearchRequest"
        },
        {
          "type": "object",
          "properties": {
            "itineraries": {
              "type": "array",
              "description": "List of itineraries. One for one-way and two for round-trip.",
              "items": {
                "$ref": "#/definitions/AirExchangeCalendarItinerary"
              }
            },
            "orderId": {
              "type": "string",
              "description": "identifier of the order",
              "minLength": 6,
              "maxLength": 6,
              "x-risk-personal-data-field": "PNR_RECORD_LOCATOR"
            },
            "searchPreferences": {
              "description": "Search preferences are intended to allow user to provide specific options for the search\n",
              "$ref": "#/definitions/AirExchangeCalendarAdvancedSearchPreferences"
            }
          }
        }
      ],
      "x-api-ref": "AirExchangeCalendarAdvancedSearchRequest"
    },
    "AirExchangeCalendarItinerary": {
      "type": "object",
      "description": "Description of an itinerary subject of the new air offer re-shopping search. It is a bound itinerary. To perform a return journey search, a new search for the other bound must be performed. Several operations are supported: - bound change : the new details of the itinerary must be provided with the bound ID to be modified in the order - bound keep   : keep the current bound and display the price, only the bound ID of the bound to be kept must be provided",
      "required": [
        "action"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/CommonItinerary"
        },
        {
          "type": "object",
          "properties": {
            "flexibility": {
              "description": "Flexibility in days for the outbound (first flight) or inbound (return). Flexibility = 3 means +/- 3 days. If not specified the default value of +/-3 days is taken into account. E.g departure date 13NOV, return date 23NOV and flexibility 3 : the response will contain travel solutions with [10NOV-16NOV] for departure range and [20NOV-26NOV] for arrival range.",
              "type": "integer",
              "minimum": 1
            },
            "boundId": {
              "description": "ID of the bound to be considered in the associated Order.\n",
              "type": "string"
            },
            "action": {
              "description": "Action to be done for this bound.\nSeveral operations are supported:\n- Change : Change the bound specified (new date and/or new origin/destination)\n- Keep: Keep the current bound and display the price without any modification\n- Add : Add a bound to an Order\n- Remove : Remove a bound from an Order\n",
              "type": "string",
              "enum": [
                "change",
                "keep",
                "add",
                "remove"
              ]
            }
          }
        }
      ],
      "x-api-ref": "AirExchangeCalendarItinerary"
    },
    "AirExchangeCalendarReply": {
      "type": "object",
      "description": "Returns the best price per day in the calendar",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AirExchangeCalendar"
              }
            },
            "dictionaries": {
              "$ref": "#/definitions/AirCalendarDictionary"
            }
          }
        }
      ],
      "x-api-ref": "AirExchangeCalendarReply"
    },
    "AirExchangeCommonSearchRequest": {
      "type": "object",
      "description": "Common Inputs needed to perform an exchange search",
      "properties": {
        "travelers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AirExchangeAdvancedSearchTraveler"
          }
        },
        "commercialFareFamilies": {
          "type": "array",
          "description": "Commercial fare families that apply to every bound of the itinerary.\n",
          "items": {
            "type": "string",
            "pattern": "[a-zA-Z0-9 -]{1,35}"
          },
          "minItems": 1
        },
        "corporateCodes": {
          "type": "array",
          "description": "Corporate code or corporate name are used for targeting specific corporate fares. The addition or the modification of a corporate code is not supported in an exchange flow",
          "items": {
            "type": "string",
            "pattern": "[a-zA-Z][a-zA-Z0-9]{1,9}|\\d{6}"
          },
          "maxItems": 6
        },
        "currencyCode": {
          "description": "This defines the desired currency. If not specified the used currency is based on the location of the origin.",
          "type": "string",
          "pattern": "[A-Z]{3}"
        },
        "max": {
          "type": "integer",
          "description": "The maximum number of offers to return as long as this value doesn't exceed the limit defined by the airline.\nFewer offers could be returned in the case that there are fewer actual travel proposals than requested value.\n",
          "minimum": 1,
          "example": 50
        },
        "maxPrice": {
          "type": "integer",
          "description": "Maximum total price excluding fees of an offer to be returned as a whole number. Example: if the target maximum price is 140.00, the value to be provided should be 140\nWhen a particular currency is specified in input, the maxPrice value refers to amounts in that currency.\n",
          "minimum": 1
        },
        "frequentFlyer": {
          "description": "FrequentFlyer information.  The addition or the modification of frequent flyer information in the order is not supported in an exchange flow.\n",
          "$ref": "#/definitions/FrequentFlyer"
        },
        "marketingAirlineCodes": {
          "description": "Marketing AirlineCodes requested in shopping request will return recommendations with selected marketing airlinecodes.\n",
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "[A-Z0-9]{2,3}"
          }
        }
      },
      "x-api-ref": "AirExchangeCommonSearchRequest"
    },
    "AirExchangeItinerary": {
      "type": "object",
      "description": "Description of an itinerary subject of the new air offer re-shopping search. It is a bound itinerary. To perform a return journey search, a new search for the other bound must be performed. Several operations are supported: - bound change : change a given bound, the new details of the itinerary must be provided with the bound ID to be modified in the order - bound keep   : keep the current bound and display the price, only the bound ID of the bound to be kept must be provided - bound add    : add a new bound to an Order, the new details of the itinerary must be provided without any bound ID - bound remove : remove a bound to an Order, only the bound ID of the bound to be removed must be provided",
      "required": [
        "action"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/CommonItinerary"
        },
        {
          "type": "object",
          "properties": {
            "boundId": {
              "description": "ID of the bound to be considered in the associated Order.\n",
              "type": "string"
            },
            "action": {
              "description": "Action to be done for this bound.\nSeveral operations are supported:\n- Change : Change the bound specified (new date and/or new origin/destination)\n- Keep: Keep the current bound and display the price without any modification\n- Add : Add a bound to an Order\n- Remove : Remove a bound from an Order\n",
              "type": "string",
              "enum": [
                "change",
                "keep",
                "add",
                "remove"
              ]
            },
            "isRequestedBound": {
              "type": "boolean",
              "description": "This defines which bound needs to searched for the bound-by-bound search, in the given itinerary.\n"
            },
            "connection": {
              "description": "Connection for the bound",
              "$ref": "#/definitions/Connection"
            }
          }
        }
      ],
      "x-api-ref": "AirExchangeItinerary"
    },
    "AirItem": {
      "type": "object",
      "required": [
        "bounds"
      ],
      "properties": {
        "bounds": {
          "type": "array",
          "description": "Each bound corresponds to a group of flights. A one way trip contains one single bound. A round trip or open jaw trip contains two bounds (outbound and inbound)",
          "items": {
            "$ref": "#/definitions/Bound"
          }
        },
        "prices": {
          "$ref": "#/definitions/AirPricingRecords"
        },
        "travelerIds": {
          "type": "array",
          "description": "Air segments are applicable to this traveler or group of travelers. In case of a transaction either cart-free or based on a cart that does not contain travelers, travelers ids are defined in anonymousTraveler dictionary. Otherwise travelers ids are defined in cart",
          "items": {
            "type": "string"
          }
        },
        "fareFamilyCode": {
          "description": "In case of different fare families returned for the different bounds, it corresponds to the most restrictive fare family for the whole journey",
          "type": "string",
          "x-dictionary-name": "fareFamilyWithServices",
          "x-field-name": "fareFamily",
          "x-field-type": "FareFamilyWithServicesDictionaryItem"
        },
        "fareInfos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FareInfo"
          }
        },
        "freeCheckedBaggageAllowanceItems": {
          "description": "Free baggage allowance definitions corresponding to the selected flights",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FreeCheckedBaggageAllowanceItem"
          }
        },
        "frequentFlyerCardId": {
          "description": "Reference to the Frequent Flyer card linked to the air-offer. Available for Miles & Cash only",
          "type": "string",
          "x-risk-personal-data-field": "FREQUENT_FLYER_NUMBER"
        },
        "services": {
          "type": "array",
          "description": "A list of ancillary services available for this Air item",
          "items": {
            "$ref": "#/definitions/AncillaryService"
          }
        },
        "fareConditionsCodes": {
          "description": "FareConditionsCode provides a reference to the purchase conditions defined in the dictionary.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-dictionary-name": "fareConditions",
          "x-map-name": "fareConditions",
          "x-field-type": "FareConditionsDictionaryItem"
        },
        "upsell": {
          "description": "Provides differences between a reference offer and the current offer      ",
          "$ref": "#/definitions/UpsellBenefits"
        },
        "shoppingProfileRankings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ShoppingProfileRanking"
          }
        }
      },
      "x-api-ref": "AirItem"
    },
    "AirOffer": {
      "type": "object",
      "description": "AirOffer containing air and / or services",
      "allOf": [
        {
          "$ref": "#/definitions/AirCommon"
        },
        {
          "type": "object",
          "required": [
            "offerItems"
          ],
          "properties": {
            "isSelectedOffer": {
              "description": "Highlights the offer which is identical to the selected offer when the user requests more flights in complex itinerary search",
              "type": "boolean"
            },
            "offerItems": {
              "type": "array",
              "description": "List of offer items. Only one offer item contains flights (with potentially included services), other offer items contain optional services",
              "items": {
                "$ref": "#/definitions/AirOfferItem"
              }
            }
          }
        }
      ],
      "x-api-ref": "AirOffer"
    },
    "AirOfferAdvancedSearchPreferences": {
      "type": "object",
      "description": "This object contains a list of search preferences to customize search based on user requirements",
      "properties": {
        "showSoldOut": {
          "description": "This is to request sold out flights along with the available ones",
          "type": "boolean",
          "default": false
        },
        "showMilesPrice": {
          "description": "Enables the award converter feature that converts a commercial fare paid in cash into a fare paid in cash and miles",
          "type": "boolean",
          "default": false
        },
        "includeWaitlist": {
          "description": "Enables to indicate whether the flight is in waitlist or not.",
          "type": "boolean",
          "default": false
        },
        "showMoreFlights": {
          "description": "DEPRECATED - To be removed on v3         Parameters to request more flights for an offer in complex itinerary search. This parameter is not allowed in case of a one-way, a round trip or an open jaw search.",
          "$ref": "#/definitions/ShowMoreFlights"
        },
        "showUnavailableEntries": {
          "description": "Enables the empty cell feature in air-offer that allows to receive information about the cause when flights are not available in a certain date",
          "type": "boolean",
          "default": false
        },
        "shoppingProfile": {
          "$ref": "#/definitions/ShoppingProfile"
        }
      },
      "x-api-ref": "AirOfferAdvancedSearchPreferences"
    },
    "AirOfferAdvancedSearchTraveler": {
      "type": "object",
      "description": "Object used to define the travelers in input",
      "allOf": [
        {
          "$ref": "#/definitions/SearchTraveler"
        },
        {
          "type": "object",
          "properties": {
            "discounts": {
              "type": "array",
              "description": "Discount passenger type codes that can be used to biase the air offers pricing",
              "items": {
                "type": "string",
                "pattern": "[a-zA-Z0-9]{2,6}"
              },
              "maxItems": 9
            },
            "customerInsights": {
              "type": "array",
              "description": "Customer insights used for personalization. This information is coming from UI.",
              "items": {
                "$ref": "#/definitions/CustomerInsightsCommon"
              }
            }
          }
        }
      ],
      "x-api-ref": "AirOfferAdvancedSearchTraveler"
    },
    "AirOfferCondition": {
      "type": "object",
      "description": "Fare conditions about refundability, exchangeability, minimum/maximum stay corresponding to passengers and flights being part of the itinerary.\n",
      "properties": {
        "travelerIds": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "[a-zA-Z0-9-]{1,20}"
          },
          "x-dictionary-name": "traveler",
          "x-map-name": "travelers",
          "x-field-type": "Traveler"
        },
        "flightIds": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "[a-zA-Z0-9-]{1,20}"
          },
          "x-dictionary-name": "flight",
          "x-map-name": "flights",
          "x-field-type": "Flight"
        },
        "category": {
          "description": "Category of the condition (i.e.Advance Purchase, Minimum stay, Change conditions, Refund conditions)\n",
          "type": "string",
          "enum": [
            "advancePurchase",
            "minimumStay",
            "maximumStay",
            "change",
            "refund"
          ],
          "x-dictionary-name": "airOfferConditionCategory",
          "x-field-name": "airOfferConditionCategory",
          "x-field-type": "string"
        },
        "situation": {
          "description": "It describes to which part of the trip the condition applies. (i.e. before/after departure, in case of no show, etc.)\n",
          "type": "string",
          "enum": [
            "afterDeparture",
            "beforeDeparture",
            "afterDepartureNoShow",
            "beforeDepartureNoShow"
          ],
          "x-dictionary-name": "airOfferConditionSituation",
          "x-field-name": "airOfferConditionSituation",
          "x-field-type": "string"
        },
        "details": {
          "type": "array",
          "description": "Exhaustive list of details corresponding to the fare condition",
          "items": {
            "$ref": "#/definitions/AirOfferConditionDetails"
          }
        }
      },
      "x-api-ref": "AirOfferCondition"
    },
    "AirOfferConditionDetails": {
      "type": "object",
      "description": "Details of the fare condition in 2 flavors:\n- A ready to use description by default in English. For example: 'The minimal reissue fee is 20 Euros.'\n- Identifier and parameters so that you can build your own description. Few examples:\n\nExamples:\n1) With a localizationParameter (type `AmountParameter`) having value `{\"amount\": \"20\", \"currencyCode\": \"EUR\"}` and a custom template like `There is a ^amount ^currency fee to modify the dates of your LON <-> NCE round trip.`\nyou can build: `There is a 20,00 Euros fee to modify the dates of your LON <-> NCE round trip.`\nNote that the locations, LON and NCE, can be taken from associated flights information.\n\n2) With 2 localizationParameters (type `AmountParameter`) having values `{\"amount\": \"5\", \"currencyCode\": \"USD\"}}` and `{\"amount\": \"10\", \"currencyCode\": \"USD\"}`\n   using a template like `Refund penalty fee are between ^amout1 and ^amount2 USD.` you can obtain this result : `Refund penalty fee are between 5 and 10 USD.`\n\n3) With a localizationParameters (type `BooleanParameter`) having value `false` and your own template `Refund ^isAllowed.`\nyou can build: `Refund not allowed.`\n\n4) With a localizationParameters (type `DateParameter`) having value `2018-11-22` and your own template `Exchange request must be made prior to ^date.`\nyou can build: `Exchange request must be made prior to the 22nd of November.`\n",
      "title": "AirOfferCondition",
      "properties": {
        "localizationParameters": {
          "description": "Parameters to be used to customize your fare condition text templates.\nThey can be of different nature: amount, date, datetime or boolean.\n",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LocalizationParameter",
            "type": "string"
          }
        },
        "descriptionCode": {
          "description": "Code identifying the text template to be used to build the air offer condition text.\nThe template code could be used as reference in a CMS\n",
          "type": "string"
        },
        "defaultDescription": {
          "description": "Default description of the air offer condition. By default it is formatted as below:\n- In English-United Kingdom\n- dateTime format: ISO 8601 see http://www.w3.org/TR/NOTE-datetime.\n- date format: ISO 8601 see http://www.w3.org/TR/NOTE-datetime.\n- amount format: 0.00\n",
          "type": "string"
        }
      },
      "x-api-ref": "AirOfferConditionDetails"
    },
    "AirOfferConditionDetailsDictionaryItem": {
      "type": "object",
      "description": "Exhaustive list of details corresponding to the fare conditions\n",
      "properties": {
        "descriptionCode": {
          "description": "Air offer condition key\n",
          "type": "string"
        },
        "defaultDescription": {
          "description": "Default description of the air offer condition  for the key provided in descriptionCode.\n",
          "type": "string"
        },
        "isAllowed": {
          "description": "If true, this condition will have penalty.\n",
          "type": "boolean"
        },
        "penalty": {
          "$ref": "#/definitions/Penalty"
        }
      },
      "x-api-ref": "AirOfferConditionDetailsDictionaryItem"
    },
    "AirOfferConditionDictionary": {
      "allOf": [
        {
          "$ref": "#/definitions/DictionaryCommon"
        },
        {
          "type": "object",
          "properties": {
            "airOfferConditionCategory": {
              "type": "object",
              "description": "Fare condition category map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "type": "string"
              }
            },
            "airOfferConditionSituation": {
              "type": "object",
              "description": "Fare condition situation map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "type": "string"
              }
            },
            "meal": {
              "type": "object",
              "description": "Status map for meal codes. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        }
      ],
      "x-api-ref": "AirOfferConditionDictionary"
    },
    "AirOfferConditionsReply": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AirOfferCondition"
              }
            },
            "dictionaries": {
              "$ref": "#/definitions/AirOfferConditionDictionary"
            }
          }
        }
      ],
      "x-api-ref": "AirOfferConditionsReply"
    },
    "AirOfferDictionary": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/DictionaryCommon"
        },
        {
          "type": "object",
          "properties": {
            "fareFamilyWithServices": {
              "type": "object",
              "description": "Fare families with services map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "$ref": "#/definitions/FareFamilyWithServicesDictionaryItem"
              }
            },
            "bookingStatus": {
              "type": "object",
              "description": "Status map for offer items. For more details please see [Maps in dictionary documentation] (https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "$ref": "#/definitions/BookingStatusDictionaryItem"
              }
            },
            "fareConditions": {
              "type": "object",
              "description": "FareConditions description. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "$ref": "#/definitions/FareConditionsDictionaryItem"
              }
            },
            "service": {
              "type": "object",
              "description": "Services map. For more details please see [Maps in dictionary documentation](http://e-travel.mkt .amadeus.net/digitalapi/swagger-ui/display/documentation.html#!/Maps/get)",
              "additionalProperties": {
                "$ref": "#/definitions/ServiceDictionaryItem"
              }
            },
            "unavailabilityReason": {
              "type": "object",
              "description": "Provides explanations for travel solution unavailability reason codes\n",
              "additionalProperties": {
                "type": "string"
              }
            },
            "amenities": {
              "type": "object",
              "description": "Amenities description. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "$ref": "#/definitions/AmenitiesDictionaryItem"
              }
            },
            "meal": {
              "type": "object",
              "description": "Status map for meal codes. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        }
      ],
      "x-api-ref": "AirOfferDictionary"
    },
    "AirOfferItem": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AirOfferItemCommon"
        },
        {
          "type": "object",
          "required": [
            "air"
          ],
          "properties": {
            "air": {
              "$ref": "#/definitions/AirItem"
            }
          }
        }
      ],
      "x-api-ref": "AirOfferItem"
    },
    "AirOfferItemCommon": {
      "type": "object",
      "required": [
        "prices",
        "id"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "offerItemNdcId": {
          "description": "NDC identifier (for information only)",
          "type": "string"
        },
        "lastRefreshDateTime": {
          "description": "Date-time of the last revalidation for the the air offer stored in a cart. The revalidation refreshes both fare (prices and price conditions) and availability of an airOffer.",
          "type": "string",
          "format": "date-time",
          "example": "2018-02-10T20:40:00+02:00"
        },
        "lastRefreshStatus": {
          "description": "Status of the air offer stored in a cart in respect of the last revalidation",
          "type": "string",
          "enum": [
            "valid",
            "invalid",
            "unavailable"
          ]
        },
        "prices": {
          "$ref": "#/definitions/AirPricingRecords"
        }
      },
      "x-api-ref": "AirOfferItemCommon"
    },
    "AirOfferItemsPerOfferSelectionRequest": {
      "description": "For a specific, specifies if non mandatory sub-offer items have been selected for purchase by the end user or not\nAn offer item can contain air items and/or a service items.\n",
      "type": "object",
      "allOf": [
        {
          "type": "object",
          "properties": {
            "airOfferId": {
              "type": "string"
            }
          }
        }
      ],
      "x-api-ref": "AirOfferItemsPerOfferSelectionRequest"
    },
    "AirOfferReply": {
      "type": "object",
      "description": "Detail of the air offer corresponding to the id provided in input",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/AirOffer"
            },
            "dictionaries": {
              "$ref": "#/definitions/AirOfferDictionary"
            }
          }
        }
      ],
      "x-api-ref": "AirOfferReply"
    },
    "AirOfferRevalidationRequest": {
      "type": "object",
      "description": "Object used to input the information to be used when revalidating an air offer in a cart.\n",
      "properties": {
        "id": {
          "description": "Identifier of the air-offer sub-resource in cart to be revalidated",
          "type": "string",
          "pattern": "[a-zA-Z0-9-]{1,120}"
        },
        "travelerAirOfferPricingRequests": {
          "type": "array",
          "description": "traveler related pricing options",
          "items": {
            "$ref": "#/definitions/TravelerAirOfferPricingRequest"
          }
        },
        "promotion": {
          "description": "Promotion code and related airline code. When a Promotion is injected and is applied, then the price will be discounted accordingly  and the applied promotion will appear in the Discount dictionary associated.\n",
          "$ref": "#/definitions/Promotion"
        }
      },
      "x-api-ref": "AirOfferRevalidationRequest"
    },
    "AirOffersAdvancedSearchRequest": {
      "type": "object",
      "description": "Inputs needed to perform an advanced air offer search",
      "allOf": [
        {
          "$ref": "#/definitions/AirOffersCommonSearchRequest"
        },
        {
          "type": "object",
          "properties": {
            "itineraries": {
              "type": "array",
              "description": "List of itineraries. It will cover all use cases: one-way / round-trip (one itinerary), complex / stop-over (multiple itineraries). They must be provided in chronological order. Duplicated origin/destination itineraries are accepted if they are compatible with dates order.",
              "items": {
                "$ref": "#/definitions/Itinerary"
              },
              "minItems": 1,
              "maxItems": 6
            },
            "searchPreferences": {
              "description": "Search preferences are intended to allow user to provide specific options for the search\n",
              "$ref": "#/definitions/AirOfferAdvancedSearchPreferences"
            }
          }
        }
      ],
      "x-api-ref": "AirOffersAdvancedSearchRequest"
    },
    "AirOffersAdvancedSearchRequestByOffer": {
      "type": "object",
      "description": "Inputs needed to perform an advanced air offers search by an air offer",
      "required": [
        "travelers",
        "offerPrice",
        "itineraries",
        "source"
      ],
      "properties": {
        "travelers": {
          "type": "array",
          "description": "Travelers being part of the itinerary. Only a maximum of 9 seated passengers can be requested but passengers without seats can be added. Example: 9 ADT can be requested along with 9 INF (infant without seat)\nA maximum of 6 different types of passengers can be requested for the same itinerary. Example: OK request: 2 ADT, 2 INF, 1 CHD, 1 STU, 1 MIL, 1 YTH KO request: 2 ADT, 1 INF, 1 CHD, 1 STU, 1 MIL, 1 YTH, 1 C15 frequentFlyerCards inside this field are not used during shopping calls\n",
          "items": {
            "$ref": "#/definitions/AirOfferAdvancedSearchTraveler"
          },
          "minItems": 1,
          "maxItems": 18
        },
        "commercialFareFamilies": {
          "type": "array",
          "description": "Commercial fare families that apply to every bound of the itinerary. Must not be requested along with departureCommercialFareFamilies and returnCommercialFareFamilies.\n",
          "items": {
            "type": "string",
            "pattern": "[a-zA-Z0-9 -]{1,35}"
          },
          "minItems": 1
        },
        "itineraries": {
          "type": "array",
          "description": "List of itineraries. It will cover all use cases: one-way / round-trip (one itinerary), complex / stop-over (multiple itineraries). They must be provided in chronological order. Duplicated origin/destination itineraries are accepted if they are compatible with dates order.",
          "items": {
            "$ref": "#/definitions/ItinerarySearchRequest"
          },
          "minItems": 1,
          "maxItems": 6
        },
        "offerPrice": {
          "$ref": "#/definitions/Amount"
        },
        "fareOptions": {
          "description": "Fare Options",
          "$ref": "#/definitions/FareOptions"
        },
        "source": {
          "$ref": "#/definitions/SystemSearchRequest"
        }
      },
      "x-api-ref": "AirOffersAdvancedSearchRequestByOffer"
    },
    "AirOffersCommonSearchRequest": {
      "type": "object",
      "description": "Common Inputs needed to perform a search",
      "properties": {
        "travelers": {
          "type": "array",
          "description": "Travelers being part of the itinerary. Only a maximum of 9 seated passengers can be requested but passengers without seats can be added. Example: 9 ADT can be requested along with 9 INF (infant without seat)\nA maximum of 6 different types of passengers can be requested for the same itinerary. Example:  OK request: 2 ADT, 2 INF, 1 CHD, 1 STU, 1 MIL, 1 YTH KO request: 2 ADT, 1 INF, 1 CHD, 1 STU, 1 MIL, 1 YTH, 1 C15\n",
          "items": {
            "$ref": "#/definitions/AirOfferAdvancedSearchTraveler"
          },
          "maxItems": 18
        },
        "commercialFareFamilies": {
          "type": "array",
          "description": "Commercial fare families that apply to every bound of the itinerary. Must not be requested along with departureCommercialFareFamilies and returnCommercialFareFamilies.\n",
          "items": {
            "type": "string",
            "pattern": "[a-zA-Z0-9 -]{1,35}"
          },
          "minItems": 1
        },
        "corporateCodes": {
          "type": "array",
          "description": "Corporate code or corporate name are used for targeting specific corporate fares.",
          "items": {
            "type": "string",
            "pattern": "[a-zA-Z][a-zA-Z0-9]{1,9}|\\d{6}"
          },
          "maxItems": 6
        },
        "currencyCode": {
          "description": "This defines the desired currency. If not specified the used currency is based on the location of the origin.",
          "type": "string",
          "pattern": "[A-Z]{3}"
        },
        "max": {
          "type": "integer",
          "description": "The maximum number of offers to return as long as this value doesn't exceed the limit defined by the airline.\nFewer offers could be returned in the case that there are fewer actual travel proposals than requested value.\n",
          "minimum": 1,
          "example": 50
        },
        "maxPrice": {
          "type": "integer",
          "description": "Maximum total price excluding fees of an offer to be returned as a whole number. Example: if the target maximum price is 140.00, the value to be provided should be 140\nWhen a particular currency is specified in input, the maxPrice value refers to amounts in that currency.\n",
          "minimum": 1
        },
        "promotion": {
          "description": "Promotion code and related airline code. When a Promotion is injected and is applied, then the price will be discounted accordingly and the applied promotion will appear in the Discount dictionary associated.\n",
          "$ref": "#/definitions/Promotion"
        },
        "frequentFlyer": {
          "description": "FrequentFlyer information\n",
          "$ref": "#/definitions/FrequentFlyer"
        }
      },
      "x-api-ref": "AirOffersCommonSearchRequest"
    },
    "AirOfferSelectionRequest": {
      "type": "object",
      "description": "Object used to input the information to be used when adding an air offer or a list of air bounds into a cart.\n",
      "properties": {
        "airOfferId": {
          "type": "string",
          "pattern": "[a-zA-Z0-9-]{1,120}"
        },
        "airBoundIds": {
          "type": "array",
          "description": "List of airbounds to be used as elements composing the offer to be stored in the cart",
          "items": {
            "type": "string",
            "pattern": "[a-zA-Z0-9-]{1,120}"
          }
        },
        "milesSplitId": {
          "type": "string",
          "description": "The id of the one of the miles&cash splits selected from the response of a preceeding call to the miles&cash slider (see entry point GET /payment-methods/miles-payment). The airOfferId (also provided in input) and this miles&cash split id together (if present) are used to create a new air offer and store it in the cart.",
          "pattern": "[a-zA-Z0-9#-]{1,120}"
        },
        "airOfferTravelerSelections": {
          "type": "array",
          "description": "List of associations between travelers described in the offer and existing travelers in the cart",
          "items": {
            "$ref": "#/definitions/AirOfferTravelerSelection"
          }
        }
      },
      "x-api-ref": "AirOfferSelectionRequest"
    },
    "AirOffersInCartReply": {
      "type": "object",
      "description": "List of air offers stored in the cart",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AirOffer"
              }
            },
            "meta": {
              "$ref": "#/definitions/Meta"
            },
            "dictionaries": {
              "$ref": "#/definitions/AirOfferDictionary"
            }
          }
        }
      ],
      "x-api-ref": "AirOffersInCartReply"
    },
    "AirOffersListReply": {
      "type": "object",
      "description": "List of air offers corresponding to the search criteria",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/AirOffersListReplyData"
            },
            "dictionaries": {
              "$ref": "#/definitions/AirOfferDictionary"
            }
          }
        }
      ],
      "x-api-ref": "AirOffersListReply"
    },
    "AirOffersListReplyData": {
      "type": "object",
      "required": [
        "airOffers"
      ],
      "properties": {
        "itineraryViewMetrics": {
          "type": "array",
          "description": "It contains the information about number of people watching for each bound (where the bound is  identified by the combination of: originalLocationCode, destinationLocationCode and departureDateTime)\n",
          "items": {
            "$ref": "#/definitions/ItineraryViewMetrics"
          }
        },
        "airOffers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AirOffer"
          }
        }
      },
      "x-api-ref": "AirOffersListReplyData"
    },
    "AirOffersUpgradeOfferSearchRequest": {
      "type": "object",
      "description": "Inputs needed to perform an upsell from air offer",
      "required": [
        "upsellLevel"
      ],
      "properties": {
        "currencyCode": {
          "description": "This defines the desired currency. If not specified the used currency is based on the location of the origin.",
          "type": "string",
          "pattern": "[A-Z]{3}"
        },
        "max": {
          "type": "integer",
          "description": "The maximum number of offers to return as long as this value doesn't exceed the limit defined by the airline.\nFewer offers could be returned in the case that there are fewer actual travel proposals than requested value.\n",
          "minimum": 1,
          "example": 50
        },
        "maxPrice": {
          "type": "integer",
          "description": "Maximum total price excluding fees of an offer to be returned as a whole number. Example: if the target maximum price is 140.00, the value to be provided should be 140\nWhen a particular currency is specified in input, the maxPrice value refers to amounts in that currency.\n",
          "minimum": 1
        },
        "promotion": {
          "description": "Promotion code and related airline code. When a Promotion is injected and is applied, then the price will be discounted accordingly and the applied promotion will appear in the Discount dictionary associated.\n",
          "$ref": "#/definitions/Promotion"
        },
        "frequentFlyer": {
          "description": "FrequentFlyer information. This field is used to apply a price discount if the airline has defined promocode or discount rules based on frequent flyer data\n",
          "$ref": "#/definitions/FrequentFlyer"
        },
        "searchPreferences": {
          "description": "Search preferences are intended to allow user to provide specific options for the search\n",
          "$ref": "#/definitions/AirOfferAdvancedSearchPreferences"
        },
        "upsellLevel": {
          "description": "Type of upsell.\n",
          "type": "string",
          "enum": [
            "BOUND",
            "ITINERARY"
          ]
        }
      },
      "x-api-ref": "AirOffersUpgradeOfferSearchRequest"
    },
    "AirOfferTravelerSelection": {
      "type": "object",
      "description": "structure to describe the association between travelers listed in the offer and either travelers already stored in the Cart or traveler provided in the same request.",
      "properties": {
        "airOfferTravelerId": {
          "type": "string",
          "description": "Id of the traveler inside the Offer",
          "pattern": "[a-zA-Z0-9-]{1,20}"
        },
        "cartTravelerId": {
          "type": "string",
          "description": "Existing traveler from the cart to be associated with an offer traveler Id",
          "pattern": "[a-zA-Z0-9-]{1,20}",
          "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
        },
        "travelerTId": {
          "type": "string",
          "description": "Temporary (valid only for the transaction timing) traveler id, to be used when adding in a cart a list of travelers and an air offer in the same request.",
          "pattern": "[a-zA-Z0-9-]{1,20}"
        }
      },
      "x-api-ref": "AirOfferTravelerSelection"
    },
    "AirPricingRecords": {
      "type": "object",
      "required": [
        "totalPrices"
      ],
      "description": "It stores the different price breakdowns for Air related resources",
      "properties": {
        "unitPrices": {
          "description": "List of Unit prices, where the UnitPrice expresses a price per single traveler type. It can be expressed in several currencies (cash or miles), thus this list will contain only one element when a single currency is used.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UnitPrice"
          }
        },
        "totalPrices": {
          "description": "List of Total prices.\nIt can be expressed in several currencies (cash or miles), thus this list will contain only one element when a single currency is used.\n",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Price"
          }
        },
        "isRedemption": {
          "description": "Indicates that the fare is a redemption fare, which means a fare targeting redemption classes. Note: In case redemption fare solution needs to be combined with revenue fare or vice versa in bound by bound display, then it is up to the API user to detect which bound is redemption.",
          "type": "boolean"
        },
        "milesConversion": {
          "description": "Contains information about converted miles and non converted cash when the Award converter  or the miles&cash slider (see entry point GET /payment-methods/miles-payment) is used.",
          "type": "object",
          "$ref": "#/definitions/MilesConversion"
        },
        "exchangePrices": {
          "description": "Price amounts related to an exchange (e.g. air exchange)",
          "$ref": "#/definitions/ExchangePriceDetails"
        },
        "milesSplitId": {
          "description": "The id of the one of the miles&cash splits selected from the response of a preceeding call to the miles&cash slider (see entry point GET /payment-methods/miles-payment). The presence of this id implicitly indicates, that the air offer was created using the miles&cash slider.",
          "type": "string"
        },
        "previousSelectionPriceDifference": {
          "$ref": "#/definitions/PreviousSelectedBound",
          "description": "Difference in price between selected offer and the new offer."
        }
      },
      "x-api-ref": "AirPricingRecords"
    },
    "AirPricingRecordsDifference": {
      "type": "object",
      "required": [
        "totalPrices"
      ],
      "description": "Price difference between a base offer/bound and the current offer",
      "properties": {
        "unitPrices": {
          "description": "List of Unit prices, where the UnitPrice expresses a price per single traveler type. It can be expressed in several currencies (cash or miles), thus this list will contain only one element when a single currency is used.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UnitPriceDifference"
          }
        },
        "totalPrices": {
          "description": "List of differences in Total prices.\nIt can be expressed in several currencies (cash or miles), thus this list will contain only one element when a single currency is used.\n",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VariationAmount"
          }
        }
      },
      "x-api-ref": "AirPricingRecordsDifference"
    },
    "AirShoppingMoreFlightsSearchRequest": {
      "type": "object",
      "description": "Inputs needed to perform find more flights",
      "properties": {
        "moreFlightsBoundReference": {
          "type": "integer",
          "description": "The bound for which more flights have to be requested, corresponds to the  index of the bound in the previous search request.\n",
          "minimum": 1,
          "maximum": 6
        },
        "currencyCode": {
          "description": "This defines the desired currency. If not specified the used currency is based on the location of the origin.",
          "type": "string",
          "pattern": "[A-Z]{3}"
        },
        "maxPrice": {
          "type": "integer",
          "description": "Maximum total price excluding fees of an offer to be returned as a whole number. Example: if the target maximum price is 140.00, the value to be provided should be 140\nWhen a particular currency is specified in input, the maxPrice value refers to amounts in that currency.\n",
          "minimum": 1
        },
        "promotion": {
          "description": "Promotion code and related airline code. When a Promotion is injected and is applied, then the price will be discounted accordingly and the applied promotion will appear in the Discount dictionary associated.\n",
          "$ref": "#/definitions/Promotion"
        },
        "frequentFlyer": {
          "description": "FrequentFlyer information\n",
          "$ref": "#/definitions/FrequentFlyer"
        }
      },
      "x-api-ref": "AirShoppingMoreFlightsSearchRequest"
    },
    "AlternativeOffer": {
      "required": [
        "type",
        "id",
        "air"
      ],
      "properties": {
        "type": {
          "type": "string",
          "description": "Will have value alternative-offers "
        },
        "id": {
          "type": "string",
          "description": "The unique identifier of the alternative offer"
        },
        "air": {
          "$ref": "#/definitions/Air"
        }
      },
      "x-api-ref": "AlternativeOffer"
    },
    "AlternativeOfferConfirmationGetJobReply": {
      "type": "object",
      "description": "Reply containing information regarding the alternative offer confirmation asynchronous process",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/AlternativeOfferConfirmationJob"
            },
            "dictionaries": {
              "$ref": "#/definitions/OrderDictionary"
            },
            "included": {
              "$ref": "#/definitions/AlternativeOfferConfirmationJobIncluded"
            }
          }
        }
      ],
      "x-api-ref": "AlternativeOfferConfirmationGetJobReply"
    },
    "AlternativeOfferConfirmationJob": {
      "type": "object",
      "description": "Job details regarding the asynchronous confirmation of the alternative offer.\n      \nThe confirmation has 3 sequential steps: rebooking, reissuance, reacceptance. \nA 'status' indicator for each step is returned as soon as the step started its execution.",
      "required": [
        "id",
        "status"
      ],
      "properties": {
        "id": {
          "description": "Job identifier",
          "type": "string"
        },
        "status": {
          "description": "'inProgress' indicates the job is currently running 'completed' indicates the job has finished successfully.",
          "type": "string",
          "enum": [
            "inProgress",
            "completed"
          ]
        },
        "rebookingStatus": {
          "description": "'inProgress' indicates rebooking is currently underway 'completed' indicates rebooking has finished.",
          "type": "string",
          "enum": [
            "inProgress",
            "completed"
          ]
        },
        "reissuanceStatus": {
          "description": "'inProgress' indicates reissuance is currently underway 'completed' indicates reissuance has finished.",
          "type": "string",
          "enum": [
            "inProgress",
            "completed"
          ]
        },
        "reacceptanceStatus": {
          "description": "'inProgress' indicates reacceptance is currently underway 'completed' indicates reacceptance has finished.",
          "type": "string",
          "enum": [
            "inProgress",
            "completed"
          ]
        }
      },
      "x-api-ref": "AlternativeOfferConfirmationJob"
    },
    "AlternativeOfferConfirmationJobIncluded": {
      "type": "object",
      "properties": {
        "orders": {
          "type": "array",
          "description": "List of orders to include in the reply",
          "items": {
            "$ref": "#/definitions/Order"
          }
        }
      },
      "x-api-ref": "AlternativeOfferConfirmationJobIncluded"
    },
    "AlternativeOfferConfirmationJobReply": {
      "type": "object",
      "description": "Reply containing the job that will process the order update of an order after the confirmation of the new flight selection",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/AlternativeOfferConfirmationJob"
            }
          }
        }
      ],
      "x-api-ref": "AlternativeOfferConfirmationJobReply"
    },
    "AlternativeOfferConfirmationReply": {
      "type": "object",
      "description": "Reply containing the information of an order after the confirmation of the new flight selection after a self re-accommodation",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/Order"
            },
            "dictionaries": {
              "$ref": "#/definitions/OrderDictionary"
            }
          }
        }
      ],
      "x-api-ref": "AlternativeOfferConfirmationReply"
    },
    "AlternativeOfferConfirmationRequest": {
      "type": "object",
      "description": "Request to modify an order with the new flight selection from POST alternative-offers",
      "properties": {
        "lastName": {
          "type": "string",
          "example": "Holmes",
          "pattern": "^[A-Za-z\\u0080-\\u04FF][A-Za-z\\u0080-\\u04FF -.]{1,69}$",
          "x-risk-personal-data-field": "PASSENGER_NAME"
        },
        "alternativeOfferId": {
          "type": "string",
          "description": "Identifier of an alternative offer.\nDeprecated: please use alternativeOfferIds instead.\n"
        },
        "alternativeOfferIds": {
          "type": "array",
          "items": {
            "description": "Identifier of an alternative offer.\n",
            "type": "string"
          }
        }
      },
      "x-api-ref": "AlternativeOfferConfirmationRequest"
    },
    "AlternativeOffersReply": {
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "description": "A list of offers. An offer can contain a combination of flight, hotel, car ...",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AlternativeOffer"
          }
        },
        "dictionaries": {
          "$ref": "#/definitions/FlightDictionary"
        }
      },
      "x-api-ref": "AlternativeOffersReply"
    },
    "AlternativePaymentMethod": {
      "type": "object",
      "description": "Payment is done with AlternativePaymentMethod.\nThe payment can be done with or without redirection, with or without parameters. E.g. \"PayPal\", \"Alipay\" or \"Boleto\".\nThe payment method provides a direct link with payment providers, fully integrated with the order creation and payment.\nDerived from PaymentMethod object by polymorphism. To see the structure, please check [Payment Methods\n documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/payment_methods.html#/PaymentMethods/get_)\n",
      "allOf": [
        {
          "$ref": "#/definitions/PaymentMethod"
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "description": "Name of the Alternative Method of Payment to be used. E.g. 'Boleto'.",
              "type": "string"
            },
            "status": {
              "description": "Payment status of the generated payment record",
              "type": "string",
              "enum": [
                "approved",
                "pending",
                "denied",
                "error"
              ]
            },
            "properties": {
              "type": "object",
              "description": "List of payment properties related to the Alternative Method of Payment. E.g. 'payment needs or not redirection'",
              "$ref": "#/definitions/AlternativePaymentMethodProperties"
            },
            "parameters": {
              "type": "array",
              "description": "List of parameters to be sent in input to pay with Alternative Method of Payment",
              "items": {
                "$ref": "#/definitions/AlternativePaymentMethodParameter"
              }
            }
          }
        }
      ],
      "x-api-ref": "AlternativePaymentMethod"
    },
    "AlternativePaymentMethodParameter": {
      "type": "object",
      "description": "Needed information to be provided for the payment.\n",
      "properties": {
        "key": {
          "description": "Parameter key",
          "type": "string"
        },
        "type": {
          "description": "Parameter type e.g. string, numeric, alphanumeric. Available only for CustomPayment methods.",
          "enum": [
            "string",
            "numeric",
            "alpha",
            "alphanumeric"
          ],
          "type": "string"
        },
        "isMandatory": {
          "description": "Indicates whether the parameter is mandatory or not.",
          "type": "boolean"
        },
        "format": {
          "description": "Regular expression for the value of the parameter.\n",
          "type": "string"
        },
        "value": {
          "description": "Value sent for the parameter",
          "type": "string"
        }
      },
      "x-api-ref": "AlternativePaymentMethodParameter"
    },
    "AlternativePaymentMethodProperties": {
      "type": "object",
      "description": "Contains practical information about the displayed Alternative Payment Method.\n",
      "properties": {
        "needsRedirection": {
          "description": "Boolean value to indicate if the Alternative Payment Method needs web redirection",
          "type": "boolean"
        },
        "isRefundableOnline": {
          "description": "Boolean value to indicate if the Alternative Payment Method is refundable online",
          "type": "boolean"
        },
        "isAsynchronous": {
          "description": "Boolean value to indicate if the Alternative Payment Method  needs asynchronous payment confirmation process. Asynchronous payments do not require calling the API confirmation  endpoint. The Payment Service Provider (PSP) will notify Amadeus  Payment Platform when the payment has been completed, which will  in turn issue the travel documents.",
          "type": "boolean"
        }
      },
      "x-api-ref": "AlternativePaymentMethodProperties"
    },
    "AmenitiesDictionaryItem": {
      "type": "object",
      "description": "List of Amenities\n",
      "properties": {
        "power": {
          "description": "Detailed information on power Amenity.",
          "$ref": "#/definitions/PowerAmenity"
        },
        "seat": {
          "description": "Detailed information on Seat Amenity.",
          "$ref": "#/definitions/AmenitySeat"
        },
        "wifi": {
          "description": "Detailed information on Wifi Amenity.",
          "$ref": "#/definitions/WifiAmenity"
        },
        "entertainments": {
          "type": "array",
          "description": "Detailed information on entertainment amenity.",
          "items": {
            "$ref": "#/definitions/EntertainmentAmenity"
          }
        },
        "food": {
          "description": "Detailed information on Food Amenity.",
          "$ref": "#/definitions/FoodAmenity"
        },
        "beverage": {
          "description": "Detailed information on Beverage Amenity.",
          "$ref": "#/definitions/BeverageAmenity"
        }
      },
      "x-api-ref": "AmenitiesDictionaryItem"
    },
    "AmenitySeat": {
      "type": "object",
      "description": "Details of Seat Amenity\n",
      "properties": {
        "legSpace": {
          "description": "Space between two seats",
          "type": "integer"
        },
        "spaceUnit": {
          "description": "Unit Type\n",
          "type": "string",
          "enum": [
            "CENTIMETERS",
            "INCHES"
          ]
        },
        "tilt": {
          "description": "Flatness of a Seat.NONE indicates it is not available for the specific cabin.\n",
          "type": "string",
          "enum": [
            "NORMAL",
            "FULL_FLAT",
            "ANGLE_FLAT",
            "NONE"
          ]
        },
        "rowLayout": {
          "description": "Describes the layout of the seats within the cabin. For example '242' indicates 2 Left 4 Middle and 2 Right",
          "type": "string"
        }
      },
      "x-api-ref": "AmenitySeat"
    },
    "Amount": {
      "type": "object",
      "description": "Amount expressed as value and currency code.",
      "required": [
        "value",
        "currencyCode"
      ],
      "properties": {
        "value": {
          "description": "Amount value expressed as numerical information.\nThe decimal places are defined at currency level.\ne.g. \"EUR 100.85\" will be represented as `10085`, with the currency `decimalPlaces` = 2.\n",
          "type": "integer",
          "format": "int64",
          "minimum": 0
        },
        "rawValue": {
          "description": "Raw amount value, with the decimal separator.\nFor some content (e.g. Hotel), providers can return prices with more decimals than the decimalPlaces defined for corresponding currency, so amount value has to be rounded. e.g. if hotel provider returns 121.50 HKD, since 'decimalPlaces' = 0 for HKD currency, it is represented as rounded 'value'= 122 and 'rawAmount' = \"121.50\"\n",
          "type": "string"
        },
        "currencyCode": {
          "description": "ISO currency [code](http://www.iso.org/iso/home/standards/currency_codes.htm). It allows accessing the currency dictionary, containing any information related to the currency: in particular `decimalPlaces`  can be used to determine the amount actual value and display. Example: the numerical amount `1955` associated to the `EUR` currency code (`decimalPlaces: 2`) corresponds to: `19,55 Euro`. For points (or miles) the code associated is `MIL`, for compensation/upgrade credits `ECR`.",
          "type": "string",
          "pattern": "[A-Z]{3}",
          "x-dictionary-name": "currency",
          "x-field-name": "currency",
          "x-field-type": "CurrencyDictionaryItem"
        }
      },
      "x-api-ref": "Amount"
    },
    "AmountTemplateParameter": {
      "type": "object",
      "description": "Amount localization template parameter",
      "allOf": [
        {
          "$ref": "#/definitions/LocalizationParameter"
        },
        {
          "type": "object",
          "properties": {
            "value": {
              "$ref": "#/definitions/Amount"
            }
          }
        }
      ],
      "x-api-ref": "AmountTemplateParameter"
    },
    "AncillaryService": {
      "type": "object",
      "description": "Describes an ancillary service available for this Air item",
      "allOf": [
        {
          "$ref": "#/definitions/AirBoundItemService"
        }
      ],
      "x-api-ref": "AncillaryService"
    },
    "AncillaryServicePackDetails": {
      "type": "object",
      "description": "This object contains a list of information about association between a service and its subservices",
      "properties": {
        "subServiceIds": {
          "description": "Identifiers of the subservices available within the pack.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "seatFamilyId": {
          "description": "Identifier of the seat family included within the pack.",
          "type": "string"
        }
      },
      "x-api-ref": "AncillaryServicePackDetails"
    },
    "AnonymousTraveler": {
      "type": "object",
      "description": "Anonymous traveler taking part to a journey",
      "allOf": [
        {
          "$ref": "#/definitions/TravelerCommon"
        },
        {
          "type": "object",
          "properties": {
            "discounts": {
              "type": "array",
              "description": "Discount codes associated to the traveler",
              "items": {
                "type": "string",
                "pattern": "[a-zA-Z0-9]{2,6}"
              },
              "maxItems": 9
            }
          }
        }
      ],
      "x-api-ref": "AnonymousTraveler"
    },
    "ApisDetailAddress": {
      "type": "object",
      "description": "Regulatory address usable for Advance Passenger Information (APIS)",
      "allOf": [
        {
          "$ref": "#/definitions/RegulatoryApisDetail"
        },
        {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "$ref": "#/definitions/RegulatoryAddress"
            }
          }
        }
      ],
      "x-api-ref": "ApisDetailAddress"
    },
    "ApisDetailFromReference": {
      "type": "object",
      "description": "Apis details containing the ID of an already submitted document or address to be reused for a new request for different flights.",
      "allOf": [
        {
          "$ref": "#/definitions/RegulatoryApisDetail"
        },
        {
          "type": "object",
          "properties": {
            "referenceId": {
              "type": "string",
              "description": "request ID of the document or the address to be used for regulatory information.",
              "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
            },
            "addressType": {
              "type": "string",
              "description": "Type of regulatory address to be created from either an other APIS address or a contact address.",
              "enum": [
                "homeAddress",
                "destinationAddress"
              ]
            }
          }
        }
      ],
      "x-api-ref": "ApisDetailFromReference"
    },
    "ApisDetailRegulatoryDocument": {
      "type": "object",
      "description": "Regulatory document usable for Advance Passenger Information (APIS)",
      "allOf": [
        {
          "$ref": "#/definitions/RegulatoryApisDetail"
        },
        {
          "type": "object",
          "required": [
            "regulatoryDocument"
          ],
          "properties": {
            "regulatoryDocument": {
              "$ref": "#/definitions/RegulatoryApisDocument"
            }
          }
        }
      ],
      "x-api-ref": "ApisDetailRegulatoryDocument"
    },
    "AsynchronousPaymentData": {
      "type": "object",
      "description": "Only available for AlternativePaymentMethod.\nIndicates the necessary asynchronous payment information: \n- Reference id of the asynchronous payment transaction\n- Http request to target the Payment Service Provider (PSP)\n",
      "properties": {
        "targetReferenceId": {
          "type": "string",
          "description": "Reference of the payment transaction. Only available for AlternativePaymentMethods  requiring asynchronous interaction\n"
        },
        "targetHttpRequest": {
          "type": "object",
          "description": "Http request containing the url to the Payment Service Provider (PSP) for the asynchronous\npayment.\n",
          "$ref": "#/definitions/HttpRequest"
        }
      },
      "x-api-ref": "AsynchronousPaymentData"
    },
    "ATPCoCategory": {
      "type": "object",
      "description": "ATPCo service group code and subcode",
      "properties": {
        "code": {
          "description": "Service category as per ATPCO guideline",
          "type": "string"
        },
        "subCode": {
          "description": "Service sub-category as per ATPCO guideline",
          "type": "string"
        }
      },
      "x-api-ref": "ATPCoCategory"
    },
    "AvailabilityInfoItem": {
      "type": "object",
      "description": "It contains the information about flight associated to an `airBoundGroup`, when using construction mode shopping",
      "properties": {
        "flightId": {
          "type": "string",
          "description": "Identifier of the flight referenced in the airBoundGroup."
        },
        "cabin": {
          "type": "string",
          "description": "Cabin for the given availibity and price.",
          "enum": [
            "eco",
            "ecoPremium",
            "business",
            "first"
          ]
        },
        "bookingClass": {
          "description": "Booking class associated to the cabin",
          "type": "string"
        },
        "statusCode": {
          "type": "string",
          "description": "Operational status. HK = confirmed, HL = waitlist, TK = schedule change confirmed, schedule change waitlist, UN = unable to confirm not operating, UC = unable to confirm, HX = have cancelled, NO = no action taken.\nAt shopping time, the only status that can be returned is HL=Wailist\n",
          "enum": [
            "HK",
            "HL",
            "TK",
            "UN",
            "UC",
            "HX",
            "NO"
          ]
        },
        "quota": {
          "description": "Number of remaining seats for this flight. Quota is returned only at shopping time.Display of it can depend on the rules configured by the airline.",
          "type": "integer",
          "minimum": 0,
          "maximum": 999
        },
        "amenityCodes": {
          "description": "It provides a reference to the amenities defined in the dictionary.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-dictionary-name": "amenities",
          "x-map-name": "amenities",
          "x-field-type": "AmenitiesDictionaryItem"
        }
      },
      "x-api-ref": "AvailabilityInfoItem"
    },
    "Baggage": {
      "type": "object",
      "description": "Information regarding a baggage : statuses, weight, bag tag number and associated travelers.",
      "required": [
        "id",
        "travelerIds",
        "status",
        "acceptanceStatus",
        "bagTagPrintStatus"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "baggage id"
        },
        "travelerIds": {
          "type": "array",
          "description": "Traveler ids associated to the bag. Depending on the airline configuration, baggage can be associated to a group of travelers (pool). In a journey, a traveler can only be in one pool.\n",
          "items": {
            "$ref": "#/definitions/TravelerIdentifier"
          }
        },
        "status": {
          "type": "string",
          "description": "Status of the bag in the system. An inactive baggage needs to be dropped at the bag drop counter. An active baggage is in the airline/airport baggage system. A validated baggage has been seen by an agent at a desk but must be dropped at a special counter by the traveler (special bag cases)\n",
          "enum": [
            "inactive",
            "active",
            "validated",
            "statusNotSupportedInThisVersion"
          ]
        },
        "acceptanceStatus": {
          "type": "string",
          "description": "Acceptance status of the bag. If the traveler is on stand by, the bag would be in stand by as well",
          "enum": [
            "notAccepted",
            "fullyAccepted",
            "standBy",
            "statusNotSupportedInThisVersion"
          ]
        },
        "bagTagNumber": {
          "type": "string",
          "description": "Bag tag number assigned to the bag"
        },
        "bagTagPrintStatus": {
          "type": "string",
          "description": "Indicate if the bag tag has to be printed and/or it has been already printed",
          "enum": [
            "printingRequired",
            "printed"
          ]
        },
        "bagTagDeliveryEligibility": {
          "description": "bag Tag delivery eligibility, contains the eligibility status and reason for ineligibility.",
          "$ref": "#/definitions/BagTagDeliveryEligibility"
        },
        "weightAmount": {
          "description": "Baggage weight (available only once dropped and if the weight was registered at dropping time)",
          "type": "string"
        },
        "weightUnit": {
          "description": "Weight unit used in baggage allowance",
          "type": "string",
          "enum": [
            "kilogram",
            "pound"
          ]
        },
        "specialBagType": {
          "description": "If the bag is a special bag, contains its type as filed by the airline.",
          "type": "string"
        }
      },
      "x-api-ref": "Baggage"
    },
    "BaggageAllowanceDetail": {
      "description": "The quantity and type of baggage a passenger is allowed to check-in for free",
      "type": "object",
      "properties": {
        "type": {
          "description": "Baggage allowance by weight (expressed in kilograms or pounds) or by pieces",
          "type": "string",
          "enum": [
            "weight",
            "piece"
          ]
        },
        "weightAmount": {
          "description": "Baggage allowance by weight (expressed in the unit below)",
          "type": "string"
        },
        "weightUnit": {
          "description": "Weight unit used in baggage allowance",
          "type": "string",
          "enum": [
            "kilogram",
            "pound"
          ]
        },
        "quantity": {
          "description": "If the field 'type' is returned, this field represents the baggage allowance by piece or weight. If the field 'type' is not returned, this field represents the baggage allowance by piece.          ",
          "type": "integer"
        }
      },
      "x-api-ref": "BaggageAllowanceDetail"
    },
    "BaggagePolicies": {
      "type": "object",
      "description": "Baggage policies organized by category that apply for a specific set of passengers, itinerary and fare basis.\nE.g: a traveler is entitled to have one checked bag for free, with a maximum weight of 23kg and maximum size of 158cm.\n",
      "properties": {
        "airOfferId": {
          "description": "Air offer id used to get the baggage policies. Only available in get baggage policies from cart",
          "type": "string"
        },
        "policyRegulations": {
          "description": "Baggage policies' source of law compliancy",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "freeFrequentFlyerBaggageAllowance": {
          "description": "Baggage allowance specific for frequent flyers",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BaggagePolicyItemCommon"
          }
        },
        "freeCheckedBaggageAllowance": {
          "description": "Allowance for checked baggage that is free of charge ",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BaggagePolicyItemCommon"
          }
        },
        "freeCarryOnAllowance": {
          "description": "Baggage allowed to be carried on the cabin free of charge",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BaggagePolicyItemCommon"
          }
        },
        "checkedBaggageAllowanceCharges": {
          "description": "Allowance for extra checked baggage",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BaggagePolicyItem"
          }
        },
        "carryOnAllowanceCharges": {
          "description": "Baggage allowed to be carried on the cabin",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BaggagePolicyItem"
          }
        },
        "notAllowedExcessBaggage": {
          "description": "Excess baggage not allowed",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BaggagePolicyItemCommon"
          }
        }
      },
      "x-api-ref": "BaggagePolicies"
    },
    "BaggagePoliciesDictionary": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/FlightDictionary"
        },
        {
          "type": "object",
          "properties": {
            "tax": {
              "type": "object",
              "description": "Taxes map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "type": "string"
              }
            },
            "surcharge": {
              "type": "object",
              "description": "Surcharges map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "type": "string"
              }
            },
            "currency": {
              "type": "object",
              "description": "Currencies map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "$ref": "#/definitions/CurrencyDictionaryItem"
              }
            },
            "anonymousTraveler": {
              "type": "object",
              "description": "Basic information about an anonymous traveler such as the passenger type code and the frequent flyer card(s). Frequent flyer cards applies only for a particular case: a transaction based on a cart already containing frequent flyer card(s) but not yet traveler(s). For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "$ref": "#/definitions/AnonymousTraveler"
              }
            }
          }
        }
      ],
      "x-api-ref": "BaggagePoliciesDictionary"
    },
    "BaggagePoliciesReply": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/BaggagePolicies"
            },
            "dictionaries": {
              "$ref": "#/definitions/BaggagePoliciesDictionary"
            }
          }
        }
      ],
      "x-api-ref": "BaggagePoliciesReply"
    },
    "BaggagePolicyDetailItem": {
      "type": "object",
      "description": "Baggage characteristics and policy details for a specific recommendation",
      "properties": {
        "reasonForIssuance": {
          "type": "object",
          "description": "Baggage policy reason for issuance code and sub code (RFIC & RFISC)",
          "$ref": "#/definitions/ReasonForIssuance"
        },
        "description": {
          "description": "Baggage policy description. E.g: UPTO50LB 23KG AND62LI 158LCM",
          "type": "string"
        },
        "policyDetails": {
          "type": "array",
          "description": "Structured list of applicable baggage policy restrictions in terms of weigth and size",
          "items": {
            "$ref": "#/definitions/BaggagePolicyRestrictions"
          }
        }
      },
      "x-api-ref": "BaggagePolicyDetailItem"
    },
    "BaggagePolicyDetails": {
      "description": "This object contains the baggage policy details for a specific recommendation",
      "allOf": [
        {
          "$ref": "#/definitions/BaggageAllowanceDetail"
        },
        {
          "type": "object",
          "properties": {
            "baggageCharacteristics": {
              "type": "array",
              "description": "List of applicable restrictions",
              "items": {
                "$ref": "#/definitions/BaggagePolicyDetailItem"
              }
            }
          }
        }
      ],
      "x-api-ref": "BaggagePolicyDetails"
    },
    "BaggagePolicyItem": {
      "description": "This object contains the information including prices regarding the baggage policy for a certain flight(s) and passenger(s) association.",
      "allOf": [
        {
          "$ref": "#/definitions/BaggagePolicyItemCommon"
        },
        {
          "type": "object",
          "properties": {
            "prices": {
              "$ref": "#/definitions/AirPricingRecords"
            }
          }
        }
      ],
      "x-api-ref": "BaggagePolicyItem"
    },
    "BaggagePolicyItemCommon": {
      "type": "object",
      "description": "This object contains common information regarding the baggage policy for a certain flight(s) and passenger(s) association",
      "properties": {
        "flightIds": {
          "type": "array",
          "description": "List of flights associated to the baggage policy",
          "items": {
            "type": "string"
          }
        },
        "travelerIds": {
          "type": "array",
          "description": "List of travelers associated to the baggage policy",
          "items": {
            "type": "string"
          }
        },
        "airlineCode": {
          "description": "Two letter airline code defined for the OSI message. IATA airline code (http://www.iata.org/publications/Pages/code-search.aspx). For a codeshare segment that has been merged into a single element, this can be the marketing or the operating airline code",
          "type": "string",
          "pattern": "[A-Z0-9]{2}[A-Z]*"
        },
        "details": {
          "type": "object",
          "description": "Baggage policy details for a specific recommendation",
          "$ref": "#/definitions/BaggagePolicyDetails"
        }
      },
      "x-api-ref": "BaggagePolicyItemCommon"
    },
    "BaggagePolicyRestrictions": {
      "type": "object",
      "description": "Structured baggage policy restrictions",
      "properties": {
        "type": {
          "description": "Type of policy restriction (weight, size)",
          "type": "string",
          "enum": [
            "weight",
            "size"
          ]
        },
        "qualifier": {
          "type": "string",
          "enum": [
            "upTo",
            "over",
            "maxLength"
          ]
        },
        "value": {
          "description": "Value of the policy restriction",
          "type": "string"
        },
        "unit": {
          "description": "Unit used in the policy description",
          "type": "string",
          "enum": [
            "centimeter",
            "inch",
            "kilogram",
            "pound"
          ]
        }
      },
      "x-api-ref": "BaggagePolicyRestrictions"
    },
    "BagTagDeliveryEligibility": {
      "type": "object",
      "description": "Bag Tag delivery eligibility, contains the eligibility status and reason for ineligibility.\n",
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "description": "Indicates Bag Tag deliverable status via the API (to enable printing at home)",
          "type": "string",
          "enum": [
            "eligible",
            "ineligible"
          ]
        },
        "reasons": {
          "description": "Reason codes if the status is ineligibile.",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "maxSegmentReached",
              "customerNotAccepted",
              "customerEligibility",
              "flightEligibility",
              "flightStatusInvalid",
              "unpaidItems",
              "baggroupExcess",
              "bagActive",
              "bagNotFullyAccepted",
              "shortTagged",
              "multipleBaggageRecord",
              "other"
            ]
          }
        }
      },
      "x-api-ref": "BagTagDeliveryEligibility"
    },
    "BagTagsDeliveriesMethod": {
      "type": "object",
      "description": "Handles the different delivery methods for the bag Tags\n",
      "discriminator": "deliveryType",
      "required": [
        "deliveryType",
        "bagIds"
      ],
      "properties": {
        "languageCode": {
          "description": "Code of the preferred language to be used, e.g. en-GB for English-United Kingdom. [For more details](http://www.lingoes.net/en/translator/langcode.htm)\nTranslation of the bagTags is provided by the airline and because of international regulation, part of the document might stay in English.\n",
          "type": "string",
          "default": "en-GB",
          "pattern": "[a-zA-Z0-9-]{2,5}"
        },
        "bagIds": {
          "type": "array",
          "description": "The list of baggageIds should be provided to receive the corresponding bagTags\n",
          "items": {
            "type": "string"
          }
        },
        "deliveryType": {
          "type": "string",
          "description": "Delivery method type to be used to deliver bagTags.\n",
          "enum": [
            "BagTagsEmailDelivery",
            "BagTagsPDFDocument"
          ]
        }
      },
      "x-api-ref": "BagTagsDeliveriesMethod"
    },
    "BagTagsDeliveriesReply": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "type": "object",
              "description": "Status of email sent or payload and metadata of the BagTagsPDFDocument",
              "$ref": "#/definitions/BagTagsDeliveriesResult"
            }
          }
        }
      ],
      "x-api-ref": "BagTagsDeliveriesReply"
    },
    "BagTagsDeliveriesRequest": {
      "type": "object",
      "description": "Handles the different delivery methods for the bag Tags\n",
      "required": [
        "deliveryMethods"
      ],
      "properties": {
        "deliveryMethods": {
          "type": "array",
          "description": "Delivery Methods (Email and PDF). Only one method per request is handled. Different baggageIds can be requested to multiple email-ids in the same request. However, request for email and PDF document can't be done in the same request.\n",
          "items": {
            "$ref": "#/definitions/BagTagsDeliveriesMethod"
          }
        }
      },
      "x-api-ref": "BagTagsDeliveriesRequest"
    },
    "BagTagsDeliveriesResult": {
      "type": "object",
      "description": "Bag Tags request result for the given bagIds",
      "properties": {
        "emailDeliveryStatus": {
          "description": "This indicates the global Email Delivery Status.\n",
          "type": "string",
          "enum": [
            "sent"
          ]
        },
        "documentEnvelopes": {
          "type": "array",
          "description": "In case of BagTagsPDFDocument delivery, the payload and metadata associated to each bag tag document is reported here\n",
          "items": {
            "$ref": "#/definitions/DocumentEnvelope"
          }
        }
      },
      "x-api-ref": "BagTagsDeliveriesResult"
    },
    "BagTagsEmailDelivery": {
      "type": "object",
      "description": "Email delivery method to send an email to the provided address with the bagTags.\n",
      "allOf": [
        {
          "$ref": "#/definitions/BagTagsDeliveriesMethod"
        },
        {
          "type": "object",
          "required": [
            "recipient",
            "subject"
          ],
          "properties": {
            "recipient": {
              "description": "Email address to send the email to, e.g. test@amadeus.com",
              "type": "string",
              "pattern": "[a-zA-Z0-9_@-]{1,70}",
              "x-risk-personal-data-field": "EMAIL_ADDRESS"
            },
            "documentName": {
              "description": "Name of the document being Sent, eg: Bagtags",
              "pattern": "[a-zA-Z0-9_@-]{1,70}",
              "type": "string"
            },
            "subject": {
              "description": "Email subject",
              "pattern": "[a-zA-Z0-9_,.-]{1,199}",
              "type": "string"
            }
          }
        }
      ],
      "x-api-ref": "BagTagsEmailDelivery"
    },
    "BagTagsPDFDocument": {
      "type": "object",
      "description": "To request for bag tags as a PDF document. Class defined to maintain polymorphism.\n",
      "allOf": [
        {
          "$ref": "#/definitions/BagTagsDeliveriesMethod"
        },
        {
          "type": "object"
        }
      ],
      "x-api-ref": "BagTagsPDFDocument"
    },
    "Barcode": {
      "type": "object",
      "description": "Industry standard bar code (IATA Resolution 792) details.",
      "required": [
        "type",
        "stream"
      ],
      "properties": {
        "type": {
          "description": "Type of barcode to be rendered by client (Aztec, QR etc).",
          "type": "string",
          "enum": [
            "aztec",
            "datamatrix",
            "pdf417",
            "qrcode"
          ]
        },
        "stream": {
          "type": "string",
          "description": "Bar coded boarding pass data."
        }
      },
      "x-api-ref": "Barcode"
    },
    "BaseTotalAmount": {
      "description": "estimated nightly average for the stay",
      "type": "object",
      "properties": {
        "base": {
          "description": "Amount before taxes. This amount is kept unmodified and shows the amount before taxes not including the mark-ups",
          "$ref": "#/definitions/Amount"
        },
        "total": {
          "description": "Amount after taxes. This amount is kept unmodified and shows the amount after taxes not including the mark-up",
          "$ref": "#/definitions/Amount"
        }
      },
      "required": [
        "base",
        "total"
      ],
      "x-api-ref": "BaseTotalAmount"
    },
    "BeverageAmenity": {
      "type": "object",
      "description": "Details of Beverage Amenity. NONE indicates it is not available for the specific cabin.\n",
      "properties": {
        "beverageType": {
          "description": "Type of Beverage\n",
          "type": "string",
          "enum": [
            "ALCOHOLIC",
            "NON_ALCOHOLIC",
            "PREMIUM_ALCOHOLIC"
          ]
        },
        "isChargeable": {
          "description": "Defines if the beverage amenity is chargeable",
          "type": "boolean"
        }
      },
      "x-api-ref": "BeverageAmenity"
    },
    "BinRange": {
      "type": "object",
      "description": "BinRange defines a bin range for the credit card\n",
      "required": [
        "from",
        "to"
      ],
      "properties": {
        "from": {
          "type": "string",
          "description": "where the bin range starts from\n"
        },
        "to": {
          "type": "string",
          "description": "where the bin range ends to\n"
        }
      },
      "x-api-ref": "BinRange"
    },
    "BoardingPass": {
      "type": "object",
      "description": "Boarding pass data related to the journey element",
      "allOf": [
        {
          "$ref": "#/definitions/CheckinChannel"
        },
        {
          "type": "object",
          "properties": {
            "barcode": {
              "description": "Industry standard bar code (IATA Resolution 792). This field has been currently deprecated.",
              "$ref": "#/definitions/Barcode"
            },
            "deliveryType": {
              "type": "string",
              "description": "Type of the boarding pass delivered. This field has been currently deprecated.",
              "enum": [
                "email",
                "mobile",
                "pdf",
                "sms"
              ]
            },
            "link": {
              "type": "string",
              "format": "link",
              "description": "Link to the boarding pass for PDF and Mobile boarding passes. This field has been currently deprecated."
            },
            "gate": {
              "type": "string",
              "description": "Boarding gate if known at boarding pass generation time. This field has been currently deprecated."
            }
          }
        }
      ],
      "x-api-ref": "BoardingPass"
    },
    "BoardingPassAttachment": {
      "type": "object",
      "description": "Provide the information for the attachment to be sent within the email",
      "required": [
        "documentType",
        "documentName"
      ],
      "properties": {
        "documentType": {
          "type": "string",
          "description": "Type of the boarding pass document to be attached to the email",
          "enum": [
            "pdf",
            "appleWallet"
          ]
        },
        "documentName": {
          "type": "string",
          "pattern": "[a-zA-Z0-9_-]{1,199}",
          "description": "Name of the attachment of the email.\nThe extension of the document (.pdf , .pkpass) shouldn't be provided.\n"
        }
      },
      "x-api-ref": "BoardingPassAttachment"
    },
    "BoardingPassBaggage": {
      "type": "object",
      "description": "Boarding pass data related to the traveler's baggages.\nInformation is regarding the checked baggages, those put in the hold of the plane.\n",
      "properties": {
        "allowance": {
          "description": "Number of checked baggages allowed on the plane",
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "baggageDropClosingDateTime": {
          "description": "Closing date and time to drop a checked baggage\nLocal date and time with the following format \\\"yyyy-MM-dd'T'HH:mm:ssZ\\\" (e.g. 2018-02-10T20:40:00+02:00)\"\n",
          "type": "string",
          "format": "date-time",
          "example": "2018-02-10T20:40:00+02:00"
        }
      },
      "x-api-ref": "BoardingPassBaggage"
    },
    "BoardingPassData": {
      "type": "object",
      "description": "Boarding pass data to be able to create a boarding pass for a traveler on a flight.\nA Boarding Pass Dictionary will always contain a single traveler on a single flight. However the flight might have multiple legs/stops.\nFor each leg, the traveler should have a boarding pass so that he can leave the plane and board back if the airline allows it.\n",
      "properties": {
        "traveler": {
          "$ref": "#/definitions/Traveler"
        },
        "flight": {
          "$ref": "#/definitions/Flight"
        },
        "frequentFlyerCards": {
          "type": "array",
          "description": "Frequent flyer cards used to redeem or accrue miles",
          "items": {
            "$ref": "#/definitions/FrequentFlyerCard"
          }
        },
        "sequenceNumber": {
          "type": "string",
          "description": "Number indicating the order of check-in. It should be printed on the Boarding Pass with 'Seq' displayed before"
        },
        "orderId": {
          "type": "string",
          "description": "Record locator of a PNR",
          "x-risk-personal-data-field": "PNR_RECORD_LOCATOR"
        },
        "ticketNumber": {
          "type": "string",
          "description": "Ticket number for the traveler on this flight",
          "x-risk-personal-data-field": "AIRLINE_TICKET_NUMBER"
        },
        "barcodeStream": {
          "type": "string",
          "description": "Barcode Stream to generate a 2D barcode following the IATA (International Air Transport Association) standards : Resolution 792\nIATA requires PDF417 barcode format for printed document and Aztec, Datamatrix or QR code formats for mobile boarding pass.\n"
        },
        "priorities": {
          "$ref": "#/definitions/BoardingPriorities"
        },
        "secondarySecurityScreeningSelection": {
          "type": "boolean",
          "description": "Indicate if the traveler has been selected for a Secondary Security Screening Selection (SSSS)\nIf the value is set to 'true', the letters 'SSSS' (all caps) must be clearly visible on the boarding pass.\n"
        },
        "legs": {
          "type": "array",
          "description": "All the flight's leg information and the relevant traveler information",
          "items": {
            "$ref": "#/definitions/BoardingPassLeg"
          }
        },
        "baggageInformation": {
          "$ref": "#/definitions/BoardingPassBaggage"
        }
      },
      "x-api-ref": "BoardingPassData"
    },
    "BoardingPassDeliveryInput": {
      "type": "object",
      "description": "Input fields for the boarding pass delivery",
      "required": [
        "journeyId",
        "deliveryMethod"
      ],
      "properties": {
        "deliveryMethod": {
          "$ref": "#/definitions/BoardingPassDeliveryMethod"
        },
        "languageCode": {
          "description": "Code of the preferred language to be used, e.g. en-GB for English-United Kingdom. [For more details](http://www.lingoes.net/en/translator/langcode.htm)\nTranslation of the boarding is provided by the airline and because of international regulation, part of the document might stay in English.\n",
          "type": "string",
          "default": "en-GB",
          "pattern": "[a-zA-Z0-9-]{2,5}"
        },
        "journeyId": {
          "type": "string",
          "description": "Journey Id for which the boarding passes should be generated"
        },
        "journeyElementIds": {
          "type": "array",
          "description": "By default the boarding passes will be generated for any journeyElement being part of the selected Journey.\nIn order to generate the boarding passes only for a specific list of journeyElement, the list of the corresponding Ids can be provided via this field.\n",
          "items": {
            "type": "string"
          }
        }
      },
      "x-api-ref": "BoardingPassDeliveryInput"
    },
    "BoardingPassDeliveryMethod": {
      "type": "object",
      "description": "Delivery method selected to provide the boarding passes.\nAll requested boarding passes with be delivered with the same method.\nFor more information on a specific type of boarding pass delivery method, please see the page [Boarding Pass Delivery Methods documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/boarding_pass_delivery_methods.html#!/Maps/get).\n",
      "discriminator": "deliveryMethodType",
      "required": [
        "deliveryMethodType"
      ],
      "properties": {
        "deliveryMethodType": {
          "type": "string",
          "description": "Delivery method type to be used to deliver boarding passes.\nUsed to determine the object used to hold the information.\nTo see the structure of the different boarding pass delivery methods, please check [Boarding Pass Delivery Methods documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/boarding_pass_delivery_methods.html#!/Maps/get).\n",
          "enum": [
            "BoardingPassSmsDelivery",
            "BoardingPassEmailDelivery",
            "BoardingPassInResponseDelivery"
          ]
        }
      },
      "x-api-ref": "BoardingPassDeliveryMethod"
    },
    "BoardingPassDictionary": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/JourneyElementDictionary"
        },
        {
          "type": "object",
          "properties": {
            "journeyElements": {
              "type": "object",
              "description": "Journey elements corresponding to a journeyElement id.",
              "additionalProperties": {
                "$ref": "#/definitions/JourneyElement"
              }
            }
          }
        }
      ],
      "x-api-ref": "BoardingPassDictionary"
    },
    "BoardingPassEligibility": {
      "type": "object",
      "description": "Define the eligibility for boarding pass retrieval (after acceptance)",
      "allOf": [
        {
          "$ref": "#/definitions/EligibilityCommon"
        },
        {
          "type": "object",
          "properties": {
            "reasons": {
              "description": "Reasons for the eligibility status provided if not eligible.",
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "flightEligibilityRule",
                  "customerEligibilityRule",
                  "passengerNotAccepted",
                  "other"
                ]
              }
            },
            "allowedBoardingPassTypes": {
              "description": "The types of boarding pass that the traveler is allowed to receive and use at the airport. Airport Printed = only documents printed at agent desk or on a kiosk are allowed, so the user will not be allowed to retrieve a boarding pass from DAPI Home Printed = the user can download a PDF boarding pass to be printed Barcode On Device = mobile boarding pass (including Apple Wallet and airline-specific applications) Text Message On Device (legacy) = some airports allow access to boarding gates with only a confirmation text message. This is not a mobile boarding pass!",
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "airportPrinted",
                  "homePrinted",
                  "barcodeOnDevice",
                  "textMessageOnDevice"
                ]
              }
            }
          }
        }
      ],
      "x-api-ref": "BoardingPassEligibility"
    },
    "BoardingPassEmailDelivery": {
      "type": "object",
      "description": "Email delivery method to send an email to the provided address.\nAn attachment can be requested in the email to provide the boarding pass.\nThe email format might contain a link to a boarding pass depending on the email format created for the airline.\nThe link is sometimes used to return the URL for handling the boarding pass through a specific website or, by default, through the Amadeus product (if configured by the airline).\n",
      "allOf": [
        {
          "$ref": "#/definitions/BoardingPassDeliveryMethod"
        },
        {
          "type": "object",
          "required": [
            "recipient",
            "sender",
            "subject"
          ],
          "properties": {
            "recipient": {
              "description": "Email address to send the email to, e.g. test@amadeus.com",
              "type": "string",
              "pattern": "[a-zA-Z0-9_@-]{1,70}",
              "x-risk-personal-data-field": "EMAIL_ADDRESS"
            },
            "sender": {
              "description": "Email address of the sender, e.g. no-reply@amadeus.com",
              "pattern": "[a-zA-Z0-9_@-]{1,70}",
              "type": "string",
              "x-risk-personal-data-field": "EMAIL_ADDRESS"
            },
            "subject": {
              "description": "Email subject",
              "pattern": "[a-zA-Z0-9_,.-]{1,199}",
              "type": "string"
            },
            "attachment": {
              "$ref": "#/definitions/BoardingPassAttachment"
            },
            "link": {
              "description": "URL link to your specific website to handle the boarding pass on your side. It is added to the airline email text.",
              "type": "string",
              "maxLength": 256,
              "format": "uri"
            }
          }
        }
      ],
      "x-api-ref": "BoardingPassEmailDelivery"
    },
    "BoardingPassesReply": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BoardingPassResult"
              }
            },
            "dictionaries": {
              "$ref": "#/definitions/BoardingPassDictionary"
            }
          }
        }
      ],
      "x-api-ref": "BoardingPassesReply"
    },
    "BoardingPassInResponseDelivery": {
      "type": "object",
      "description": "In response delivery method is to get the document in the response of the service to provide the boarding pass directly to the user.\nThe document type can be a PDF, mobile boarding pass (html), a Apple Wallet or the boarding pass data to build the boarding pass.\nThe document will be provided via a url link in the response of the service.\nThe boarding pass data is defined within the response of the boarding pass request.\n",
      "allOf": [
        {
          "$ref": "#/definitions/BoardingPassDeliveryMethod"
        },
        {
          "type": "object",
          "required": [
            "documentType"
          ],
          "properties": {
            "documentType": {
              "type": "string",
              "description": "Type of the boarding pass document to generate and provide",
              "enum": [
                "pdf",
                "mobileBoardingPass",
                "appleWallet",
                "boardingPassData",
                "googlePay",
                "wallet"
              ]
            }
          }
        }
      ],
      "x-api-ref": "BoardingPassInResponseDelivery"
    },
    "BoardingPassLeg": {
      "type": "object",
      "description": "Boarding pass data related to a leg of the flight for the traveler.\nA leg is the in-flight time between two airports.\nExample: for the flight 6X123 performing the trip LHR-SIN-MEL, with a stop in SIN, there will be 2 legs associated: LHR-SIN and SIN-MEL.\n",
      "properties": {
        "departure": {
          "$ref": "#/definitions/FlightEndPoint"
        },
        "arrival": {
          "$ref": "#/definitions/FlightEndPoint"
        },
        "boardingDateTime": {
          "description": "Date and time when the boarding of the plane is planned to start.\nLocal date and time with the following format \\\"yyyy-MM-dd'T'HH:mm:ssZ\\\" (e.g. 2018-02-10T20:40:00+02:00)\n",
          "type": "string",
          "format": "date-time",
          "example": "2018-02-10T20:40:00+02:00"
        },
        "boardingGate": {
          "type": "string",
          "description": "Airport gate wherer travelers will board the plane"
        },
        "seat": {
          "$ref": "#/definitions/SeatmapSeatProperties"
        },
        "lounges": {
          "type": "array",
          "description": "Lounge access information",
          "items": {
            "$ref": "#/definitions/BoardingPassLounge"
          }
        },
        "services": {
          "type": "array",
          "description": "List of services of the traveler",
          "items": {
            "$ref": "#/definitions/BoardingPassService"
          }
        }
      },
      "x-api-ref": "BoardingPassLeg"
    },
    "BoardingPassLounge": {
      "type": "object",
      "description": "Boarding Pass data related to the lounge access for the traveler if he has access to one.\n",
      "properties": {
        "airport": {
          "type": "string",
          "description": "Indicate if the lounge access is for the departure or arrival airport",
          "enum": [
            "departure",
            "arrival"
          ]
        },
        "name": {
          "type": "string",
          "description": "Name of the lounge at the airport",
          "example": "AMADEUS LOUNGE"
        },
        "location": {
          "type": "string",
          "description": "Information to help the traveler find where the lounge is within the terminal (English only).",
          "example": "LOCATED AT GATE 37"
        },
        "invitationText": {
          "type": "string",
          "description": "Welcome message to invite the traveler to the lounge (English only).",
          "example": "WELCOME TO"
        },
        "description": {
          "type": "string",
          "description": "Small description of the lounge",
          "example": "AMADEUS TOP FLYER CLUB"
        },
        "numberOfGuests": {
          "type": "integer",
          "format": "int32",
          "minimum": 0
        }
      },
      "x-api-ref": "BoardingPassLounge"
    },
    "BoardingPassResult": {
      "type": "object",
      "description": "Boarding pass request result for a given traveler flight info",
      "required": [
        "journeyElementIds",
        "result"
      ],
      "properties": {
        "journeyElementIds": {
          "description": "Journey element ids associated to the Boarding pass documents",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "result": {
          "type": "string",
          "description": "Result for this specific boarding pass.\nIndicate if the boarding pass was sent, returned or was not allowed because of the traveler status.\n",
          "enum": [
            "sent",
            "returnedDocumentURL",
            "returnedBoardingPassData",
            "inhibited"
          ]
        },
        "documentType": {
          "type": "string",
          "description": "Type of the document returned.\nA boarding pass allow the traveler to go through security and board his flight.\nA confirmation only allow the traveler to be informed that his acceptance is succesful and should get a valid boarding pass at the airport.\n",
          "enum": [
            "boardingPass",
            "confirmation"
          ]
        },
        "boardingPassData": {
          "$ref": "#/definitions/BoardingPassData"
        },
        "documentURL": {
          "type": "string",
          "description": "URL to retrieve the requested boarding pass. The link will be valid as long as the flight has not landed.",
          "format": "uri"
        }
      },
      "x-api-ref": "BoardingPassResult"
    },
    "BoardingPassService": {
      "type": "object",
      "description": "Traveler's services on the flight to be indicated on the boarding pass",
      "properties": {
        "code": {
          "type": "string",
          "description": "Service code needed to identify a service",
          "pattern": "[A-Z0-9-]{1,4}"
        },
        "comment": {
          "type": "string",
          "description": "Comment associated to the service"
        }
      },
      "x-api-ref": "BoardingPassService"
    },
    "BoardingPassSmsDelivery": {
      "type": "object",
      "description": "SMS delivery method will allow sending an SMS to the phone number provided by the user\nThe SMS format will contain a link to the boarding pass.\nThe link is sometimes used to return the URL for handling the boarding pass through a specific website or, by default, through the Amadeus product (if configured by the airline).\n",
      "allOf": [
        {
          "$ref": "#/definitions/BoardingPassDeliveryMethod"
        },
        {
          "type": "object",
          "required": [
            "phoneNumber"
          ],
          "properties": {
            "phoneNumber": {
              "$ref": "#/definitions/PhoneBase"
            },
            "link": {
              "description": "URL link to your specific website to handle the boarding pass on your side. It is added to the airline defined SMS text",
              "type": "string",
              "maxLength": 256,
              "format": "uri"
            }
          }
        }
      ],
      "x-api-ref": "BoardingPassSmsDelivery"
    },
    "BoardingPriorities": {
      "type": "object",
      "description": "Information regarding the priority for the security checks and the boarding at the gate\n",
      "properties": {
        "isFastTrack": {
          "type": "boolean",
          "description": "Indicate if the traveler can use the Fast Track path for security and boarding"
        },
        "fastTrackText": {
          "type": "string",
          "description": "Text to be printed on the document to show traveler's Fast Track possibility"
        },
        "boardingGroup": {
          "type": "string",
          "description": "Provide the boarding group of the traveler to help him know when he can board the plane"
        },
        "tsaPreCheck": {
          "type": "boolean",
          "description": "Indicate if the traveler subscribed to USA's Transportation Security Administration (TSA) Pre-Check system.\nInformation should be provided to the traveler for him to know he can go through the specific security line.\n"
        },
        "securityIndicators": {
          "type": "array",
          "description": "List of security indicators to be displayed on this boarding pass (e.g \"ITD OSS\" for Canadian international to domestic one stop security)",
          "items": {
            "type": "string"
          }
        },
        "priorityProgram": {
          "type": "string",
          "description": "Indicate if the traveler has exclusive priority services, for example priority check-in,  boarding and baggage handling, priority lanes at ticket offices, etc..."
        }
      },
      "x-api-ref": "BoardingPriorities"
    },
    "BookingStatusDictionaryItem": {
      "description": "Booking status dictionary. Allows mapping a status code to its name. Example: HK = Confirmed [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Status code name. E.g. 'Confirmed'."
        }
      },
      "x-api-ref": "BookingStatusDictionaryItem"
    },
    "BooleanTemplateParameter": {
      "type": "object",
      "description": "Boolean localization template parameter",
      "allOf": [
        {
          "$ref": "#/definitions/LocalizationParameter"
        },
        {
          "type": "object",
          "properties": {
            "value": {
              "type": "boolean"
            }
          }
        }
      ],
      "x-api-ref": "BooleanTemplateParameter"
    },
    "Bound": {
      "description": "Each bound corresponds to a group of flights. A one way trip contains one single bound. A round trip or open jaw trip contains two bounds (outbound and inbound). Only flight reference ids are provided: for the full flight content please refer to the flightDictionary\n",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/BoundCommon"
        },
        {
          "type": "object",
          "required": [
            "flights"
          ],
          "properties": {
            "flights": {
              "description": "Flights, and for each flight, associated services",
              "type": "array",
              "items": {
                "$ref": "#/definitions/FlightItem"
              }
            },
            "duration": {
              "description": "Duration of the entire journey expressed in seconds",
              "type": "integer"
            },
            "disruptionStatus": {
              "description": "Information related to the disruption that occurred on this bound for the order resource",
              "type": "object",
              "$ref": "#/definitions/DisruptionStatus"
            },
            "ranking": {
              "description": "Ranking of the flight bound based on Carrier Preferred Display rules defined by airline, numbering starts from 1 which indicates the preferred bound solution.\n",
              "type": "integer"
            },
            "flightViewMetrics": {
              "description": "Number of people looking depending on Flight/Date",
              "$ref": "#/definitions/ViewMetrics"
            }
          }
        }
      ],
      "x-api-ref": "Bound"
    },
    "BoundCommon": {
      "type": "object",
      "required": [
        "originLocationCode",
        "destinationLocationCode"
      ],
      "description": "Bound common information (contains everything except flights). Note: not meaningful in the context of an Order",
      "properties": {
        "airBoundId": {
          "type": "string",
          "description": "Identifier of the bound.\nOnce air offer is stored in the cart, bound identifiers  abstract from the shopping identifier (offerNdcId).\n"
        },
        "fareFamilyCode": {
          "type": "string",
          "x-dictionary-name": "fareFamilyWithServices",
          "x-field-name": "fareFamily",
          "x-field-type": "FareFamilyWithServicesDictionaryItem"
        },
        "prices": {
          "$ref": "#/definitions/AirPricingRecords"
        },
        "originLocationCode": {
          "description": "Departure location (airport code) of the flight bound",
          "type": "string",
          "pattern": "[a-zA-Z]{3}",
          "x-dictionary-name": "location",
          "x-field-name": "originLocation",
          "x-field-type": "LocationDictionaryItem"
        },
        "destinationLocationCode": {
          "description": "Arrival location (airport code) of the flight bound",
          "type": "string",
          "pattern": "[a-zA-Z]{3}",
          "x-dictionary-name": "location",
          "x-field-name": "destinationLocation",
          "x-field-type": "LocationDictionaryItem"
        },
        "departureDate": {
          "description": "Departure date without timezone (local time). - dateTime format: ISO 8601 see http://www.w3.org/TR/NOTE-datetime. This field will appear only in case of complex itinerary to differentiate the bounds.\n",
          "type": "string",
          "format": "date",
          "example": "2016-07-01"
        }
      },
      "x-api-ref": "BoundCommon"
    },
    "BoundEligibility": {
      "type": "object",
      "description": "Common attributes shared by all actions that could manipulate a bound.",
      "required": [
        "airBoundId",
        "isEligible"
      ],
      "properties": {
        "airBoundId": {
          "type": "string",
          "description": "Identifier of the bound"
        },
        "isEligible": {
          "description": "If true, bound is eligible to the functionality.",
          "type": "boolean"
        }
      },
      "x-api-ref": "BoundEligibility"
    },
    "BoundExchangeRequest": {
      "type": "object",
      "description": "Details of the bound to be exchanged in the order during air bound exchange process with new flights to be booked in exchange.        \n",
      "required": [
        "boundId"
      ],
      "properties": {
        "boundId": {
          "type": "string",
          "description": "Reference in order of the bound to be exchanged"
        },
        "requestedFlights": {
          "type": "array",
          "description": "List of new flights to be booked in exchange of the given bound",
          "items": {
            "$ref": "#/definitions/FlightExchangeDetails"
          }
        }
      },
      "x-api-ref": "BoundExchangeRequest"
    },
    "BoundFlightDetails": {
      "type": "object",
      "description": "Details for the flight's solution for a given bound in construction mode shopping.\nA flight might be composed by several segments.\nExample: the flight NCE-NYC, could be composed by two segments, NCE-LON and LON-NYC\n",
      "required": [
        "originLocationCode",
        "destinationLocationCode",
        "duration",
        "segments"
      ],
      "properties": {
        "originLocationCode": {
          "description": "Departure location (airport code) of the flight bound",
          "type": "string",
          "pattern": "[a-zA-Z]{3}",
          "x-dictionary-name": "location",
          "x-field-name": "originLocation",
          "x-field-type": "LocationDictionaryItem"
        },
        "destinationLocationCode": {
          "description": "Arrival location (airport code) of the flight bound",
          "type": "string",
          "pattern": "[a-zA-Z]{3}",
          "x-dictionary-name": "location",
          "x-field-name": "destinationLocation",
          "x-field-type": "LocationDictionaryItem"
        },
        "duration": {
          "description": "Duration of the entire journey expressed in seconds.",
          "type": "integer"
        },
        "ranking": {
          "description": "Ranking of the flight bound based on Carrier Preferred Display rules defined by airline, numbering starts from 1 which indicates the preferred bound solution.\n",
          "type": "integer"
        },
        "flightViewMetrics": {
          "description": "Number of people looking depending on Flight/Date",
          "$ref": "#/definitions/ViewMetrics"
        },
        "segments": {
          "type": "array",
          "description": "List of different flight segments for the given flight's proposal.",
          "items": {
            "$ref": "#/definitions/FlightSegment"
          },
          "minItems": 1
        }
      },
      "x-api-ref": "BoundFlightDetails"
    },
    "BoundFlights": {
      "description": "Each bound corresponds to a group of flights. A one way trip contains one single bound. A round trip or open jaw trip contains two bounds (outbound and inbound). Only flight reference ids are provided: for the full flight content please refer to the flightDictionary\n",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/BoundCommon"
        },
        {
          "type": "object",
          "properties": {
            "flights": {
              "description": "Flights, and for each flight, associated services",
              "type": "array",
              "items": {
                "$ref": "#/definitions/FlightItem"
              }
            }
          }
        }
      ],
      "x-api-ref": "BoundFlights"
    },
    "BrowserInformation": {
      "type": "object",
      "description": "Payer's web browser details. Only used in 3DSv2.",
      "properties": {
        "acceptHeader": {
          "type": "string",
          "description": "The accept header value of the payer's browser."
        },
        "userAgent": {
          "type": "string",
          "description": "The user agent value of the payer's browser.",
          "x-risk-personal-data-field": "BROWSER_VISITOR_ID"
        }
      },
      "x-api-ref": "BrowserInformation"
    },
    "BundleDiscountRuleItem": {
      "type": "object",
      "description": "This object contains the information regarding the bundle rules.",
      "required": [
        "airlineCode",
        "reasonCode",
        "discount"
      ],
      "properties": {
        "airlineCode": {
          "type": "string",
          "description": "The airline code of the owner of the bundle."
        },
        "displayOrder": {
          "type": "integer",
          "description": "This number represents the display order of the bundle discount rules (the lower the number, the more important the bundle discount rule is)"
        },
        "reasonCode": {
          "type": "string",
          "description": "The reason code defined in the AAM rule."
        },
        "discountTriggers": {
          "description": "Combination of services/seat families that trigger the bundle discount. Services/seat families in the same BundleDiscountItemCommon will be linked by an AND relation. Services/seat families in different BundleDiscountItemCommon are linked by an OR relation.",
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/BundleDiscountTrigger"
          }
        },
        "discount": {
          "$ref": "#/definitions/BundleDiscountValueItem"
        },
        "mediaId": {
          "description": "Reference to the rich media to be used for describing a service/seat",
          "type": "string"
        },
        "discountedItems": {
          "$ref": "#/definitions/DiscountedItems"
        }
      },
      "x-api-ref": "BundleDiscountRuleItem"
    },
    "BundleDiscountTrigger": {
      "type": "object",
      "description": "All the services and seat families in the same BundleDiscountTrigger are linked by an AND condition. Services and seat families from different BundleDiscountTrigger are linked by an OR condition.",
      "properties": {
        "serviceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The ids of the services that trigger the bundle discount."
        },
        "seatFamilyIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The ids of the seat families that trigger the bundle discount."
        }
      },
      "x-api-ref": "BundleDiscountTrigger"
    },
    "BundleDiscountValueItem": {
      "description": "This object contains the information regarding the bundle values.",
      "type": "object",
      "properties": {
        "discountType": {
          "type": "string",
          "enum": [
            "percentage",
            "fixed"
          ],
          "description": "A bundle discount can be either \"percentage\" where the discount percentage (via the field percentage) to be applied is given or \"fixed\" where we provide the amount (via the amount field) to be removed from the final price."
        },
        "percentage": {
          "type": "number",
          "format": "float",
          "minimum": 0,
          "maximum": 100,
          "description": "percentage that will be discounted by the final price"
        },
        "amount": {
          "$ref": "#/definitions/Amount"
        }
      },
      "x-api-ref": "BundleDiscountValueItem"
    },
    "CancelAndRefundEligibility": {
      "description": "Eligibility for `cancelAndRefund` gives an indication whether the API user can start a refund flow, which would ultimately cancel the booked flights and refund partially or fully the order.\n\nIf the eligibility is returned as true, the API user will then call the API end point `GET /purchase/order-eligibilities`, which performs additional eligibility checks with the ticketing server and computes the amount to be refunded. \n\nIf the eligibility is returned as false, the API provides a reason code and title regarding the restriction.",
      "type": "object",
      "required": [
        "isEligible"
      ],
      "properties": {
        "isEligible": {
          "description": "Returns true if the order is eligible to the functionality.",
          "type": "boolean"
        },
        "nonEligibilityReasons": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NonEligibilityReason"
          }
        }
      },
      "x-api-ref": "CancelAndRefundEligibility"
    },
    "CancellationPolicy": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "FULL_STAY",
            "NIGHTS"
          ],
          "description": "[\"FULL_STAY\",\"Flat\",\"FlatPerNight\", \"Nights\", \"StayPercent\", \"FirstNight\", \"LastNight\", \"FirstAndLastNight\"]\n* FULL_STAY: Non-Refundable after Deadline. Can be refundable before Deadline (if any)"
        },
        "amount": {
          "$ref": "#/definitions/Amount"
        },
        "numberOfNights": {
          "type": "integer",
          "format": "int32",
          "minimum": 0,
          "description": "Number of nights due as fee in case of cancellation."
        },
        "percentage": {
          "type": "string",
          "pattern": "^\\\\d+(\\.\\\\d+)?$",
          "description": "Percentage associated to the cancellation policy linked to the total amount. Value is between 0 and 100."
        },
        "deadline": {
          "type": "string",
          "format": "date-time",
          "description": "Represents the deadline after which the penalty applies. DateTime is in ISO 8601 [https://www.w3.org/TR/NOTE-datetime].\nThe penalty specified in Amount, NumberOfNights or Percentage is applied to cancellations performed after this deadline. Before this deadline, previous cancellation policy applies (if any)\nExample: 2010-08-14T12:00:00+01:00\nExample: 2010-08-14T12:00:00Z\nExample: 2010-08-14T12:00:00-01:00\nThe value is expressed in the hotel local time zone, with the added time zone difference. So you can compute the deadline in UTC(GMT) if desired.\n"
        },
        "description": {
          "$ref": "#/definitions/TextWithLanguageType"
        }
      },
      "x-api-ref": "CancellationPolicy"
    },
    "CancelStandbyEarlyRequest": {
      "type": "object",
      "properties": {
        "journeyElementIds": {
          "description": "List of journey element identifiers to delete",
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "[a-zA-Z0-9]{16}"
          }
        }
      },
      "x-api-ref": "CancelStandbyEarlyRequest"
    },
    "CarAcrissCodeDictionaryItem": {
      "required": [
        "category",
        "type",
        "drive",
        "fuel",
        "isAutomatic",
        "airConditioning"
      ],
      "properties": {
        "category": {
          "description": "Car category name. e.g. mini, economy.",
          "type": "string"
        },
        "type": {
          "description": "Car type name. e.g. 2-3 doors, SUV.",
          "type": "string"
        },
        "drive": {
          "description": "Car drive type. e.g. 4wd, awd or unspecified.",
          "type": "string"
        },
        "fuel": {
          "description": "Car fuel. e.g. diesel, hybrid, unspecified.",
          "type": "string"
        },
        "isAutomatic": {
          "description": "Car transmission. e.g. Y stands for auto, N for manual.",
          "type": "boolean"
        },
        "airConditioning": {
          "description": "Car air conditioning.",
          "type": "boolean"
        }
      },
      "x-api-ref": "CarAcrissCodeDictionaryItem"
    },
    "CarAdditionalOptions": {
      "type": "object",
      "description": "This object includes all the additional options that can be selected at booking time.  Each of them could be part of the options to be paid at booking time (payNow) or at pickupTime (payLater)",
      "properties": {
        "payNow": {
          "$ref": "#/definitions/CarAdditionalOptionsPrice"
        },
        "payLater": {
          "$ref": "#/definitions/CarAdditionalOptionsPrice"
        }
      },
      "x-api-ref": "CarAdditionalOptions"
    },
    "CarAdditionalOptionsPrice": {
      "type": "object",
      "description": "This object includes all the additional options that can be selected at booking time (payNow) or at pickupTime (payLater)",
      "properties": {
        "surcharges": {
          "description": "Surcharges breakdown List of surcharges such as the airport fee or the roadside assistance",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Surcharge"
          }
        },
        "specialEquipments": {
          "description": "List of special equipments such as a child seat or a navigational system",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SpecialEquipment"
          }
        },
        "coverages": {
          "description": "Coverages breakdown List of coverages such as theft protection or collision damage",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coverage"
          }
        }
      },
      "x-api-ref": "CarAdditionalOptionsPrice"
    },
    "CarBase": {
      "type": "object",
      "required": [
        "companyId",
        "pickUpLocationId",
        "dropOffLocationId",
        "pickUpDateTime",
        "dropOffDateTime",
        "rateDetails",
        "prices"
      ],
      "properties": {
        "companyId": {
          "type": "string",
          "description": "Id of the car company.",
          "x-dictionary-name": "company",
          "x-field-name": "carCompany",
          "x-field-type": "CarCompanyDictionaryItem"
        },
        "pickUpLocationId": {
          "type": "string",
          "description": "Id of the pick-up location whish is defined in the car location dictionary.",
          "x-dictionary-name": "location",
          "x-field-name": "pickUpLocation",
          "x-field-type": "CarLocationDictionaryItem"
        },
        "dropOffLocationId": {
          "type": "string",
          "description": "Id of the drop-off location whish is defined in the car location dictionary.",
          "x-dictionary-name": "location",
          "x-field-name": "dropOffLocation",
          "x-field-type": "CarLocationDictionaryItem"
        },
        "pickUpDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Pick-up date and time."
        },
        "dropOffDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Drop-off date and time."
        },
        "vehicle": {
          "description": "all information related to the vehicle (baggage capacity, number of doors, type...).",
          "$ref": "#/definitions/Vehicle"
        },
        "loyaltyNumbers": {
          "type": "array",
          "description": "Loyalty numbers used for this offer.",
          "items": {
            "$ref": "#/definitions/LoyaltyNumbersItem"
          }
        },
        "rateDetails": {
          "$ref": "#/definitions/CarRateDetails"
        },
        "bookingAgency": {
          "type": "string",
          "description": "Booking agency number used for this offer"
        },
        "prices": {
          "description": "all price information related to the rate (base, total, and amounts to be paid now or later).",
          "$ref": "#/definitions/CarPricingRecords"
        }
      },
      "x-api-ref": "CarBase"
    },
    "CarCancelReply": {
      "type": "object",
      "description": "Information about the deleted cars",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        }
      ],
      "x-api-ref": "CarCancelReply"
    },
    "CarCancelRequest": {
      "type": "object",
      "required": [
        "carIds"
      ],
      "properties": {
        "carIds": {
          "type": "array",
          "description": "Identifiers of the Cars to be deleted",
          "items": {
            "type": "string",
            "pattern": "^ST[0-9]{1,2}$"
          }
        }
      },
      "x-api-ref": "CarCancelRequest"
    },
    "CarCommon": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CarBase"
        },
        {
          "type": "object",
          "properties": {
            "ranking": {
              "description": "Conveys the order of the rate only supported by RentalCars (RS).",
              "$ref": "#/definitions/CarRateRanking"
            },
            "bookableOptions": {
              "description": "Option(s) available with this offers",
              "$ref": "#/definitions/CarAdditionalOptions"
            },
            "remarkText": {
              "type": "string",
              "description": "Any additional remark text",
              "x-risk-personal-data-field": "REMARKS"
            }
          }
        }
      ],
      "x-api-ref": "CarCommon"
    },
    "CarCompany": {
      "type": "object",
      "description": "Car company description",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "company name or broker name"
        },
        "logos": {
          "type": "array",
          "description": "company logos or broker logos",
          "items": {
            "$ref": "#/definitions/Image"
          }
        }
      },
      "x-api-ref": "CarCompany"
    },
    "CarCompanyDictionaryItem": {
      "type": "object",
      "description": "Car company information",
      "allOf": [
        {
          "$ref": "#/definitions/CarCompany"
        },
        {
          "type": "object",
          "required": [
            "code"
          ],
          "properties": {
            "code": {
              "type": "string",
              "description": "Car provider code or broker code when the company is a broker"
            },
            "broker": {
              "$ref": "#/definitions/CarCompany"
            }
          }
        }
      ],
      "x-api-ref": "CarCompanyDictionaryItem"
    },
    "CarDictionary": {
      "type": "object",
      "properties": {
        "location": {
          "type": "object",
          "description": "Car location details corresponding to a car location id. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
          "additionalProperties": {
            "$ref": "#/definitions/CarLocationDictionaryItem"
          }
        },
        "company": {
          "type": "object",
          "description": "Car company details map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
          "additionalProperties": {
            "$ref": "#/definitions/CarCompanyDictionaryItem"
          }
        },
        "acriss": {
          "type": "object",
          "description": "Car acriss codes map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
          "additionalProperties": {
            "$ref": "#/definitions/CarAcrissCodeDictionaryItem"
          }
        },
        "shuttle": {
          "type": "object",
          "description": "Car shuttle information map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
          "additionalProperties": {
            "type": "string"
          }
        },
        "ratingCriterion": {
          "type": "object",
          "description": "Description of a rating criterion",
          "additionalProperties": {
            "type": "string"
          }
        },
        "coverage": {
          "type": "object",
          "description": "Coverage types map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
          "additionalProperties": {
            "type": "string"
          }
        },
        "specialEquipment": {
          "type": "object",
          "description": "Special equipment types map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
          "additionalProperties": {
            "type": "string"
          }
        },
        "surcharge": {
          "type": "object",
          "description": "Surcharge types map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
          "additionalProperties": {
            "type": "string"
          }
        },
        "tax": {
          "type": "object",
          "description": "Tax types map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
          "additionalProperties": {
            "type": "string"
          }
        },
        "fuelPolicy": {
          "type": "object",
          "description": "Fuel policy map used in rate info. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "x-api-ref": "CarDictionary"
    },
    "CarDueTimePrice": {
      "type": "object",
      "description": "Total prices and associated breakdowns to be paid at booking time  and later at either pick up or drop off of the car",
      "properties": {
        "payNow": {
          "description": "Price to be paid at booking time.",
          "$ref": "#/definitions/CarPrice"
        },
        "payLater": {
          "description": "Price to be paid at pick up or drop off time.",
          "$ref": "#/definitions/CarPrice"
        }
      },
      "x-api-ref": "CarDueTimePrice"
    },
    "CarInsuranceDocument": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Url"
        },
        {
          "type": "object",
          "properties": {
            "lang": {
              "type": "string",
              "description": "The language in which the document is written.",
              "pattern": "[a-zA-Z0-9-]{2,5}"
            },
            "documentType": {
              "type": "string",
              "description": "A car insurance document (in the form of URL) containing different information. Depending on the type, the document will contain the full policy terms and conditions (policyWording), a summary of the previous (keyFacts) or the certificate of the insurance built with the holder's data (CERTIFICATE)\n",
              "enum": [
                "policyWording",
                "keyFacts",
                "certificate"
              ]
            }
          }
        }
      ],
      "x-api-ref": "CarInsuranceDocument"
    },
    "CarItem": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CarBase"
        },
        {
          "type": "object",
          "required": [
            "id",
            "confirmationNumber",
            "statusCode"
          ],
          "properties": {
            "id": {
              "type": "string",
              "description": "Id to be used for the interaction with order"
            },
            "confirmationNumber": {
              "type": "string",
              "description": "Confirmation number related to the car booking",
              "x-risk-personal-data-field": "CAR_CONFIRMATION_NUMBER"
            },
            "statusCode": {
              "type": "string",
              "description": "Operational status. HK = confirmed, HL = waitlist, TK = schedule change confirmed, schedule change waitlist, UN = unable to confirm not operating, UC = unable to confirm, HX = have cancelled, NO = no action taken.",
              "x-dictionary-name": "bookingStatus",
              "x-field-name": "status",
              "x-field-type": "BookingStatusDictionaryItem"
            },
            "tid": {
              "description": "Temporary id that can be used to associate requested and returned cars. It is only valid the time of the transaction.",
              "type": "string",
              "pattern": "[a-zA-Z0-9_]{1,20}"
            },
            "remarks": {
              "type": "array",
              "description": "Additional remarks from the car provider",
              "items": {
                "type": "string"
              },
              "x-risk-personal-data-field": "REMARKS"
            },
            "travelerIds": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ],
      "x-api-ref": "CarItem"
    },
    "CarLocationDictionaryItem": {
      "type": "object",
      "description": "Location information",
      "required": [
        "location"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/AddressBase"
        },
        "location": {
          "type": "object",
          "required": [
            "type",
            "code"
          ],
          "properties": {
            "type": {
              "description": "The type of the location code return Amadeus if the location code is an amadeus format. e.g.  NCET01 ( iataCode + vicinityCode + vicinityNumber ) company if the location code is a company format without any specific format.",
              "type": "string",
              "enum": [
                "amadeus",
                "company"
              ]
            },
            "code": {
              "description": "Amadeus or company detailed location code concatenated with provider code. e.g. MUCT01, ORYC12, 12314sc",
              "type": "string",
              "pattern": "[a-zA-Z0-9]{4,8}"
            },
            "iataCode": {
              "type": "string",
              "description": "IATA location code (http://www.iata.org/publications/Pages/code-search.aspx)",
              "pattern": "[a-zA-Z]{3}"
            },
            "isAirportCode": {
              "type": "boolean",
              "description": "value states if the IATA location code refers to an IATA airport code"
            }
          }
        },
        "companyCode": {
          "description": "2 letters provider code",
          "type": "string",
          "pattern": "[a-zA-Z]{2}"
        },
        "geoLocalization": {
          "type": "object",
          "description": "Geo localization details",
          "properties": {
            "longitude": {
              "type": "number",
              "format": "double",
              "description": "Geocode longitude"
            },
            "latitude": {
              "type": "number",
              "format": "double",
              "description": "Geocode latitude"
            },
            "distanceUnit": {
              "type": "string",
              "description": "Distance unit of measurement"
            },
            "distance": {
              "type": "string",
              "description": "Distance value from the input geolocation Only used when the search was made for a geolocation search\n"
            }
          }
        },
        "openingTimes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OpeningHours"
          }
        },
        "isDeliverable": {
          "type": "boolean",
          "description": "Delivery option available"
        },
        "isCollectable": {
          "type": "boolean",
          "description": "Collection option available"
        },
        "outOfHours": {
          "type": "boolean",
          "description": "Out of hours option available"
        },
        "shuttle": {
          "type": "string",
          "description": "filled only if location is airport with possible values: AS: Airport shuttle CALL: Call for shuttle CRS:  Car Rental shuttle CRSAS: Shuttle to vehicle MULT: Multiple shuttles needed NON: No shuttle-walk to vehicle",
          "x-dictionary-name": "shuttle",
          "x-field-name": "shuttleInformation",
          "x-field-type": "string"
        },
        "airportTerminals": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "Airport terminal if the location if an airport location"
          }
        },
        "contact": {
          "type": "object",
          "description": "location contact elements",
          "properties": {
            "phoneNumber": {
              "type": "string",
              "description": "Location phone number"
            },
            "faxNumber": {
              "type": "string",
              "description": "Location fax number"
            },
            "email": {
              "type": "string",
              "description": "Location email address"
            }
          }
        },
        "paymentPolicies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PaymentPolicy"
          },
          "description": "The payment methods accepted at shopping time by a Car Provider in the location"
        },
        "rating": {
          "$ref": "#/definitions/Rating",
          "description": "Customers feedback returned by provider. It is composed of a global score and different service categories in which the valoration was given.\n"
        },
        "termsAndConditions": {
          "type": "array",
          "description": "Terms and Conditions URLs The documents are requested to the provider in the preferred language used on the request. However, they might be returned in a different one depending on the available translations on provider side.",
          "items": {
            "$ref": "#/definitions/CarTermsAndCondition"
          }
        },
        "marketingText": {
          "type": "string",
          "description": "Location marketing text"
        }
      },
      "x-api-ref": "CarLocationDictionaryItem"
    },
    "CarMainDictionary": {
      "allOf": [
        {
          "$ref": "#/definitions/CarDictionary"
        },
        {
          "type": "object",
          "properties": {
            "currency": {
              "type": "object",
              "description": "Currencies map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "$ref": "#/definitions/CurrencyDictionaryItem"
              }
            },
            "country": {
              "type": "object",
              "description": "Countries map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        }
      ],
      "x-api-ref": "CarMainDictionary"
    },
    "CarMileage": {
      "type": "object",
      "description": "Details of a car offer mileage: rates, rental period, included distance, etc",
      "allOf": [
        {
          "$ref": "#/definitions/Mileage"
        },
        {
          "type": "object",
          "required": [
            "isUnlimited"
          ],
          "properties": {
            "isUnlimited": {
              "type": "boolean",
              "description": "Conveys whether the car can be used for an unlimited distance"
            },
            "extraMileage": {
              "$ref": "#/definitions/ExtraMileage"
            }
          }
        }
      ],
      "x-api-ref": "CarMileage"
    },
    "CarOffer": {
      "type": "object",
      "description": "Object containing the information related to a car offer. Not all fields are necessarily returned: an additional call to /search/car-offers/{carOfferId} might be needed to get an exhaustive set of data",
      "allOf": [
        {
          "$ref": "#/definitions/CarCommon"
        },
        {
          "type": "object",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique id representating a car offer"
            }
          }
        }
      ],
      "x-api-ref": "CarOffer"
    },
    "CarOfferFeatured": {
      "type": "object",
      "description": "Object containing the information related to a car offer and additional information exclusively related to teaser.",
      "allOf": [
        {
          "$ref": "#/definitions/CarOffer"
        },
        {
          "type": "object",
          "properties": {
            "displayOrder": {
              "type": "integer",
              "description": "ordinal number of the offer after ordering"
            }
          }
        }
      ],
      "x-api-ref": "CarOfferFeatured"
    },
    "CarOfferReply": {
      "type": "object",
      "description": "Details of the car offer corresponding to the id provided in input",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/CarOffer"
            },
            "dictionaries": {
              "$ref": "#/definitions/CarMainDictionary"
            }
          }
        }
      ],
      "x-api-ref": "CarOfferReply"
    },
    "CarOffersListReply": {
      "type": "object",
      "description": "List of car offers corresponding to the search criteria",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CarOffer"
              }
            },
            "dictionaries": {
              "$ref": "#/definitions/CarMainDictionary"
            }
          }
        }
      ],
      "x-api-ref": "CarOffersListReply"
    },
    "CarOffersSelectionRequest": {
      "description": "For a specific car offer, specifies if non mandatory sub-offer items have been selected for purchase by the end user or not\n",
      "type": "object",
      "required": [
        "carOfferId"
      ],
      "properties": {
        "carOfferId": {
          "type": "string"
        },
        "travelerIds": {
          "type": "array",
          "items": {
            "description": "Travelers associated to the car If no traveler is present in input, the first adult found will be taken for the booking",
            "type": "string"
          }
        },
        "bookableOptionIds": {
          "type": "array",
          "items": {
            "description": "Bookable options associated to the car. Can be of three different types: Special equipment, coverage or surcharge. Special equipment: Ex \"CSB\" for \"CHILD SEAT FOR BABY\" or \"NVS\" for \"NAVIGATION GUARANTEED\". Coverage: Ex \"PAC\" for \"PERSONAL ACCIDENT COVERAGE\" or \"LDW\" for \"LOSS DAMAGE WAIVER\". Surcharge: Ex \"ASR\" for \"AIRPORT SURCHARGE\".",
            "type": "string"
          }
        },
        "tid": {
          "description": "Temporary id that can be used to associate requested and returned cars. It is only valid the time of the transaction.",
          "type": "string",
          "pattern": "[a-zA-Z0-9_]{1,20}"
        },
        "marketingAirlineCode": {
          "description": "IATA airline code (http://www.iata.org/publications/Pages/code-search.aspx) Flight information allows the Car provider to know when the customer will arrive at the agency",
          "type": "string",
          "pattern": "[A-Z0-9]{2,3}",
          "example": "AY"
        },
        "marketingFlightNumber": {
          "description": "Marketing flight number Flight information allows the Car provider to know when the customer will arrive at the agency",
          "type": "string",
          "pattern": "[A-Z0-9]*",
          "example": "827"
        },
        "email": {
          "type": "string",
          "description": "Email taken into account for the Car rent",
          "x-risk-personal-data-field": "EMAIL_ADDRESS"
        },
        "driverAge": {
          "type": "integer",
          "description": "Age of the main driver for the rented Car",
          "pattern": "^[0-9]{2,3}$",
          "x-risk-personal-data-field": "DATE_OF_BIRTH"
        },
        "frequentFlyer": {
          "$ref": "#/definitions/FrequentFlyer",
          "description": "Frequent flyer to be taken into account for mileage accrual"
        }
      },
      "x-api-ref": "CarOffersSelectionRequest"
    },
    "CarOrderDictionary": {
      "allOf": [
        {
          "$ref": "#/definitions/CarMainDictionary"
        },
        {
          "type": "object",
          "properties": {
            "bookingStatus": {
              "type": "object",
              "description": "Status map for flights, services, seats and special service requests. For more details please see [Maps in dictionary documentation] (https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "$ref": "#/definitions/BookingStatusDictionaryItem"
              }
            }
          }
        }
      ],
      "x-api-ref": "CarOrderDictionary"
    },
    "CarPrice": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Price"
        },
        {
          "type": "object",
          "properties": {
            "specialEquipments": {
              "description": "List of spercial equipments such as a child seat or a navigational system that can be requested at booking time",
              "type": "array",
              "items": {
                "$ref": "#/definitions/SpecialEquipment"
              }
            },
            "totalSpecialEquipments": {
              "description": "Sum of all special equipments",
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "coverages": {
              "description": "Coverages breakdown List of coverages such as theft protection or collision damage",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coverage"
              }
            },
            "totalCoverages": {
              "description": "Sum of all coverages",
              "type": "integer",
              "format": "int64",
              "minimum": 0
            }
          }
        }
      ],
      "x-api-ref": "CarPrice"
    },
    "CarPricingRecords": {
      "type": "object",
      "properties": {
        "ratePlanPrice": {
          "$ref": "#/definitions/CarRatePlanPrice"
        },
        "estimatedTotal": {
          "$ref": "#/definitions/CarPrice"
        },
        "additionalOptions": {
          "$ref": "#/definitions/CarAdditionalOptions"
        },
        "dueTimePrices": {
          "$ref": "#/definitions/CarDueTimePrice"
        }
      },
      "x-api-ref": "CarPricingRecords"
    },
    "CarRateDetails": {
      "type": "object",
      "description": "Extra information of the rate",
      "required": [
        "category",
        "code",
        "mileage"
      ],
      "properties": {
        "identifier": {
          "type": "string",
          "description": "Reference number identifying the car rate. e.g. N3LRPD2KV2E7OTSL."
        },
        "category": {
          "type": "string",
          "description": "Car rate category original code"
        },
        "code": {
          "type": "string",
          "description": "Code corresponding to the car and associated location. e.g. 86IA."
        },
        "expirationTime": {
          "type": "string",
          "format": "date-time",
          "description": "The specific date and time until which the rate is valid."
        },
        "mileage": {
          "$ref": "#/definitions/CarMileage"
        },
        "freeCancellation": {
          "type": "boolean",
          "description": "Conveys if the rate can be cancelled without an extra cost for the customer. If this information is not returned by the provider, this attribute will not be present nor filled."
        },
        "freeModification": {
          "type": "boolean",
          "description": "Conveys if the rate can be modified (i.e. Pick-up / Drop-off dates) without an extra cost for the customer. If this information is not returned by the provider, this attribute will not be present nor filled."
        },
        "fuelPolicy": {
          "type": "string",
          "description": "Fuel policy applying to the offer e.g. FTF stand for `Fuel To Fuel`",
          "x-dictionary-name": "fuelPolicy",
          "x-field-name": "fuelPolicyInformation",
          "x-field-type": "string"
        }
      },
      "x-api-ref": "CarRateDetails"
    },
    "CarRatePlanPrice": {
      "type": "object",
      "description": "Price expressed in respect of a specific time window",
      "allOf": [
        {
          "$ref": "#/definitions/CarPrice"
        },
        {
          "type": "object",
          "properties": {
            "pricingTimeWindow": {
              "type": "string",
              "description": "Period for which the rate plan pricing applies",
              "enum": [
                "hourly",
                "daily",
                "monthly",
                "weekend",
                "weekly",
                "fullPeriod"
              ]
            }
          }
        }
      ],
      "x-api-ref": "CarRatePlanPrice"
    },
    "CarRateRanking": {
      "type": "object",
      "description": "Conveys the order of the rate.",
      "properties": {
        "providerOrder": {
          "type": "integer",
          "description": "The relative order among all the returned rates for this provider. For example Rental Cars sorts the rates based on a custom algorithm. This algorithm takes into account the popularity of the rate, the point of sale or any other specific criteria. The lower the ranking is, the most recommended the recommendation is.",
          "example": 1
        }
      },
      "x-api-ref": "CarRateRanking"
    },
    "CarRecommendation": {
      "type": "object",
      "description": "A car recommendation exposes a list of car offers associated to the reference relevant criteria",
      "properties": {
        "relevantCriteria": {
          "$ref": "#/definitions/CarRelevantCriteria"
        },
        "carOffers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CarOfferFeatured"
          }
        }
      },
      "x-api-ref": "CarRecommendation"
    },
    "CarRelevantCriteria": {
      "type": "object",
      "description": "Set of search criteria applied to generate the recommendation, based on the AAM filing. These information can be re-used to search, in standalone mode, for car offers.",
      "required": [
        "pickupDateTime",
        "dropoffDateTime",
        "pickupLocationCode",
        "dropoffLocationCode"
      ],
      "properties": {
        "pickupDateTime": {
          "description": "Date time to pick-up the car in ISO 8601 [http://www.w3.org/TR/NOTE-datetime]",
          "type": "string",
          "format": "date-time"
        },
        "dropoffDateTime": {
          "description": "Date time to drop-off the car in ISO 8601 [http://www.w3.org/TR/NOTE-datetime]",
          "type": "string",
          "format": "date-time"
        },
        "pickupLocationCode": {
          "description": "Car pick-up location code (airport code)",
          "type": "string",
          "pattern": "[a-zA-Z]{3}"
        },
        "dropoffLocationCode": {
          "description": "Car drop-off location code (airport code)",
          "type": "string",
          "pattern": "[a-zA-Z]{3}"
        },
        "providers": {
          "description": "List of Amadeus car providers to filter the response by.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Provider"
          }
        },
        "companyNames": {
          "description": "List of car supplier company names. A company name here is the brand name of car supplier on a broker. For example, Rentalcars is the broker, while Avis is the company name of Avis supplier.",
          "example": [
            "Avis",
            "Sixt",
            "Europcar",
            "Green Motion"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "passengerCapacities": {
          "description": "List of car passenger capacities. For example, [1,2,3,4,5] for all the car capacities from 1 to 5 passengers. Or [4,9,16] for the car capacity of 4, 9 or 16 passengers.",
          "example": [
            4,
            9,
            16
          ],
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "isUnlimitedMileage": {
          "description": "This is to request only unlimited mileage rates",
          "type": "boolean"
        },
        "maxPriceAmount": {
          "description": "This is to define a maximum total price to be returned. Rates with prices above this will not be returned Example: 150 EUR",
          "$ref": "#/definitions/Amount"
        },
        "acrissCodes": {
          "description": "Car ACRISS codes to filter the results. Wildcards can be used e.g. *CMR, CD**. Please see here for more details [http://www.acriss.org/car-codes.asp]",
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "[a-zA-Z*]{4}"
          }
        },
        "orderBy": {
          "description": "Sorting order operator related to a car recommendation that is used for displaying the list of car offers. priceAsc, to order car offers by price ascending; priceDesc, to order car offers by price descending; providerPreferredOrderAsc, to order car offers by car provider preference.",
          "type": "string",
          "enum": [
            "priceAsc",
            "priceDesc",
            "providerPreferredOrderAsc"
          ]
        }
      },
      "x-api-ref": "CarRelevantCriteria"
    },
    "CarsListReply": {
      "type": "object",
      "description": "List of booked cars",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CarItem"
              }
            },
            "dictionaries": {
              "$ref": "#/definitions/CarOrderDictionary"
            }
          }
        }
      ],
      "x-api-ref": "CarsListReply"
    },
    "Cart": {
      "type": "object",
      "description": "Shopping cart content",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "Cart id",
          "type": "string",
          "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
        },
        "creationPointOfSale": {
          "$ref": "#/definitions/PointOfSaleCommon"
        },
        "travelers": {
          "type": "array",
          "description": "List of travelers (individual taking part in the journey)",
          "items": {
            "$ref": "#/definitions/Traveler"
          }
        },
        "airOffers": {
          "type": "array",
          "description": "List of air offers",
          "items": {
            "$ref": "#/definitions/AirOffer"
          }
        },
        "services": {
          "type": "array",
          "description": "List of services (e.g. baggage, meals...)",
          "items": {
            "$ref": "#/definitions/ServiceItem"
          }
        },
        "seats": {
          "type": "array",
          "description": "List of seats (seat selection and associated travelers)",
          "items": {
            "$ref": "#/definitions/SeatItem"
          }
        },
        "frequentFlyerCards": {
          "type": "array",
          "description": "List of frequent flyer cards (for mileage accrual)",
          "items": {
            "$ref": "#/definitions/FrequentFlyerCard"
          }
        },
        "contacts": {
          "type": "array",
          "description": "List of contacts (phone number, email or address)",
          "items": {
            "$ref": "#/definitions/Contact"
          }
        },
        "carOffers": {
          "type": "array",
          "description": "List of car offers",
          "items": {
            "$ref": "#/definitions/CarOffer"
          }
        },
        "formOfIdentifications": {
          "type": "array",
          "description": "List of form of identifications",
          "items": {
            "$ref": "#/definitions/FormOfIdentificationDetail"
          }
        },
        "extensions": {
          "type": "array",
          "description": "List of extensions in the cart.",
          "items": {
            "$ref": "#/definitions/Extension"
          }
        },
        "hotelItems": {
          "type": "array",
          "description": "List of hotel offers",
          "items": {
            "$ref": "#/definitions/HotelOffer"
          }
        }
      },
      "x-api-ref": "Cart"
    },
    "CartDictionary": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/DictionaryCommon"
        },
        {
          "type": "object",
          "properties": {
            "fareFamily": {
              "type": "object",
              "description": "Fare families map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "$ref": "#/definitions/FareFamilyDictionaryItem"
              }
            },
            "hotelDetails": {
              "type": "object",
              "description": "Hotel details information map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "$ref": "#/definitions/Hotel"
              }
            },
            "carDictionary": {
              "$ref": "#/definitions/CarDictionary"
            },
            "bookingStatus": {
              "type": "object",
              "description": "Status map for flights, services, seats and special service requests. For more details please see [Maps in dictionary documentation] (https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "$ref": "#/definitions/BookingStatusDictionaryItem"
              }
            },
            "fareFamilyWithServices": {
              "type": "object",
              "description": "Fare families with services map. For more details please see [Maps in dictionary documentation] (https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "$ref": "#/definitions/FareFamilyWithServicesDictionaryItem"
              }
            },
            "service": {
              "type": "object",
              "description": "Services map. For more details please see [Maps in dictionary documentation] (https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "$ref": "#/definitions/ServiceDictionaryItem"
              }
            }
          }
        }
      ],
      "x-api-ref": "CartDictionary"
    },
    "CarTermsAndCondition": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Url"
        },
        {
          "type": "object",
          "properties": {
            "lang": {
              "type": "string",
              "description": "The language in which the document is written. Could be different from the one requested by the user if not available pattern: '[a-zA-Z0-9-]{2,5}'"
            }
          }
        }
      ],
      "x-api-ref": "CarTermsAndCondition"
    },
    "CartIncludes": {
      "type": "object",
      "description": "Additional data for this cart will be included in the response.  The \"include\" query parameter triggers this additional data display.\n",
      "properties": {
        "baggagePolicies": {
          "$ref": "#/definitions/BaggagePolicies"
        }
      },
      "x-api-ref": "CartIncludes"
    },
    "CartReply": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/Cart"
            },
            "included": {
              "$ref": "#/definitions/CartIncludes"
            },
            "dictionaries": {
              "$ref": "#/definitions/CartDictionary"
            }
          }
        }
      ],
      "x-api-ref": "CartReply"
    },
    "CartRequest": {
      "type": "object",
      "description": "CartRequest can be used to create a Cart with sub-resources such as Travelers, Contacts, Frequent flyer cards\nContacts and Frequent flyer cards can be associated to Travelers using temporary ids, when those sub-resources are manipulated in the same transaction\n",
      "properties": {
        "airOfferId": {
          "description": "identifier of an offer",
          "type": "string",
          "pattern": "[a-zA-Z0-9-]{1,120}"
        },
        "airBoundIds": {
          "description": "List of airbounds to be used as elements composing the offer to be stored in the cart",
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "[a-zA-Z0-9-]{1,120}"
          }
        },
        "milesSplitId": {
          "type": "string",
          "description": "The id of the one of the miles&cash splits selected from the response of a preceeding call to the miles&cash slider (see entry point GET /payment-methods/miles-payment). The airOfferId (also provided in input) and this miles&cash split id together (if present) are used to create a new air offer and store it in the cart.",
          "pattern": "[a-zA-Z0-9#-]{1,120}"
        },
        "airOfferTravelerSelections": {
          "type": "array",
          "description": "List of associations between travelers described in the offer and existing travelers in the cart",
          "items": {
            "$ref": "#/definitions/AirOfferTravelerSelection"
          }
        },
        "title": {
          "description": "DEPRECATED Cart label or name.  This field is not processed by Digital Commerce API and will be removed in V3.",
          "type": "string"
        },
        "state": {
          "description": "DEPRECATED Cart state (list to be defined during development) This field is not processed by Digital Commerce API and will be removed in V3.",
          "type": "string"
        },
        "travelers": {
          "type": "array",
          "description": "List of travelers (individual taking part in the journey)",
          "items": {
            "$ref": "#/definitions/Traveler"
          }
        },
        "frequentFlyerCards": {
          "type": "array",
          "description": "List of frequent flyer cards (for mileage accrual)",
          "items": {
            "$ref": "#/definitions/FrequentFlyerCard"
          }
        },
        "contacts": {
          "type": "array",
          "description": "List of contacts (phone number, email or address)",
          "items": {
            "$ref": "#/definitions/Contact"
          }
        },
        "extensions": {
          "description": "Add extensions to the cart.\n",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Extension"
          }
        },
        "formOfIdentifications": {
          "type": "array",
          "description": "List of form of identifications",
          "items": {
            "$ref": "#/definitions/FormOfIdentificationDetail"
          }
        }
      },
      "x-api-ref": "CartRequest"
    },
    "ChangeFlightReaccommodationCondition": {
      "description": "Indicates the condition that applies to search an alternative offers for free\n",
      "type": "object",
      "properties": {
        "originLocationCodes": {
          "type": "array",
          "description": "List of allowed location codes that can be used as originLocationCode in GET search/alternative-offers\n",
          "items": {
            "type": "string",
            "pattern": "[a-zA-Z]{3}"
          }
        },
        "destinationLocationCodes": {
          "type": "array",
          "description": "List of allowed location codes that can be used as destinationLocationCode in GET search/alternative-offers\n",
          "items": {
            "type": "string",
            "pattern": "[a-zA-Z]{3}"
          }
        },
        "departureDateTime": {
          "$ref": "#/definitions/FlightReaccommodationPeriod"
        }
      },
      "x-api-ref": "ChangeFlightReaccommodationCondition"
    },
    "ChangeFlightReaccommodationEligibility": {
      "description": "Indicates the eligibility to change a bound for free following a disruption.\nThis is only available for airlines, having contracted the `Digital Disruption Recovery` product.\nIn case the bound cannot be changed for free by the API, a reason code and title is provided. The following reason code can be returned:\n| Code  | Title                                            |\n|-------|--------------------------------------------------|\n| 100   | Group PNR                                        |\n| 101   | PNR containing no-show segment                   |\n| 102   | PNR containing UMNR                              |\n| 103   | Redemption PNR                                   |\n| 200   | Departure time of the first segment is not within allowed window.       |\n| 201   | Bound is cancelled or partialy cancelled.        |\n| 202   | Bound with more than 3 FROM segments to be rebooked in DCS window.      |\n| 203   | Bound with more than 5 FROM segments to be rebooked in RES window.      |\n| 204   | Re-accommodation too far from departure.         |\n| 205   | Bound has been manually updated.                 |\n| 206   | Bound has already been rebooked via SELF channel.|\n| 207   | Bound does not belong to the reference airline.  |\n| 208   | Bound does not have the same Origin and Destination.      |\n| 209   | Codeshare Bound is not eligible.                 |\n| 210   | First flight of the bound already departed.      |\n| 211   | Bound too far from departure.                    |\n| 212   | Bound was impacted by TIM only.                  |\n| 213   | Bound already acknowledged.                      |\n| 215   | The number of the allowed changes for the Bound has been reached.    |\n| 218   | Codeshare Bound is not eligible as it contains an operating blockspace segment.    |\n| 220   | Bound is not eligible as all segments are non INV handled.    |\n| 300   | Missing or invalid ticket.                       |\n| 65211   | Functionality is not enabled.                  |",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/BoundEligibility"
        },
        {
          "type": "object",
          "properties": {
            "nonEligibilityReasons": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NonEligibilityReason"
              }
            },
            "conditions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChangeFlightReaccommodationCondition"
              }
            }
          }
        }
      ],
      "x-api-ref": "ChangeFlightReaccommodationEligibility"
    },
    "CheckInBaggagePolicies": {
      "type": "object",
      "description": "Baggage policies organized by category that apply to a specific group of travelers. All the policies apply to all the flights in the journey.\nE.g: a traveler is entitled to have one checked bag for free, with a maximum weight of 23kg and maximum size of 158cm.\n",
      "required": [
        "travelerIds"
      ],
      "properties": {
        "travelerIds": {
          "description": "List of travelers to which the policies apply.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "bagAmountLimit": {
          "description": "Total limit on number of checked bags for the traveler group (free or paid)",
          "type": "integer"
        },
        "totalAllowance": {
          "description": "Total free baggage allowance of the traveler group in the journey",
          "$ref": "#/definitions/BaggagePolicyDetails"
        },
        "adultBaggageAllowance": {
          "description": "Free baggage allowance for adults in the traveler group in this journey",
          "$ref": "#/definitions/BaggagePolicyDetails"
        },
        "infantBaggageAllowance": {
          "description": "Free baggage allowance for infants in the traveler group in this journey",
          "$ref": "#/definitions/BaggagePolicyDetails"
        },
        "agentWaiver": {
          "description": "Free baggage allowance added by an agent for the traveler group in this journey",
          "$ref": "#/definitions/BaggagePolicyDetails"
        },
        "cabinAllowance": {
          "description": "Number of free baggages allowed in the cabin for the traveler group in this journey",
          "$ref": "#/definitions/BaggagePolicyDetails"
        },
        "frequentFlyerBaggageAllowance": {
          "description": "Number of free baggages related to the frequent flyer status of travelers in the group in this journey",
          "$ref": "#/definitions/BaggagePolicyDetails"
        },
        "fareTypeAllowance": {
          "description": "Number of free baggages related to the fare type or the traveler group in this journey",
          "$ref": "#/definitions/BaggagePolicyDetails"
        },
        "prepaidAllowance": {
          "description": "Number of baggages paid during booking / manage my booking or the traveler group in this journey",
          "$ref": "#/definitions/BaggagePolicyDetails"
        },
        "discretionaryWaiver": {
          "description": "Extra allowance (usually weight) to handle scale imprecision at the check-in desk, speed up check-in or increase customer satisfaction.",
          "$ref": "#/definitions/BaggagePolicyDetails"
        },
        "excessWaiver": {
          "description": "Extra allowance to allow customers to have bags accepted that are heavier than the maximum allowed weight without charging them a fee.",
          "$ref": "#/definitions/BaggagePolicyDetails"
        },
        "previouslyPaidDiscount": {
          "description": "Number of excess bags which have already been paid",
          "$ref": "#/definitions/BaggagePolicyDetails"
        },
        "excessBaggagePrices": {
          "description": "Array of prices of excess baggages. Since an excess baggage price varies depending if it's the first, second or third and beyond, this property holds an array of prices associated to an ordinal number. The price associated to the highest ordinal number N is to be used for excess baggage Nth and beyond.\nExample: this property defines a price of 20EUR for the first baggage and 25EUR for the second and the user wants to add 3 excess baggages. The price will be 20 + 25 + 25 = 70EUR\n",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CheckInExcessBaggagePrice"
          }
        },
        "allowedSpecialBags": {
          "description": "List of allowed special bag types with their associated price, if known.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CheckInSpecialBaggageItem"
          }
        }
      },
      "x-api-ref": "CheckInBaggagePolicies"
    },
    "CheckInBaggagePoliciesReply": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "description": "Baggage allowance and price for each group of passengers in the journey. The policies apply to all the flights in the journey.\n",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CheckInBaggagePolicies"
              }
            },
            "dictionaries": {
              "$ref": "#/definitions/BaggagePoliciesDictionary"
            }
          }
        }
      ],
      "x-api-ref": "CheckInBaggagePoliciesReply"
    },
    "CheckinChannel": {
      "type": "object",
      "description": "Indicates the channel by which the data has been create or updated",
      "properties": {
        "channel": {
          "description": "List of enums to indicate the channel by which the data has been create or updated",
          "type": "string",
          "enum": [
            "CRYPTIC",
            "EXTERNAL_DCS",
            "JFE",
            "KIOSK",
            "MOBILE_PHONE",
            "SMS",
            "TELEPHONE",
            "WEB",
            "EXTERNAL_FRONTEND"
          ]
        }
      },
      "x-api-ref": "CheckinChannel"
    },
    "CheckInExcessBaggagePrice": {
      "type": "object",
      "description": "Price of the Nth excess baggage, identified by an ordinal number.\nExample: if my price has ordinalNumber = 2, it means that it holds the price of the second excess baggage.\n",
      "properties": {
        "ordinalNumber": {
          "description": "Ordinal number to which the price applies to.",
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "price": {
          "description": "Price of the excess baggage.",
          "$ref": "#/definitions/Amount"
        }
      },
      "x-api-ref": "CheckInExcessBaggagePrice"
    },
    "CheckInFlight": {
      "type": "object",
      "description": "Flight information when within the Departure Control System",
      "allOf": [
        {
          "$ref": "#/definitions/Flight"
        },
        {
          "type": "object",
          "required": [
            "id",
            "status",
            "acceptanceStatus"
          ],
          "properties": {
            "id": {
              "type": "string",
              "description": "Id of the CheckInFlight"
            },
            "status": {
              "description": "Current flight status",
              "type": "string",
              "enum": [
                "scheduled",
                "gated",
                "departed",
                "finalized",
                "suspended",
                "locked",
                "cancelled",
                "reallocated",
                "notOperated",
                "notOK",
                "statusNotSupportedInThisVersion"
              ]
            },
            "acceptanceStatus": {
              "description": "Current acceptance status of the flight for agent check-in at airport.\nSelf-service check-in may have additional limitations, which can be queried at journey level.\n",
              "type": "string",
              "enum": [
                "notOpened",
                "opened",
                "gated",
                "closed",
                "finalized",
                "suspended",
                "notOK",
                "statusNotSupportedInThisVersion"
              ]
            },
            "operatingFlightNumber": {
              "description": "Operating flight number",
              "type": "string",
              "pattern": "[A-Z0-9]*",
              "example": "123"
            },
            "isIATCI": {
              "description": "Is the flight an IATCI (Inter Airline Through Check-In) flight - i.e. operated by another airline without a codeshare agreement",
              "type": "boolean",
              "default": false
            },
            "isPassive": {
              "description": "Is the flight passive - i.e. managed in another DCS or another partition of Altea DCS Passive flights might have some restrictions, for example seats cannot be changed before acceptance",
              "type": "boolean",
              "default": false
            },
            "isPilgrimConfirmationRequired": {
              "description": "Indicate if the flight requires the passenger to confirm their participation to Pilgrimage (Islamic pilgrimage to Mecca).",
              "type": "boolean",
              "default": false
            }
          }
        }
      ],
      "x-api-ref": "CheckInFlight"
    },
    "CheckInFlightDictionary": {
      "type": "object",
      "properties": {
        "flight": {
          "type": "object",
          "description": "Flight information corresponding to a flight id. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
          "additionalProperties": {
            "$ref": "#/definitions/CheckInFlight"
          }
        },
        "airline": {
          "type": "object",
          "description": "Airlines map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
          "additionalProperties": {
            "type": "string"
          }
        },
        "aircraft": {
          "type": "object",
          "description": "Aircrafts map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
          "additionalProperties": {
            "type": "string"
          }
        },
        "location": {
          "type": "object",
          "description": "Locations map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
          "additionalProperties": {
            "$ref": "#/definitions/LocationDictionaryItem"
          }
        },
        "country": {
          "type": "object",
          "description": "Countries map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "x-api-ref": "CheckInFlightDictionary"
    },
    "CheckInFlightIdObject": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "CheckInFlight id, as defined in CheckInFlight dictionary",
          "x-dictionary-name": "flight",
          "x-field-name": "checkInFlight",
          "x-field-type": "CheckInFlight"
        }
      },
      "x-api-ref": "CheckInFlightIdObject"
    },
    "CheckInOutPolicy": {
      "type": "object",
      "properties": {
        "checkIn": {
          "type": "string",
          "description": "Represents the check-in time limit in ISO-8601 format [http://www.w3.org/TR/xmlschema-2/#time]"
        },
        "checkInDescription": {
          "$ref": "#/definitions/TextWithLanguageType"
        },
        "checkOut": {
          "type": "string",
          "description": "Represents the check-out time limit in ISO-8601 format [http://www.w3.org/TR/xmlschema-2/#time]"
        },
        "checkOutDescription": {
          "$ref": "#/definitions/TextWithLanguageType"
        }
      },
      "x-api-ref": "CheckInOutPolicy"
    },
    "CheckinRelationship": {
      "description": "Represents the supported checkin operation.",
      "type": "object",
      "properties": {
        "rel": {
          "description": "The type of supported operation. The following table provides the types and their corresponding checkin operation.\n \n |  Type                   |    Supported checkin operation(s)                                        |            \n |:-----------------------:|--------------------------------------------------------------------------|\n  \n |  CHECKIN_IDENTIFICATION |  /checkin/journeys                                                       |\n\n |  REGULATORY_CHECK       |  /checkin/journeys/{journeyId}/travelers/{travelerId}/regulatory-details |\n\n |  BOARDINGPASS_ISSUANCE  |  /checkin/boarding-passes                                                |\n\n |  TRAVELLER_MANAGEMENT   |  /checkin/journeys/{journeyId}/travelers                                 |\n\n |  CHECKIN_ACCEPTANCE     |  /checkin/journeys/{journeyId}/acceptance                                |",
          "type": "string",
          "enum": [
            "CHECKIN_IDENTIFICATION",
            "REGULATORY_CHECK",
            "BOARDINGPASS_ISSUANCE",
            "TRAVELLER_MANAGEMENT",
            "CHECKIN_ACCEPTANCE"
          ]
        },
        "methods": {
          "description": "HTTP methods supported by the current operation (selected among POST, PUT, PATCH, GET, DELETE)",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "PUT",
              "PATCH",
              "DELETE"
            ]
          }
        }
      },
      "x-api-ref": "CheckinRelationship"
    },
    "CheckinRelationships": {
      "description": "Describes the list of supported checkin operations.",
      "type": "object",
      "properties": {
        "collection": {
          "type": "array",
          "description": "The list of supported checkin operations",
          "items": {
            "$ref": "#/definitions/CheckinRelationship"
          }
        }
      },
      "x-api-ref": "CheckinRelationships"
    },
    "CheckInSecurityQuestion": {
      "type": "object",
      "description": "Security question set by the airline following national requirements in order to check-in a traveler. Travelers need to answer the question and the result should be provided in the POST acceptance service. It is adviced to contact the airline to know all the questions possible as they are in control of those.\n",
      "required": [
        "questionCode"
      ],
      "properties": {
        "questionCode": {
          "description": "Code of the question as set by the airline in the Departure Control System business rule system. Example: 14651",
          "type": "string"
        },
        "questionDescription": {
          "description": "Readable question, usually only in English, that the traveler should answer. Example: Has anyone asked you to put something in your bag for them?\n",
          "type": "string"
        }
      },
      "x-api-ref": "CheckInSecurityQuestion"
    },
    "CheckInSpecialBaggageItem": {
      "type": "object",
      "description": "Item that represents a special bag.",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "description": "Type of the special bag as filed by the airline.",
          "type": "string"
        },
        "description": {
          "description": "Readable description of the special baggage type, usually only in english. Example: Hunting trophy",
          "type": "string"
        },
        "price": {
          "description": "Price of the special bag, if known.",
          "$ref": "#/definitions/Amount"
        }
      },
      "x-api-ref": "CheckInSpecialBaggageItem"
    },
    "CheckinSystem": {
      "type": "object",
      "description": "Represents the system performing the check-in of the journey",
      "required": [
        "owner"
      ],
      "properties": {
        "owner": {
          "$ref": "#/definitions/Company"
        },
        "relationships": {
          "$ref": "#/definitions/CheckinRelationships"
        }
      },
      "x-api-ref": "CheckinSystem"
    },
    "CheckoutFormParameters": {
      "type": "object",
      "properties": {
        "links": {
          "type": "array",
          "description": "Valid rel values are:\n- callbackURL: this URL will be called by the SDK after a payment redirection.  It is used for all types of payment method selected through the SDK, whether the  redirected payment is successful or not.",
          "items": {
            "$ref": "#/definitions/HttpRequest"
          }
        }
      },
      "x-api-ref": "CheckoutFormParameters"
    },
    "CheckoutFormPayment": {
      "type": "object",
      "description": "Payment-method to use in association with Amadeus Payment Checkout Experience SDK. This SDK is a front-end library (outside Digital Commerce API scope) that helps to  create a payment form and to include it in web application.\n\nThe usage of this SDK is composed of 3 to 4 steps:\n- Initialization: initialize a session between SDK and Amadeus backends, represented by a CheckoutFormPayment.id.  During this initialization, some parameters can be provided to set-up some contextual information.\nThis step is performed by Digital Commerce through POST /purchase/payment-methods with 'CheckoutFormPayment' in input.\n\n- Data collection: the API user interacts with the SDK to select the form(s) of payment, provides the data related  to payment instrument(s) (e.g. credit card number, account number...). All the changes are stored under the CheckoutFormPayment  ID and some operations might generate an actionToken.\n\n- Payment processing: after collecting all the required payment information, the CheckoutFormPayment ID and the latest  paymentDetails can be sent to POST /payment-records to use collected payment information to pay the order.\n\n- Payment confirmation (optional): In case one payment instrument stored under CheckoutFormPayment ID required a redirection (managed  by the SDK), the finalization of the payment comes back to Digital Commerce with POST /payment-records/confirmation.",
      "allOf": [
        {
          "$ref": "#/definitions/PaymentMethod"
        },
        {
          "type": "object",
          "properties": {
            "parameters": {
              "description": "Parameters related to the CheckoutFormPayment.\nThey are used to customize the Checkout Form initialization.",
              "$ref": "#/definitions/CheckoutFormParameters"
            },
            "actionToken": {
              "type": "string",
              "pattern": "[a-zA-Z0-9+./\r\n=]+",
              "description": "The actionToken is provided by the Amadeus Payment Checkout Experience SDK, integrated on  the API user front.\n\nIt represents a secure storage of one payment instrument. E.g. the data related to a Credit  Card entered by the end-user are pushed inside this storage.\n\nAt payment step, to pay using a collected payment instrument, the corresponding actionToken  should be provided."
            }
          }
        }
      ],
      "x-api-ref": "CheckoutFormPayment"
    },
    "ChecksumData": {
      "type": "object",
      "description": "Contains the data that are safe from tampering thanks to the checksum. The DAPI user should concatenate those properties and calculate the checksum thanks the secret key that has been shared by Amadeus to the API user.\n",
      "required": [
        "orderId",
        "creationDate",
        "priceToPay"
      ],
      "properties": {
        "orderId": {
          "description": "Id of the Order to be paid",
          "type": "string",
          "x-risk-personal-data-field": "PNR_RECORD_LOCATOR"
        },
        "creationDate": {
          "description": "Creation date of the order in GMT (Example: 2018-02-10T20:40:12Z)",
          "type": "string",
          "format": "date-time"
        },
        "priceToPay": {
          "description": "Price that should be paid through External Payment",
          "$ref": "#/definitions/Amount"
        },
        "serviceItemIds": {
          "type": "array",
          "description": "List of Service taken into account during the Checksum calculation",
          "items": {
            "type": "string"
          }
        },
        "seatItemIds": {
          "type": "array",
          "description": "List of Seat taken into account during the Checksum calculation",
          "items": {
            "type": "string"
          }
        }
      },
      "x-api-ref": "ChecksumData"
    },
    "CityPair": {
      "type": "object",
      "description": "Description of an common itinerary subject of the search",
      "properties": {
        "originLocationCode": {
          "type": "string",
          "description": "Departure location code of outbound (city or airport code)",
          "pattern": "[a-zA-Z]{3}",
          "x-dictionary-name": "location",
          "x-field-name": "originLocation",
          "x-field-type": "LocationDictionaryItem"
        },
        "destinationLocationCode": {
          "type": "string",
          "description": "Destination location code (city or airport code) for the outbound, in case of a round trip this is also the departure location code of second bound",
          "pattern": "[a-zA-Z]{3}",
          "x-dictionary-name": "location",
          "x-field-name": "destinationLocation",
          "x-field-type": "LocationDictionaryItem"
        },
        "originLocationType": {
          "description": "Specify the type of the origin location between city or airport (state is not supported).",
          "type": "string",
          "enum": [
            "airport",
            "city"
          ]
        },
        "destinationLocationType": {
          "description": "Specify the type of the destination location between city or airport (state is not supported).",
          "type": "string",
          "enum": [
            "airport",
            "city"
          ]
        }
      },
      "x-api-ref": "CityPair"
    },
    "CloneCartRequest": {
      "type": "object",
      "description": "This element provides the elements to repeat the cart from order",
      "properties": {
        "orderId": {
          "type": "string",
          "description": "Identifier of the source order from which the content is used to populate the new cart",
          "pattern": "[a-zA-Z0-9]{6}",
          "x-risk-personal-data-field": "PNR_RECORD_LOCATOR"
        },
        "airOfferId": {
          "description": "offerId to be added in to the newly created cart",
          "type": "string",
          "pattern": "[a-zA-Z0-9-]{1,120}"
        }
      },
      "x-api-ref": "CloneCartRequest"
    },
    "Commission": {
      "type": "object",
      "properties": {
        "percentage": {
          "description": "Percentage of the commission. Value is between 0 and 100",
          "type": "string"
        },
        "amount": {
          "$ref": "#/definitions/Amount"
        },
        "description": {
          "$ref": "#/definitions/TextWithLanguageType"
        }
      },
      "x-api-ref": "Commission"
    },
    "CommonItinerary": {
      "type": "object",
      "description": "Description of an common itinerary subject of the search",
      "allOf": [
        {
          "$ref": "#/definitions/CityPair"
        },
        {
          "type": "object",
          "properties": {
            "departureDateTime": {
              "type": "string",
              "description": "Departure date and time of the bound (first departure flight) in ISO 8601 [http://www.w3.org/TR/NOTE-datetime]. It specifies date and hours of the search (eg. 2017-11-10T10:21:00) If time is specified without time window, only flights at the exact time will be searched. If T00:00:00 is used as time, the search will concerned the full day. Same if no time is passed. (eg. 2017-11-10)\n",
              "format": "date-time"
            },
            "departureTimeWindow": {
              "type": "integer",
              "description": "Time window in hours for the bound (first flight). E.g: departureTimeWindow=2 means from 2 hours before, until 2 hours after the departure time. The value 0 is considered as there is no time window.\n",
              "minimum": 0,
              "maximum": 12
            },
            "directFlights": {
              "type": "boolean",
              "description": "Search only for direct (without connections) flight proposals.",
              "default": false
            },
            "connection": {
              "description": "Connection details of the requested bound.",
              "$ref": "#/definitions/Connection"
            }
          }
        }
      ],
      "x-api-ref": "CommonItinerary"
    },
    "CommonReply": {
      "type": "object",
      "properties": {
        "errors": {
          "description": "Array of error messages",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ErrorMessage"
          }
        },
        "warnings": {
          "description": "Array of warning messages",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WarningMessage"
          }
        }
      },
      "x-api-ref": "CommonReply"
    },
    "Company": {
      "description": "Describes the details of the company.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Common name of the organization (e.g Amadeus, SKYTeam)",
          "type": "string"
        },
        "code": {
          "description": "The code for the company (e.g 1A)",
          "type": "string"
        }
      },
      "x-api-ref": "Company"
    },
    "CompanySearchRequest": {
      "description": "Describes the details of the company.",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "Common name of the organization (e.g Amadeus, SKYTeam)",
          "type": "string",
          "pattern": "^ {0}[A-Za-z\\u00C0-\\u1FFF\\u3040-\\uD7AF][A-Za-z\\u00C0-\\u1FFF\\u3040-\\uD7AF\\u2019 \\-.]{0,69}$"
        },
        "code": {
          "description": "The code for the company (e.g AE2,F73)",
          "type": "string",
          "pattern": "[a-zA-Z0-9]{1,3}"
        }
      },
      "x-api-ref": "CompanySearchRequest"
    },
    "ConfidentialRemark": {
      "type": "object",
      "description": "Confidential freetext information added to an order (RC).\nWhen the order is retrieved by an Office other than the office that created the remark or the designated office in the remark, the freetext will be replaced by RESTRICTED.\n",
      "allOf": [
        {
          "$ref": "#/definitions/Remark"
        },
        {
          "type": "object",
          "required": [
            "freetext"
          ],
          "properties": {
            "freetext": {
              "description": "Free text of the confidential remark",
              "type": "string",
              "pattern": ".{1,125}",
              "x-risk-personal-data-field": "REMARKS"
            },
            "securities": {
              "type": "array",
              "description": "List of security credentials for the confidential remark.",
              "items": {
                "$ref": "#/definitions/Security"
              },
              "maxItems": 3
            }
          }
        }
      ],
      "x-api-ref": "ConfidentialRemark"
    },
    "ConjunctiveTravelDocument": {
      "type": "object",
      "description": "Conjunctive travel document associated to the current travel document.",
      "properties": {
        "number": {
          "description": "Travel Document number (e.g. 2201638074788) of a conjunctive document",
          "type": "string",
          "x-risk-personal-data-field": "AIRLINE_TICKET_NUMBER"
        }
      },
      "x-api-ref": "ConjunctiveTravelDocument"
    },
    "Connection": {
      "type": "object",
      "description": "On-line connections concern transfers between flights of the same airline designator and interline connections between flights of different airline designators.",
      "properties": {
        "locationCodes": {
          "type": "array",
          "description": "List of connection locations. Locations could be either airport or city.\nE.g. For a Bengaluru (BLR) - Nice (NCE) with connection Dubai (DXB), offers for BLR-DXB-NCE are provided.\n",
          "minItems": 1,
          "maxItems": 2,
          "items": {
            "type": "string",
            "description": "Location code (city or airport code) for connection.",
            "pattern": "[a-zA-Z]{3}"
          }
        },
        "minimumDuration": {
          "type": "integer",
          "minimum": 1,
          "maximum": 999,
          "description": "Minimum connection duration (in minutes) between two flights in one bound. Maximum possible value is 999 minutes (16h39m)."
        }
      },
      "x-api-ref": "Connection"
    },
    "Contact": {
      "type": "object",
      "discriminator": "contactType",
      "description": "Any contact information. There are three types of contacts: email, phone number or address.\nContact is a polymorphic object, meaning that it contains only the basic structure from which derive the three types of contacts.\nTo see the structure of the different types of contacts, please see [Contacts documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/contacts.html#/ContactType/get_)\n",
      "allOf": [
        {
          "$ref": "#/definitions/ItemCommon"
        },
        {
          "type": "object",
          "discriminator": "contactType",
          "required": [
            "contactType",
            "category"
          ],
          "properties": {
            "tid": {
              "description": "Temporary id that can be used to associate requested and returned contacts. Valid only for the time of the transaction",
              "type": "string",
              "pattern": "[a-zA-Z0-9_]{1,20}"
            },
            "travelerIds": {
              "type": "array",
              "description": "List of travelers associated to the contacts stored in the cart. If not specified, the contact applies to all travelers. Traveler association is required when the contactType has a 'notification' purpose.",
              "items": {
                "type": "string",
                "pattern": "[a-zA-Z0-9-]{1,20}"
              }
            },
            "travelerTIds": {
              "type": "array",
              "description": "List of travelers temporary ids associated to stored in the cart. It can be used when both the contact and its associated traveler(s) are added simultaneously. Traveler association is required when the contactType has a 'notification' purpose.",
              "items": {
                "type": "string",
                "pattern": "[a-zA-Z0-9_]{1,20}"
              }
            },
            "category": {
              "description": "Category of contact usage",
              "enum": [
                "personal",
                "business",
                "agency",
                "other"
              ],
              "type": "string",
              "default": "personal"
            },
            "addresseeName": {
              "description": "Recipient name to be used if different from the traveler name (e.g. in case of emergency phone it corresponds to name of the person to be contacted)",
              "type": "string",
              "pattern": "[a-zA-Z -]{1,70}",
              "x-risk-personal-data-field": "PASSENGER_NAME"
            },
            "isThirdParty": {
              "description": "if set, this flag indicates that the contact belongs to an other person than the passenger (e.g. friend or family member not part of the trip). \nThis option is only available for mobile phone and email and for a notification purpose.\n",
              "type": "boolean"
            },
            "contactType": {
              "type": "string",
              "description": "To see the structure of the different types of contacts, please check [Contacts documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/contacts.html#/ContactType/get_). Please note that \"FreeFlow\" can be returned in Digital Commerce reply but cannot be used as input.",
              "enum": [
                "Email",
                "Address",
                "Phone",
                "FreeFlow"
              ]
            },
            "dataConsentUsage": {
              "description": "List of consents given for the following contact.\nA consent can be granted automatically via the Digital Commerce's configuration  or through offline channel(s): this structure cannot be used to specify (in input) a consent when adding the contact  in the Cart or the Order.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/DataUsageConsent"
              }
            }
          }
        }
      ],
      "x-api-ref": "Contact"
    },
    "ContactReply": {
      "type": "object",
      "description": "Reply containing a contact object (email, phone number or address).\nTo see the structure of the different types of contacts, please check [Contacts documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/contacts.html#/ContactType/get_).\nEach type of contact derive from object Contact by polymorphism\n",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/Contact"
            }
          }
        }
      ],
      "x-api-ref": "ContactReply"
    },
    "ContactsListReply": {
      "type": "object",
      "description": "Reply containing a list of contact (email, phone number or address) information.\nTo see the structure of the different types of contacts, please check [Contacts documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/contacts.html#/ContactType/get_).\nEach type of contact derive from object Contact by polymorphism\n",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "type": "array",
              "description": "List of contact",
              "items": {
                "$ref": "#/definitions/Contact"
              }
            }
          }
        }
      ],
      "x-api-ref": "ContactsListReply"
    },
    "ContextualSeatmapData": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/SeatmapCommonData"
        },
        {
          "type": "object",
          "properties": {
            "seatSelections": {
              "type": "array",
              "description": "It allows to define the list of seat selections for a group of travelers",
              "items": {
                "$ref": "#/definitions/SeatSelection"
              }
            }
          }
        }
      ],
      "x-api-ref": "ContextualSeatmapData"
    },
    "ContextualSeatmapReply": {
      "description": "Seatmap representation of a flight. Characteristics and occupation. Enriched with seats already selected in Cart or Order",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/ContextualSeatmapData"
            },
            "dictionaries": {
              "$ref": "#/definitions/SeatmapDictionary"
            }
          }
        }
      ],
      "x-api-ref": "ContextualSeatmapReply"
    },
    "ConvertedMiles": {
      "description": "Price breakdown of converted part expressed in miles",
      "type": "object",
      "required": [
        "base",
        "total"
      ],
      "properties": {
        "base": {
          "description": "Base price converted to miles",
          "type": "integer",
          "format": "int64"
        },
        "total": {
          "description": "Total price converted to miles",
          "type": "integer",
          "format": "int64"
        },
        "totalTaxes": {
          "description": "Sum of all taxes (including surcharges) converted to miles",
          "type": "integer",
          "format": "int64",
          "minimum": 0
        },
        "totalSurcharges": {
          "description": "Sum of all surcharges converted to miles",
          "type": "integer",
          "format": "int64",
          "minimum": 0
        },
        "discount": {
          "description": "Details about the discount when it is applied",
          "type": "object",
          "$ref": "#/definitions/Discount"
        }
      },
      "x-api-ref": "ConvertedMiles"
    },
    "CorporateRemark": {
      "type": "object",
      "description": "Free text information that can be added to an order (RX). All the offices which belong to the Corporate code as the DAPI office and has EOS agreement with the creator office will have access to the Remark.\n",
      "allOf": [
        {
          "$ref": "#/definitions/Remark"
        },
        {
          "type": "object",
          "required": [
            "freetext"
          ],
          "properties": {
            "freetext": {
              "description": "Free text of the remark",
              "type": "string",
              "pattern": ".{1,126}",
              "x-risk-personal-data-field": "REMARKS"
            },
            "flightIds": {
              "type": "array",
              "description": "A list of flights associated to this Remark. If not specified, the remark applies to all flights",
              "items": {
                "type": "string",
                "pattern": "[a-zA-Z0-9-]{1,20}"
              }
            }
          }
        }
      ],
      "x-api-ref": "CorporateRemark"
    },
    "CountryDictionary": {
      "type": "object",
      "properties": {
        "location": {
          "type": "object",
          "description": "Locations map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
          "additionalProperties": {
            "$ref": "#/definitions/LocationDictionaryItem"
          }
        },
        "country": {
          "type": "object",
          "description": "Countries map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "x-api-ref": "CountryDictionary"
    },
    "Coverage": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Amount"
        },
        {
          "type": "object",
          "properties": {
            "code": {
              "type": "string",
              "description": "Coverage code",
              "x-dictionary-name": "coverage",
              "x-field-name": "coverage",
              "x-field-type": "string"
            },
            "excess": {
              "type": "integer",
              "description": "Excess amount to be paid if the the coverage it is being activated",
              "format": "int64",
              "minimum": 0
            },
            "liability": {
              "type": "integer",
              "description": "Liability amount covered by this coverage",
              "format": "int64",
              "minimum": 0
            },
            "pricingTimeWindow": {
              "type": "string",
              "description": "Period for which the coverage pricing applies",
              "enum": [
                "hourly",
                "daily",
                "monthly",
                "weekend",
                "weekly",
                "fullPeriod"
              ]
            },
            "insuranceDocuments": {
              "type": "array",
              "description": "The car insurance documents containing the policy (terms and conditions), its summary and the final contract (with the policy's personal details) in case of a reservation. These documents will be accesssed from an URL given by the car company.\n",
              "items": {
                "$ref": "#/definitions/CarInsuranceDocument"
              }
            }
          }
        }
      ],
      "x-api-ref": "Coverage"
    },
    "CreatedDocumentLink": {
      "type": "object",
      "description": "Newly created ticket link to identify the data evolution  of the travel-documents resource referenced in the href",
      "properties": {
        "id": {
          "type": "string",
          "description": "Newly created ticket link id"
        }
      },
      "x-api-ref": "CreatedDocumentLink"
    },
    "CreationPointOfSale": {
      "type": "object",
      "description": "Point of sale id and country code where the Order was created.\n",
      "allOf": [
        {
          "$ref": "#/definitions/PointOfSale"
        }
      ],
      "x-api-ref": "CreationPointOfSale"
    },
    "CurrencyConversionData": {
      "description": "Currency conversion results.",
      "type": "object",
      "properties": {
        "convertedAmount": {
          "description": "Amount to be converted. The amount value expressed as numerical information. The decimal places are defined at currency level. e.g. \"EUR 100.85\" will be represented as `10085`, with the currency `decimalPlaces` = 2.",
          "$ref": "#/definitions/Amount"
        },
        "originalAmount": {
          "description": "Amount to be converted. The amount value expressed as numerical information. The decimal places are defined at currency level. e.g. \"EUR 100.85\" will be represented as `10085`, with the currency `decimalPlaces` = 2.",
          "$ref": "#/definitions/Amount"
        }
      },
      "x-api-ref": "CurrencyConversionData"
    },
    "CurrencyConversionDictionary": {
      "type": "object",
      "properties": {
        "currency": {
          "type": "object",
          "description": "Currencies map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
          "additionalProperties": {
            "$ref": "#/definitions/CurrencyDictionaryItem"
          }
        }
      },
      "x-api-ref": "CurrencyConversionDictionary"
    },
    "CurrencyConversionListReply": {
      "description": "Currency conversion reply structure",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "type": "array",
              "description": "List of currency conversion rates and results",
              "items": {
                "$ref": "#/definitions/CurrencyConversionData"
              }
            },
            "dictionaries": {
              "$ref": "#/definitions/CurrencyConversionDictionary"
            }
          }
        }
      ],
      "x-api-ref": "CurrencyConversionListReply"
    },
    "CurrencyConversionRate": {
      "description": "Conversion from provider's currency to requested currency",
      "type": "object",
      "properties": {
        "rate": {
          "description": "The conversion factor to apply against the source currency to obtain the requested currency",
          "type": "string"
        },
        "target": {
          "description": "Requested currency code",
          "type": "string",
          "pattern": "[A-Z]{3}"
        },
        "targetDecimalPlaces": {
          "description": "Indicates the number of decimal places for the target currency",
          "type": "integer"
        }
      },
      "x-api-ref": "CurrencyConversionRate"
    },
    "CurrencyConversionRateItem": {
      "description": "Currency conversion rate dictionary",
      "type": "object",
      "required": [
        "rate",
        "target",
        "targetDecimalPlaces"
      ],
      "properties": {
        "rate": {
          "description": "The conversion factor to apply against the source currency to obtain the requested currency",
          "type": "string"
        },
        "startValidityDateTime": {
          "description": "Local start date and time for the validity of the rate with the following format \"yyyy-MM-dd'T'HH:mm:ssZ\" (e.g. 2018-02-10T20:40:00+02:00)",
          "type": "string",
          "format": "date-time",
          "example": "2018-02-10T20:40:00+02:00"
        },
        "endValidityDateTime": {
          "description": "Local end date and time for the validity of the rate with the following format \"yyyy-MM-dd'T'HH:mm:ssZ\" (e.g. 2018-02-10T20:40:00+02:00)",
          "type": "string",
          "format": "date-time",
          "example": "2018-02-10T20:40:00+02:00"
        },
        "target": {
          "description": "Requested currency code",
          "type": "string",
          "pattern": "[A-Z]{3}"
        },
        "targetDecimalPlaces": {
          "description": "Indicates the number of decimal places for the target currency",
          "type": "integer"
        }
      },
      "x-api-ref": "CurrencyConversionRateItem"
    },
    "CurrencyDictionaryItem": {
      "description": "Currency dictionary",
      "type": "object",
      "required": [
        "name",
        "decimalPlaces"
      ],
      "properties": {
        "name": {
          "description": "Localized currency name",
          "type": "string"
        },
        "decimalPlaces": {
          "description": "Number of digits to the right of the decimal point used for the amounts in this specific currency (e.g. 50.00 EUR uses 2 decimal places)",
          "type": "integer"
        },
        "conversionRates": {
          "description": "List of currency conversions rates associated to this currency",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CurrencyConversionRateItem"
          }
        }
      },
      "x-api-ref": "CurrencyDictionaryItem"
    },
    "CustomerInsights": {
      "type": "object",
      "description": "Object used to define a customer insights response",
      "allOf": [
        {
          "$ref": "#/definitions/CustomerInsightsCommon"
        },
        {
          "type": "object",
          "properties": {
            "tid": {
              "type": "string",
              "description": "Temporary id that can be used to associate requested and returned travelers. It is only valid the time of the transaction."
            }
          }
        }
      ],
      "x-api-ref": "CustomerInsights"
    },
    "CustomerInsightsCommon": {
      "type": "object",
      "description": "Object used to define a customer insights response",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is the unique identifier of the list of the customer insights. It is sent as a complementary information on top of the insightsCode which is the non-unique code associated to the list of the customer insights."
        },
        "insightsCode": {
          "type": "string",
          "description": "The code of the list of the customer insights",
          "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
        },
        "companyCode": {
          "type": "string",
          "description": "The company code of the customer insights"
        },
        "segmentationIds": {
          "type": "array",
          "description": "T-DNA Profile segments of the traveler",
          "items": {
            "type": "string",
            "description": "RSA Encoded profile segments of the traveler",
            "pattern": "[a-zA-Z0-9+/=]*"
          },
          "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
        },
        "metrics": {
          "type": "array",
          "description": "T-DNA Profile metrics of the traveler",
          "items": {
            "$ref": "#/definitions/KeyValuePair"
          },
          "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
        }
      },
      "x-api-ref": "CustomerInsightsCommon"
    },
    "CustomersInsightsRequest": {
      "description": "Body for CustomersInsightsRequest",
      "type": "object",
      "properties": {
        "customers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SearchCustomerInsights"
          }
        }
      },
      "x-api-ref": "CustomersInsightsRequest"
    },
    "CustomersInsightsResponse": {
      "description": "Object used to define customers insights response",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerInsights"
              }
            }
          }
        }
      ],
      "x-api-ref": "CustomersInsightsResponse"
    },
    "CustomPayment": {
      "type": "object",
      "description": "Payment method defined by a list of parameters defined and customized by the airline.\nExample: - Cash: it could be defined as a CustomPayment Method with no parameters. - Check number: it could be defined as a CustomPayment Method with 1 parameter e.g. the check number.\nThe API does not perform any validation and processes on this payment method. The API user is responsible of processing and ensuring the payment is done. This is therefore only available when the API user consumes the API end points on a middleware/server.\nIf the API user wishes to delegate the integration and link with the payment provider to the API, AlternativePaymentMethod should be used.\nDerived from PaymentMethod object by polymorphism.\n",
      "allOf": [
        {
          "$ref": "#/definitions/PaymentMethod"
        },
        {
          "type": "object",
          "properties": {
            "parameters": {
              "type": "array",
              "description": "List of parameters to be sent in input to pay",
              "items": {
                "$ref": "#/definitions/AlternativePaymentMethodParameter"
              }
            },
            "status": {
              "description": "Approval status of the payment record",
              "type": "string",
              "enum": [
                "approved",
                "pending",
                "denied",
                "error"
              ]
            }
          }
        }
      ],
      "x-api-ref": "CustomPayment"
    },
    "DataUsageConsent": {
      "description": "A consent is a list of permissions given to list of parties to perform a specific action  with the associated data.",
      "type": "object",
      "properties": {
        "allowedParties": {
          "description": "List of parties to which the consent is given on the associated data.\nAll members of allowedParties will be granted for the DataUsageConsent's permissions. ",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataUsageConsentParty"
          }
        },
        "permissions": {
          "description": "The different permissions granted to this DataUsageConsent's parties for the associated data.\nAll listed permissions applies to allowedParties. ",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataUsageConsentPermission"
          }
        }
      },
      "x-api-ref": "DataUsageConsent"
    },
    "DataUsageConsentParty": {
      "description": "Party allowing or allowed to use a Data via a specific consent.",
      "type": "object",
      "properties": {
        "officeMask": {
          "description": "Office(s) to which the consent permissions are granted.",
          "$ref": "#/definitions/OfficeMask"
        }
      },
      "x-api-ref": "DataUsageConsentParty"
    },
    "DataUsageConsentPermission": {
      "description": "Permission associated to a consent related to a specific \"Data\" between the owner and one or several allowed parties. A permission is an action for particular purpose. ",
      "type": "object",
      "properties": {
        "action": {
          "description": "Action allowed to be performed on the current DataUsageConsent.\n'NONE' highlights the \"Data\" exists (e.g. a contact with contactType='notification') but  its details cannot be read (and by extension modified).",
          "type": "string",
          "enum": [
            "READ",
            "WRITE",
            "NONE"
          ]
        }
      },
      "x-api-ref": "DataUsageConsentPermission"
    },
    "DateTemplateParameter": {
      "type": "object",
      "description": "Date localization template parameter",
      "allOf": [
        {
          "$ref": "#/definitions/LocalizationParameter"
        },
        {
          "type": "object",
          "properties": {
            "value": {
              "type": "string",
              "format": "date"
            }
          }
        }
      ],
      "x-api-ref": "DateTemplateParameter"
    },
    "DateTimeTemplateParameter": {
      "type": "object",
      "description": "Date-time localization template parameter",
      "allOf": [
        {
          "$ref": "#/definitions/LocalizationParameter"
        },
        {
          "type": "object",
          "properties": {
            "value": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      ],
      "x-api-ref": "DateTimeTemplateParameter"
    },
    "DegradedSeatItem": {
      "type": "object",
      "description": "This object contains the identifier of the degraded seat after a disruption or a  self reaccommodation",
      "properties": {
        "seatId": {
          "description": "Id of the degraded seat",
          "type": "string"
        }
      },
      "x-api-ref": "DegradedSeatItem"
    },
    "DeleteAcceptanceRequest": {
      "type": "object",
      "description": "Input to cancel acceptance",
      "properties": {
        "oneTimePassword": {
          "type": "string",
          "description": "One time password to cancel the check-in\n"
        }
      },
      "x-api-ref": "DeleteAcceptanceRequest"
    },
    "DictionaryCommon": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/FlightDictionary"
        },
        {
          "type": "object",
          "properties": {
            "tax": {
              "type": "object",
              "description": "Taxes map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "type": "string"
              }
            },
            "surcharge": {
              "type": "object",
              "description": "Surcharges map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "type": "string"
              }
            },
            "currency": {
              "type": "object",
              "description": "Currencies map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "$ref": "#/definitions/CurrencyDictionaryItem"
              }
            },
            "anonymousTraveler": {
              "type": "object",
              "description": "Basic information about an anonymous traveler such as the passenger type code and the frequent flyer card(s). Frequent flyer cards applies only for a particular case: a transaction based on a cart already containing frequent flyer card(s) but not yet traveler(s). For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "$ref": "#/definitions/AnonymousTraveler"
              }
            },
            "discount": {
              "type": "object",
              "description": "Details about the discounts. The reference currency is the one defined at Price level.\n",
              "additionalProperties": {
                "$ref": "#/definitions/DiscountDictionaryItem"
              }
            },
            "traveler": {
              "type": "object",
              "description": "Information about a traveler such as first and last name. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "$ref": "#/definitions/Traveler"
              }
            },
            "seatCharacteristic": {
              "type": "object",
              "description": "Seat characteristics map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "$ref": "#/definitions/SeatCharacteristicDictionaryItem"
              }
            }
          }
        }
      ],
      "x-api-ref": "DictionaryCommon"
    },
    "Discount": {
      "type": "object",
      "description": "Details about the discount when it is applied. Object part of Price information.",
      "properties": {
        "originalTotal": {
          "type": "integer",
          "description": "Total amount before the discount application",
          "format": "int64",
          "minimum": 0
        },
        "originalBase": {
          "type": "integer",
          "description": "Total base fare amount before the discount application",
          "format": "int64",
          "minimum": 0
        },
        "originalTotalTaxes": {
          "type": "integer",
          "description": "Total taxes amount before the discount application",
          "format": "int64",
          "minimum": 0
        },
        "discountCode": {
          "type": "string",
          "description": "Discount dictionary index identifying the dictionary item that contains the details about the discount or the promotion. It corresponds to the best applied discount or promotion.\n",
          "x-dictionary-name": "discount",
          "x-field-name": "discount",
          "x-field-type": "DiscountDictionaryItem"
        },
        "discountCodes": {
          "type": "array",
          "description": "Exhaustive list of applied discounts' codes. Each discount code corresponds to the dictionary index identifying the dictionary item containing all the details about the discount or the promotion.\n",
          "minimum": 0,
          "items": {
            "type": "string"
          },
          "x-dictionary-name": "discount",
          "x-map-name": "discounts",
          "x-field-type": "DiscountDictionaryItem",
          "minItems": 1
        }
      },
      "x-api-ref": "Discount"
    },
    "DiscountDictionaryItem": {
      "description": "Discount dictionary",
      "type": "object",
      "required": [
        "airlineCode"
      ],
      "properties": {
        "airlineCode": {
          "description": "The code of the airline that created the discount",
          "type": "string"
        },
        "reasonCode": {
          "description": "Contains the reason for discount appliance as defined via the rules of AAM product\nIf 'isPromotion' field value is set to True, then it contains the promotion code as defined via the rules of AAM product\nFor more details about AAM please see [Amadeus Anytime Merchandising](http://www.amadeus.com/web/amadeus/en_1A-corporate/Airlines/Airline-Needs/Serve/Differentiate-your-offer/Amadeus-Anytime-Merchandising/1319660801962-Solution_C-AMAD_ProductDetailPpal-1319637765525?industrySegment=1259068355670&level2=1332980613390&level3=1319616835064).\nExample: PROMCHRIS corresponds to a Christmas time reduction\n",
          "type": "string"
        },
        "isBundleDiscount": {
          "description": "This field highlights if a discount comes from the application of a dynamic bundle\n",
          "type": "boolean"
        },
        "isPromotion": {
          "description": "This field highlights if a discount comes from the application of a promotion\n",
          "type": "boolean"
        }
      },
      "x-api-ref": "DiscountDictionaryItem"
    },
    "DiscountedItems": {
      "description": "All the services and seat families that are discounted by a specific bundle discount rule.",
      "type": "object",
      "properties": {
        "serviceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The ids of the services that get the discount."
        },
        "seatFamilyIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The ids of the seat families that get the discount."
        },
        "flightIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The ids of the flights relevant to the discounted services/seat families."
        }
      },
      "x-api-ref": "DiscountedItems"
    },
    "DisruptionConnection": {
      "type": "object",
      "required": [
        "status"
      ],
      "description": "Contains information related to flight connections after the disruption.",
      "properties": {
        "status": {
          "type": "string",
          "description": "Indicates if ,after disruption, the traveller is able to make the connections of his trip, based on Minimum Connecting Time (MCT) at the airport and Maximum Ground Time (MGT).\n2 values are possible: - ok: connection time is greater than MCT and the ground time is lower than MGT.  - broken: connection time is lower than MCT or ground time is greater than MGT.\nNote: this field applies only in case of flight self re-accommodation.",
          "enum": [
            "ok",
            "broken"
          ]
        },
        "delta": {
          "type": "integer",
          "description": "Indicates the difference in the number of connections between the current trip and the original trip. Example: 1 means that the current trip has 1 more connection than the original trip before disruption."
        },
        "sameViaPoint": {
          "type": "boolean",
          "description": "Boolean to indicate if at least one connection point or the number of connections have changed relative to the original trip"
        },
        "deltaTime": {
          "type": "integer",
          "description": "Duration in seconds between connection time of the current trip and the original trip. If the duration is positive, the connection time of the current trip is longer than the original trip."
        }
      },
      "x-api-ref": "DisruptionConnection"
    },
    "DisruptionEndPoint": {
      "type": "object",
      "required": [
        "locationCode"
      ],
      "description": "Contains information related to bound endpoint after the disruption.",
      "properties": {
        "locationCode": {
          "description": "Location (airport code) of the original bound endpoint",
          "type": "string",
          "pattern": "[a-zA-Z]{3}",
          "x-dictionary-name": "location",
          "x-field-name": "destinationLocation",
          "x-field-type": "LocationDictionaryItem"
        },
        "sameAirport": {
          "type": "boolean",
          "description": "Indicates, if after disruption, the aiport of the current end point is the same than the original end point"
        },
        "sameCity": {
          "type": "boolean",
          "description": "Indicates, if after disruption, the city of the current end point is the same than the original end point"
        },
        "sameDay": {
          "type": "boolean",
          "description": "Boolean to indicate if the passenger travels the same day before and after the disruption"
        },
        "deltaTime": {
          "type": "integer",
          "description": "Difference in seconds between the time of the current trip and the original trip. If the duration is positive, the time of the current trip is after the original trip."
        }
      },
      "x-api-ref": "DisruptionEndPoint"
    },
    "DisruptionEvent": {
      "type": "object",
      "description": "Contains information related to the event that caused the disruption.",
      "properties": {
        "triggerEventName": {
          "description": "Name of the airline process that triggered the disruption event.\n\nPossible values depends on the airline processes. You can find below some commonly used processes below:\n- `Customer Operational Protection`: This value is usually returned when an airline encounters an operational change / issue with the flight/airport e.g. flight Diversion, Manual Disruption, Flight Delay, Misconnection Inbound Disruption, Misconnection Outbound Disruption, etc... This is usually returned when the disruption transfer to the new flight is triggered with Amadeus Product \"Customer Operational Protection\" i.e. COP.\n- `Travel Ready Reaccommodation`: This value is returned when an airline modifies his flight schedule for the upcoming weeks/months/seasons i.e. there is no operational issue on the flight/airport, but a standard update of the flight schedule of the airline (done quarterly most of the time) i.e. schedule change This is usually returned when the disruption transfer to the new flight is triggered with Amadeus Product \"Travel Ready Reaccommodation\" i.e. TRR\n- `Optimized Passenger Recovery`: This value is returned when an airline has automated a massive update of its flight schedule: it can due to standard shcedule update or operational issues. This is usually returned when the disruption transfer to the new flight is triggered with Amadeus Product \"Optimized Passenger Recovery\" i.e. OPR\n- `Flight Suspension`: This value is returned when an airline suspends the flights thanks a FLIX message. This value is usually returned when an airline decides to stop selling the flights to travellers and does not operate anymore, but the flight is still defined in the airline system (as suspended)\n",
          "type": "string"
        },
        "dateTime": {
          "description": "Date when the disruption occurred.          \n\nLimitations: the field is not returned in case the `triggerEventName` is `Flight Suspension`.\n\nDate format: ISO 8601 (http://www.w3.org/TR/NOTE-datetime)\n",
          "type": "string",
          "format": "date-time",
          "example": "2018-02-10T20:40:12Z"
        }
      },
      "x-api-ref": "DisruptionEvent"
    },
    "DisruptionStatus": {
      "type": "object",
      "required": [
        "originalFlights"
      ],
      "description": "Contains information related to the disrupted bound.",
      "properties": {
        "originalFlights": {
          "description": "The flights before the disruption",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FlightItem"
          }
        },
        "departure": {
          "description": "Contains information related to the departure of the original bound as well difference with the current bound.",
          "$ref": "#/definitions/DisruptionEndPoint"
        },
        "arrival": {
          "description": "Contains information related to the arrival of the original bound as well difference with the current bound.",
          "$ref": "#/definitions/DisruptionEndPoint"
        },
        "connection": {
          "description": "Contains information related to flight connections between the current bound and original bound.",
          "$ref": "#/definitions/DisruptionConnection"
        },
        "duration": {
          "description": "Duration of the original journey expressed in seconds",
          "type": "integer"
        },
        "lostSeats": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LostSeatItem"
          }
        },
        "degradedSeats": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DegradedSeatItem"
          }
        },
        "lostServices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LostServiceItem"
          }
        },
        "recoveredServices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RecoveredServiceItem"
          }
        },
        "disruptionEvents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DisruptionEvent"
          }
        }
      },
      "x-api-ref": "DisruptionStatus"
    },
    "DocumentEnvelope": {
      "type": "object",
      "description": "Object used to accept an envelop message",
      "properties": {
        "payload": {
          "description": "payload for the envelop message",
          "type": "string"
        },
        "metadata": {
          "description": "metadata for the payload message",
          "$ref": "#/definitions/DocumentEnvelopeMetadata"
        }
      },
      "x-api-ref": "DocumentEnvelope"
    },
    "DocumentEnvelopeMetadata": {
      "type": "object",
      "description": "Object used to define the metadata for document envelop message",
      "properties": {
        "documentType": {
          "description": "document type for the envelope payload",
          "type": "string",
          "enum": [
            "string",
            "pdf"
          ]
        },
        "name": {
          "description": "name of the envelope payload",
          "type": "string"
        }
      },
      "x-api-ref": "DocumentEnvelopeMetadata"
    },
    "DynamicWaiverCondition": {
      "description": "Conditions under which this waiver can be applied.",
      "type": "object",
      "properties": {
        "firstDate": {
          "type": "string",
          "description": "This dynamic waiver can only be applied if a flight on or after this date. (date in ISO 8601, e.g., 2002-07-25: YYYY-MM-DD)",
          "format": "date",
          "example": "2020-07-26"
        },
        "lastDate": {
          "type": "string",
          "description": "This dynamic waiver can only be applied if a flight on or before this date. (date in ISO 8601, e.g., 2002-07-25: YYYY-MM-DD)",
          "format": "date",
          "example": "2020-07-26"
        },
        "origin": {
          "$ref": "#/definitions/DynamicWaiverConditionLocation"
        },
        "destination": {
          "$ref": "#/definitions/DynamicWaiverConditionLocation"
        }
      },
      "x-api-ref": "DynamicWaiverCondition"
    },
    "DynamicWaiverConditionLocation": {
      "type": "object",
      "description": "When a disruption is anticipated, a dynamic waiver could be offered to propose a change flights. If the waiver is only applicable to specific locations or whole countries as orgin or destination,  that information will be detailed here. Waiver conditions can also exclude locations and/or countries.",
      "properties": {
        "includedLocationCodes": {
          "description": "This dynamic waiver can only be applied if the new location is contained here.",
          "type": "array",
          "items": {
            "type": "string",
            "description": "Location code (city or airport code)",
            "pattern": "[a-zA-Z]{3}"
          },
          "x-dictionary-name": "location",
          "x-map-name": "includedLocation",
          "x-field-type": "LocationDictionaryItem"
        },
        "excludedLocationCodes": {
          "description": "This dynamic waiver can only be applied if the new location is not contained here.",
          "type": "array",
          "items": {
            "type": "string",
            "description": "Location code (city or airport code)",
            "pattern": "[a-zA-Z]{3}"
          },
          "x-dictionary-name": "location",
          "x-map-name": "excludedLocation",
          "x-field-type": "LocationDictionaryItem"
        },
        "includedCountryCodes": {
          "description": "This dynamic waiver can only be applied if the new country is contained here.",
          "type": "array",
          "items": {
            "type": "string",
            "description": "ISO 3166-1 country code.",
            "pattern": "[a-zA-Z0-9]{2}"
          }
        },
        "excludedCountryCodes": {
          "description": "This dynamic waiver can only be applied if the new country is not contained here.",
          "type": "array",
          "items": {
            "type": "string",
            "description": "ISO 3166-1 country code.",
            "pattern": "[a-zA-Z0-9]{2}"
          }
        }
      },
      "x-api-ref": "DynamicWaiverConditionLocation"
    },
    "DynamicWaiverDictionaryItem": {
      "description": "When a disruption is anticipated, a dynamic waiver could be offered to propose a change flights in this order.  Under the given conditions of this waiver, penalty is waived and flight change is encouraged.",
      "type": "object",
      "required": [
        "code"
      ],
      "properties": {
        "code": {
          "description": "This code is the unique identifyer for this waiver.",
          "type": "string"
        },
        "condition": {
          "$ref": "#/definitions/DynamicWaiverCondition"
        }
      },
      "x-api-ref": "DynamicWaiverDictionaryItem"
    },
    "ElementaryPeriod": {
      "description": "Elements defining an ElementaryPeriod, i.e. a simple period of time.",
      "type": "object",
      "properties": {
        "start": {
          "description": "Start dateTime of the period with the following format \"yyyy-MM-dd'T'HH:mm:ssZ\"",
          "type": "string",
          "format": "date-time",
          "example": "2020-12-25T00:00:00+02:00"
        },
        "end": {
          "description": "End dateTime of the period with the following format \"yyyy-MM-dd'T'HH:mm:ssZ\"",
          "type": "string",
          "format": "date-time",
          "example": "2020-12-25T23:59:59+02:00"
        }
      },
      "x-api-ref": "ElementaryPeriod"
    },
    "Eligibility": {
      "type": "object",
      "description": "Define the eligibility for acceptance (check-in)",
      "allOf": [
        {
          "$ref": "#/definitions/EligibilityCommon"
        },
        {
          "type": "object",
          "properties": {
            "eligibilityWindow": {
              "description": "Provide the timing for the eligibility if there is a time window to be respected. Request must be within the window to be eligible.",
              "$ref": "#/definitions/TimeWindow"
            },
            "reasons": {
              "description": "Reasons for the eligibility status provided if not eligible.",
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "firstFlightOtherAirline",
                  "firstFlightOnOtherDepartureControlSystem",
                  "flightAcceptanceEligibilityWindow",
                  "flightAcceptanceDefaultEligibilityWindow",
                  "flightEligibilityRule",
                  "flightEligibilityDefaultRule",
                  "flightGeneralStatus",
                  "flightAcceptanceStatus",
                  "departureAirportInhibited",
                  "arrivalAirportInhibited",
                  "firstFlightIsInhibited",
                  "passiveSegment",
                  "previousFlightIsInhibited",
                  "infantStatusNeedToBeChecked",
                  "infantAgeToBeChecked",
                  "childAgeToBeChecked",
                  "ticketProblem",
                  "ticketTypeNotAllowed",
                  "highPriorityComment",
                  "customerEligibilityRule",
                  "operationalStatusNotSupported",
                  "serviceRequestNotSupported",
                  "unpaidService",
                  "regulatoryDetailsInhibition",
                  "regulatoryDetailsLimitations",
                  "regulatoryDetailsNameNotMatching",
                  "regulatoryDetailsMultipleNationality",
                  "regulatoryDetailsStatusNotAuthorized",
                  "regulatoryDetailsPassportExpired",
                  "reprintingIsInhibited",
                  "alreadyBoarded",
                  "visaNeedAgentVerification",
                  "ineligibleBookingstatus",
                  "ineligibleNonRevenuePassenger",
                  "flightIsDisrupted",
                  "passengerAlreadyAccepted",
                  "reasonNotSupportedInThisVersion",
                  "itinerarySequenceCheck",
                  "customerTypeCheck",
                  "deeplinkInhibition"
                ]
              }
            }
          }
        }
      ],
      "x-api-ref": "Eligibility"
    },
    "EligibilityBoardingPass": {
      "type": "object",
      "description": "Define the eligibility for boarding pass retrieval (after acceptance)",
      "allOf": [
        {
          "$ref": "#/definitions/EligibilityCommon"
        },
        {
          "type": "object",
          "properties": {
            "allowedBoardingPassTypes": {
              "description": "The types of boarding pass that the traveler is allowed to receive and use at the airport. Airport Printed = only documents printed at agent desk or on a kiosk are allowed, so the user will not be allowed to retrieve a boarding pass from DAPI Home Printed = the user can download a PDF boarding pass to be printed Barcode On Device = mobile boarding pass (including Apple Wallet and airline-specific applications) Text Message On Device (legacy) = some airports allow access to boarding gates with only a confirmation text message. This is not a mobile boarding pass!",
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "airportPrinted",
                  "homePrinted",
                  "barcodeOnDevice",
                  "textMessageOnDevice"
                ]
              }
            }
          }
        }
      ],
      "x-api-ref": "EligibilityBoardingPass"
    },
    "EligibilityCommon": {
      "type": "object",
      "description": "Define the eligibility for an operation",
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "description": "Eligibility status",
          "type": "string",
          "enum": [
            "eligible",
            "ineligible",
            "partial"
          ]
        }
      },
      "x-api-ref": "EligibilityCommon"
    },
    "EligibilityGeneric": {
      "type": "object",
      "description": "Common attributes shared by eligibility objects.",
      "required": [
        "isEligible"
      ],
      "properties": {
        "isEligible": {
          "description": "Returns true if the current context is eligible to the functionality.",
          "type": "boolean"
        },
        "nonEligibilityReasons": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NonEligibilityReason"
          }
        }
      },
      "x-api-ref": "EligibilityGeneric"
    },
    "EligibleCondition": {
      "type": "object",
      "description": "EligibleCondition is attached with a payment method, this defines if this payment of method is eligible or not for the booking if the defined condition is met\n",
      "discriminator": "type",
      "required": [
        "type",
        "isEligible"
      ],
      "properties": {
        "type": {
          "type": "string",
          "description": "The eligible type\n",
          "enum": [
            "PromocodeEligibleCondition"
          ]
        },
        "isEligible": {
          "type": "boolean",
          "description": "Payment method is eligible or not when this condition is matched\n"
        }
      },
      "x-api-ref": "EligibleCondition"
    },
    "EligibleService": {
      "type": "object",
      "properties": {
        "serviceId": {
          "type": "string",
          "x-dictionary-name": "service",
          "x-field-name": "service",
          "x-field-type": "ServiceItem"
        },
        "isIncluded": {
          "type": "boolean",
          "description": "Used to specify if a service is included (true) or at a charge (false)"
        },
        "fromPrice": {
          "$ref": "#/definitions/Amount"
        }
      },
      "x-api-ref": "EligibleService"
    },
    "Email": {
      "type": "object",
      "description": "Email information. Derived from Contact object by polymorphism",
      "allOf": [
        {
          "$ref": "#/definitions/Contact"
        },
        {
          "type": "object",
          "properties": {
            "purpose": {
              "description": "Contact purpose",
              "type": "string",
              "enum": [
                "standard",
                "notification",
                "information"
              ],
              "default": "standard"
            },
            "address": {
              "description": "Email address, e.g. test@amadeus.com",
              "type": "string",
              "x-risk-personal-data-field": "EMAIL_ADDRESS",
              "pattern": "^(?:[\\x20\\x24-\\x26\\x2B\\x2D-\\x3A\\x40-\\x7E])+$",
              "minLength": 1,
              "maxLength": 90
            },
            "lang": {
              "description": "Code of the preferred language to be used, e.g. en-GB for English-United Kingdom. [For more details](http://www.lingoes.net/en/translator/langcode.htm)",
              "type": "string",
              "pattern": "[a-zA-Z0-9-]{2,5}"
            }
          },
          "required": [
            "purpose",
            "address"
          ]
        }
      ],
      "x-api-ref": "Email"
    },
    "EndPointLocations": {
      "type": "object",
      "description": "List of origins and destination",
      "properties": {
        "originLocationCodes": {
          "type": "array",
          "description": "Departure location codes of outbound in cased of a multi cities departure search (city or airport   code). If the city pair crossing option is not set, the number of locations for the origin must be the same than the number of destinations",
          "items": {
            "type": "string",
            "pattern": "[a-zA-Z]{3}"
          },
          "x-dictionary-name": "location",
          "x-map-name": "originLocation",
          "x-field-type": "LocationDictionaryItem"
        },
        "destinationLocationCodes": {
          "type": "array",
          "description": "Destination location codes in case of a multi cities arrival search (city or airport code). If the city pair crossing option is not set, the number of locations for the destination must be the same than the number of origins",
          "items": {
            "type": "string",
            "pattern": "[a-zA-Z]{3}"
          },
          "x-dictionary-name": "location",
          "x-map-name": "destinationLocation",
          "x-field-type": "LocationDictionaryItem"
        }
      },
      "x-api-ref": "EndPointLocations"
    },
    "EntertainmentAmenity": {
      "type": "object",
      "description": "Details of Entertainment Amenity. NONE indicates it is not available for the specific cabin.\n",
      "properties": {
        "entertainmentType": {
          "description": "Type of entertainment\n",
          "type": "string",
          "enum": [
            "AIRLINE_PROVIDED_TABLET",
            "STREAMING_ON_FLIGHT_WIFI",
            "OVERHEAD_MONITORS",
            "AUDIO_VIDEO_ON_DEMAND",
            "LIVE_TV",
            "PRE_FLIGHT_DOWNLOAD_CONTENT",
            "SEAT_BACK_SCREENS",
            "NONE"
          ]
        },
        "isChargeable": {
          "description": "Defines if the entertainment amenity is chargeable",
          "type": "boolean"
        }
      },
      "x-api-ref": "EntertainmentAmenity"
    },
    "EntitlementDocument": {
      "type": "object",
      "discriminator": "documentType",
      "description": "Entitlement documents represents the documents that identifies a traveler for a certain purpose Object used to manipulate (add, read, update) entitlement documents. Two types of documents are available: - Spanish Resident Card - Spanish Large Family Card\n",
      "required": [
        "documentType"
      ],
      "properties": {
        "id": {
          "description": "Entitlement Document ID",
          "pattern": "[a-zA-Z0-9=]{1,100}",
          "type": "string",
          "x-risk-personal-data-field": "NATIONAL_DOCUMENT_NUMBER"
        },
        "tid": {
          "description": "Temporary id that can be used to associate requested and returned entitlement documents request. It is only valid the time of the transaction.",
          "type": "string",
          "pattern": "[a-zA-Z0-9_]{1,20}"
        },
        "documentType": {
          "type": "string",
          "description": "Type of entitlement document. please see [Entitlement Document documentation] https://dxapi.digitalforairlines.com/swagger-ui/display/entitlement_documents.html#/EntitlementDocumentTypes)",
          "enum": [
            "SpanishResidentCard",
            "SpanishLargeFamilyCard"
          ]
        }
      },
      "x-api-ref": "EntitlementDocument"
    },
    "EntitlementDocumentReply": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/EntitlementDocument"
            }
          }
        }
      ],
      "x-api-ref": "EntitlementDocumentReply"
    },
    "EntitlementDocumentsListReply": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EntitlementDocument"
              }
            }
          }
        }
      ],
      "x-api-ref": "EntitlementDocumentsListReply"
    },
    "ErrorMessage": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/WarningMessage"
        },
        {
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "description": "HTTP status code associated"
            }
          }
        }
      ],
      "x-api-ref": "ErrorMessage"
    },
    "EstimatedRoomType": {
      "type": "object",
      "description": "it returns the room type parsed from the room description, thus it is provided only for informational purposes",
      "properties": {
        "category": {
          "description": "Category code",
          "type": "string"
        },
        "beds": {
          "description": "Number of beds in the room (1-9)",
          "type": "integer"
        },
        "bedType": {
          "description": "Type of the bed",
          "type": "string"
        }
      },
      "x-api-ref": "EstimatedRoomType"
    },
    "EventLog": {
      "type": "object",
      "description": "The object representing one event and its details.",
      "properties": {
        "triggerEventName": {
          "description": "Describes nature of the change, in reference to history  it is transaction description that caused the change\n",
          "type": "string"
        },
        "dateTime": {
          "description": "Time of the change (ISO 8601)",
          "type": "string",
          "format": "date-time",
          "example": "2018-02-10T20:40:00+02:00"
        },
        "localDateTime": {
          "description": "Local time of the change (ISO 8601)",
          "type": "string",
          "format": "date-time",
          "example": "2018-02-10T20:40:00+02:00"
        },
        "office": {
          "description": "Contains the office information, meaning the Office id generating the event and the location where the event has been generated",
          "$ref": "#/definitions/Office"
        },
        "location": {
          "description": "Location where the event has taken place",
          "$ref": "#/definitions/Location"
        }
      },
      "x-api-ref": "EventLog"
    },
    "ExchangeBalance": {
      "type": "object",
      "description": "Price breakdowns of the differences between the old and new amounts in the change of an Order.\nDifferences may be negative if the new price is lower than the old price (use case of a refund)\n",
      "required": [
        "currencyCode",
        "total"
      ],
      "properties": {
        "base": {
          "description": "Base price. It includes some surcharges, but no taxes nor fees",
          "type": "integer",
          "format": "int64"
        },
        "total": {
          "description": "Grand Total price difference of the exchange, including base fare, taxes, surcharges, fees (excluding credit or debit card fees)",
          "type": "integer",
          "format": "int64"
        },
        "totalTaxes": {
          "description": "Sum of all taxes (including surcharges)",
          "type": "integer",
          "format": "int64"
        },
        "currencyCode": {
          "description": "Selling currency ISO currency [code](http://www.iso.org/iso/home/standards/currency_codes.htm). It allows accessing the currency dictionary, containing any information related to the currency: in particular `decimalPlaces`  can be used to determine the amount actual value and display. Example: the numerical amount `1955` associated to the `EUR` currency code (`decimalPlaces: 2`) corresponds to: `19,55 Euro`. For points (or miles) the code associated is `MIL`, for compensation/upgrade credits `ECR`.",
          "type": "string",
          "pattern": "[A-Z]{3}",
          "x-dictionary-name": "currency",
          "x-field-name": "currency",
          "x-field-type": "CurrencyDictionaryItem"
        }
      },
      "x-api-ref": "ExchangeBalance"
    },
    "ExchangeFareInfoRequest": {
      "type": "object",
      "description": "Details of the fare information to be used for the repricing of the itinerary after flight exchange in a air bound exchange process with association to related flights and/or travelers.\n",
      "allOf": [
        {
          "$ref": "#/definitions/ItemsAssociation"
        },
        {
          "$ref": "#/definitions/FareInfo"
        }
      ],
      "x-api-ref": "ExchangeFareInfoRequest"
    },
    "ExchangeMilesDetails": {
      "type": "object",
      "description": "Miles breakdown related to the change of an Order",
      "properties": {
        "balance": {
          "description": "Amount difference in miles between the old trip and new modified trip",
          "$ref": "#/definitions/ExchangeBalance"
        },
        "additionalCollection": {
          "description": "Additional amount in miles to collect for the air modification",
          "$ref": "#/definitions/Amount"
        },
        "refund": {
          "description": "Refund amount in miles for the change of an Order",
          "$ref": "#/definitions/Amount"
        },
        "penalty": {
          "description": "Penalty amount for the change of an Order",
          "$ref": "#/definitions/Amount"
        }
      },
      "x-api-ref": "ExchangeMilesDetails"
    },
    "ExchangePriceDetails": {
      "type": "object",
      "description": "Price breakdowns related to the change of an Order",
      "properties": {
        "balance": {
          "description": "Amount difference between the old trip and new modified trip",
          "$ref": "#/definitions/ExchangeBalance"
        },
        "additionalCollection": {
          "description": "Additional amount to collect for the air modification",
          "$ref": "#/definitions/Amount"
        },
        "penalty": {
          "description": "Penalty amount for the Order change",
          "$ref": "#/definitions/Amount"
        },
        "refund": {
          "description": "Refund amount for the change of an Order in the original issue currency",
          "$ref": "#/definitions/Amount"
        },
        "convertedMiles": {
          "description": "Price breakdowns related to an exchange (e.g. air exchange) expressed in miles",
          "$ref": "#/definitions/ExchangeMilesDetails"
        }
      },
      "x-api-ref": "ExchangePriceDetails"
    },
    "ExchangeTravelDocument": {
      "type": "object",
      "description": "Travel documents generated at prime issuance time.",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "Travel Document number (e.g. 220-1638074788)",
          "type": "string",
          "x-risk-personal-data-field": "AIRLINE_TICKET_NUMBER"
        },
        "documentType": {
          "description": "It specifies if the document is the record generated when confirming flights (documentType =  eticket),\nor is used for for travel related services, such as excess baggage charges, miscellaneous charges, penalty fees, residual value, lounge access charges, etc.. (documentType =  service)\n",
          "type": "string",
          "enum": [
            "eticket",
            "services"
          ],
          "default": "eticket"
        },
        "flightIds": {
          "type": "array",
          "description": "Flight ids the element is associated with",
          "items": {
            "type": "string"
          }
        },
        "travelerId": {
          "type": "string",
          "description": "Traveler id the element is associated with"
        }
      },
      "x-api-ref": "ExchangeTravelDocument"
    },
    "ExtendedRegulatoryDocument": {
      "type": "object",
      "description": "Regulatory document (passport, visa, etc.) necessary for the travel",
      "allOf": [
        {
          "$ref": "#/definitions/RegulatoryDocumentCommon"
        },
        {
          "type": "object",
          "required": [
            "documentType"
          ],
          "properties": {
            "documentType": {
              "description": "Type of the document : passport, visa, identityCard, workPermit...",
              "type": "string",
              "enum": [
                "passport",
                "identityCard",
                "airAttendanceLicense",
                "birthCertificate",
                "borderCrossingCard",
                "drivingLicense",
                "flightMechanicalLicense",
                "foreignNationalRegistration",
                "loyalAttorneyIdentification",
                "militaryIdentityCard",
                "operationalDispatcherLicense",
                "pilotLicense",
                "reEntryPermit",
                "naturalisationCardUS",
                "workPermit",
                "visa",
                "residentAlienCard",
                "permanentResidentCard",
                "redressNumber",
                "knownTravelerNumber",
                "homeReentryPermit",
                "chinaTravelPermit",
                "chinaTravelPermitHongKongMacao",
                "chinaExitAndEntryPermit",
                "residentTravelPermit",
                "residentTravelPermitToFromTaiwanAndChina",
                "residentTravelPermitToFromHongKongMacao",
                "residentTravelPermitToHongKongMacao",
                "taiwanExitAndEntryPermit",
                "nexusCard"
              ]
            }
          }
        }
      ],
      "x-api-ref": "ExtendedRegulatoryDocument"
    },
    "Extension": {
      "type": "object",
      "description": "Cart extensions have a user defined name and a text based content.\nThere is on sub-type of extension:\n- TextExtension\nExtension is a polymorphic object, meaning that it contains only the basic structure from which derive the types of Extension.\nTo see the structure of the different extensions, please see [Extensions documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/cart_extensions.html#/ExtensionType/get_)\n",
      "required": [
        "extensionType",
        "name"
      ],
      "discriminator": "extensionType",
      "properties": {
        "id": {
          "description": "",
          "type": "string",
          "pattern": "[a-zA-Z0-9-]{1,20}"
        },
        "tid": {
          "description": "Temporary id used to identify an extension, it is only valid the time of the transaction.",
          "type": "string",
          "pattern": "[a-zA-Z0-9_]{1,20}"
        },
        "extensionType": {
          "type": "string",
          "description": "type of Extension. For available types of extensions, please see [Extension  documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/cart_extensions.html#/ExtensionType/get_)",
          "enum": [
            "TextExtension"
          ]
        },
        "name": {
          "type": "string",
          "minLength": 1,
          "maxLength": 64,
          "description": "The name of this extension."
        },
        "travelerId": {
          "type": "string",
          "description": "Traveler id associated to this extension."
        },
        "travelerTId": {
          "type": "string",
          "description": "It can be used when both the extension and its associated traveler are created simultaneously."
        }
      },
      "x-api-ref": "Extension"
    },
    "ExtensionListReply": {
      "type": "object",
      "description": "List of extensions",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Extension"
              }
            }
          }
        }
      ],
      "x-api-ref": "ExtensionListReply"
    },
    "ExtensionReply": {
      "type": "object",
      "description": "Extension item",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/Extension"
            }
          }
        }
      ],
      "x-api-ref": "ExtensionReply"
    },
    "ExtensionsTransportationDictionary": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CountryDictionary"
        },
        {
          "type": "object",
          "properties": {
            "currency": {
              "type": "object",
              "description": "Currencies map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "$ref": "#/definitions/CurrencyDictionaryItem"
              }
            }
          }
        }
      ],
      "x-api-ref": "ExtensionsTransportationDictionary"
    },
    "ExtensionsTransportationOffer": {
      "type": "object",
      "description": "Transportation offers to be saved as extensions in the cart",
      "required": [
        "transportationType",
        "pickUp",
        "dropOff",
        "numberOfServices"
      ],
      "properties": {
        "id": {
          "description": "Transportation  Offer Id",
          "type": "string"
        },
        "transportationType": {
          "description": "Type of transportation offer",
          "type": "string",
          "enum": [
            "car",
            "bus",
            "taxi",
            "train",
            "metro",
            "helicopter",
            "bike",
            "scooter",
            "others"
          ]
        },
        "description": {
          "description": "Description of transportation type",
          "type": "string"
        },
        "pickUp": {
          "description": "Pick up information",
          "$ref": "#/definitions/TransportationOfferDetails"
        },
        "dropOff": {
          "description": "Drop off information",
          "$ref": "#/definitions/TransportationOfferDetails"
        },
        "company": {
          "description": "Details of the trasporation company",
          "$ref": "#/definitions/TransportationCompany"
        },
        "numberOfPassengers": {
          "type": "integer",
          "description": "Number of passengers"
        },
        "numberOfServices": {
          "type": "integer",
          "description": "Number of services booked. For example - number of bus tickets bought, number of cars rented"
        },
        "baggageCapacity": {
          "description": "Number of baggages supported",
          "type": "integer"
        },
        "externalTransportationBooking": {
          "description": "Booking details performed in the external API provider",
          "$ref": "#/definitions/ExternalTransportationBooking"
        },
        "media": {
          "type": "array",
          "description": "Details of the transportation Media",
          "items": {
            "$ref": "#/definitions/MediaUri"
          }
        },
        "price": {
          "description": "Details of the tranportation amount",
          "$ref": "#/definitions/Amount"
        }
      },
      "x-api-ref": "ExtensionsTransportationOffer"
    },
    "ExtensionsTransportationOffersListReply": {
      "type": "object",
      "description": "Reply containing a list of transporation offers",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "type": "array",
              "description": "List of transporation offers",
              "items": {
                "$ref": "#/definitions/ExtensionsTransportationOffer"
              }
            },
            "dictionaries": {
              "$ref": "#/definitions/ExtensionsTransportationDictionary"
            }
          }
        }
      ],
      "x-api-ref": "ExtensionsTransportationOffersListReply"
    },
    "ExternalTransportationBooking": {
      "type": "object",
      "description": "Booking details of the transporation performed in the external API provider",
      "properties": {
        "externalBookingId": {
          "description": "BookingId of the transportation which is performed in the external API provider",
          "type": "string",
          "x-risk-personal-data-field": "PNR_RECORD_LOCATOR"
        },
        "externalBookingStatus": {
          "description": "Booking status of the transportation which is performed in the external API provider",
          "type": "string"
        },
        "externalBookingPaymentStatus": {
          "description": "Payment status of the booking performed in the external API provider",
          "type": "string"
        }
      },
      "x-api-ref": "ExternalTransportationBooking"
    },
    "ExtraMileage": {
      "type": "object",
      "description": "Mileage information concerning the possible extra periods.\nIf the customer returns the car after the rental period deadline,\nthe provider might charge the traveled mileage at a different price.\n",
      "properties": {
        "perHour": {
          "description": "Mileage information per extra hour",
          "$ref": "#/definitions/Mileage"
        },
        "perDay": {
          "description": "Mileage information per extra day",
          "$ref": "#/definitions/Mileage"
        }
      },
      "x-api-ref": "ExtraMileage"
    },
    "FareBenefitsDifference": {
      "type": "object",
      "description": "Comparison of fare benefits between the reference offer/bound and the curent offer/bound.\n",
      "properties": {
        "serviceCode": {
          "type": "string",
          "description": "Service item identifier as defined in the services dictionary",
          "x-dictionary-name": "service",
          "x-field-name": "service",
          "x-field-type": "ServiceDictionaryItem"
        },
        "status": {
          "description": "Information on comparison status.",
          "type": "string",
          "enum": [
            "ADDED",
            "REMOVED",
            "CHANGED"
          ]
        }
      },
      "x-api-ref": "FareBenefitsDifference"
    },
    "FareClassSelection": {
      "type": "object",
      "description": "Fare basis data used while computing the seatmap",
      "required": [
        "fareClass",
        "travelerIds"
      ],
      "properties": {
        "fareClass": {
          "description": "Fare basis code associated to the flight and the below travelers",
          "type": "string"
        },
        "travelerIds": {
          "description": "Traveler identifiers associated to the `fareClass` value (aka fare basis code). When used for AdvancedSearch seatmap computation, this corresponds to the temporary traveler id (`tid`)",
          "type": "array",
          "items": {
            "type": "string"
          },
          "minItems": 1
        }
      },
      "x-api-ref": "FareClassSelection"
    },
    "FareConditionsDictionaryItem": {
      "type": "object",
      "description": "Fare conditions about refundability about exchangeability before first flight departure\n",
      "properties": {
        "category": {
          "description": "Category of the condition (i.e.Advance Purchase, Minimum stay, Change conditions, Refund conditions)\n",
          "type": "string",
          "enum": [
            "change",
            "refund"
          ]
        },
        "situation": {
          "description": "It describes to which part of the trip the condition applies. (i.e. before/after departure, in case of no show, etc.)\n",
          "type": "string",
          "enum": [
            "beforeDeparture"
          ]
        },
        "details": {
          "type": "array",
          "description": "Exhaustive list of details corresponding to the fare conditions\n",
          "items": {
            "$ref": "#/definitions/AirOfferConditionDetailsDictionaryItem"
          }
        }
      },
      "x-api-ref": "FareConditionsDictionaryItem"
    },
    "FareConditionsDifference": {
      "type": "object",
      "description": "Comparison of fare conditions between the reference offer/bound and the curent offer/bound.\n",
      "properties": {
        "fareConditionsCodes": {
          "description": "FareConditionsCode provides a reference to the purchase conditions defined in the dictionary.",
          "type": "string",
          "x-dictionary-name": "fareConditionsCodes",
          "x-field-name": "fareConditions",
          "x-field-type": "FareConditionsDictionaryItem"
        },
        "status": {
          "description": "Information on comparison status.",
          "type": "string",
          "enum": [
            "ADDED",
            "REMOVED"
          ]
        }
      },
      "x-api-ref": "FareConditionsDifference"
    },
    "FareDiscount": {
      "type": "object",
      "description": "Fare discount (FD) element added to the order. \n",
      "properties": {
        "code": {
          "type": "string",
          "description": "Fare discount type.  Supported values are:\n* DCP for discount coupon             \n",
          "enum": [
            "DCP"
          ]
        },
        "couponNumber": {
          "type": "string",
          "pattern": "[a-zA-Z0-9]{12}",
          "description": "value of the discount coupon number"
        },
        "freeText": {
          "type": "string",
          "description": "free text of Fare Discount element stored in the Order"
        },
        "travelerId": {
          "type": "string",
          "description": "reference to the traveler associated to fare discount"
        },
        "flightId": {
          "type": "string",
          "description": "reference to the flight associated to the fare discount"
        }
      },
      "x-api-ref": "FareDiscount"
    },
    "FareElement": {
      "type": "object",
      "description": "Fare Element added to an order.",
      "allOf": [
        {
          "$ref": "#/definitions/ItemCommon"
        },
        {
          "type": "object",
          "required": [
            "text",
            "code"
          ],
          "properties": {
            "code": {
              "description": "Type code of the fare element (FT = tour code)",
              "type": "string",
              "enum": [
                "FT"
              ]
            },
            "text": {
              "description": "Free-flow text sent in the fare element in the order",
              "type": "string",
              "pattern": ".{1,53}"
            },
            "travelerIds": {
              "type": "array",
              "description": "A list of travelers associated to this fare element. If not specified, the fare element applies to all travelers",
              "items": {
                "type": "string",
                "pattern": "[a-zA-Z0-9-]{1,20}"
              }
            },
            "flightIds": {
              "type": "array",
              "description": "A list of flights associated to this fare element. If not specified, the fare element applies to all flights",
              "items": {
                "type": "string",
                "pattern": "[a-zA-Z0-9-]{1,20}"
              }
            }
          }
        }
      ],
      "x-api-ref": "FareElement"
    },
    "FareFamilyDictionaryItem": {
      "description": "Fare Family dictionary",
      "type": "object",
      "required": [
        "hierarchy"
      ],
      "properties": {
        "hierarchy": {
          "description": "Hierarchy of the fare family as defined on the GDS.",
          "type": "integer"
        },
        "commercialFareFamily": {
          "description": "Commercial Fare Family associated",
          "type": "string"
        },
        "cabin": {
          "description": "Cabin used for Fare Family",
          "type": "string"
        }
      },
      "x-api-ref": "FareFamilyDictionaryItem"
    },
    "FareFamilyService": {
      "description": "Fare Family associated Service",
      "type": "object",
      "properties": {
        "serviceCode": {
          "type": "string",
          "description": "Service item identifier as defined in the services dictionary",
          "x-dictionary-name": "service",
          "x-field-name": "service",
          "x-field-type": "ServiceDictionaryItem"
        },
        "applicability": {
          "type": "string",
          "description": "Applicability of this service for the given fare family for informative display, the service catalog has to be called afterwards to book the service:\n * included - service included at no charge\n * chargeable - service available at a charge, it's possible that the service is finally exempted, e.g thanks to frequent flyer status etc\n * notOffered - service not offered",
          "enum": [
            "included",
            "chargeable",
            "notOffered"
          ]
        }
      },
      "x-api-ref": "FareFamilyService"
    },
    "FareFamilyWithServicesDictionaryItem": {
      "description": "Fare Family dictionary",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/FareFamilyDictionaryItem"
        },
        {
          "type": "object",
          "properties": {
            "eligibleServices": {
              "type": "array",
              "description": "(Deprecated - will be removed in V3) Eligible services for a given fare family",
              "items": {
                "$ref": "#/definitions/EligibleService"
              }
            },
            "services": {
              "type": "array",
              "description": "A list of ancillary services linked to this Fare family",
              "items": {
                "$ref": "#/definitions/FareFamilyService"
              }
            }
          }
        }
      ],
      "x-api-ref": "FareFamilyWithServicesDictionaryItem"
    },
    "FareInfo": {
      "type": "object",
      "properties": {
        "fareType": {
          "type": "string",
          "enum": [
            "public",
            "unifares"
          ]
        },
        "fareClass": {
          "type": "string"
        },
        "passengerTypeCode": {
          "type": "string",
          "description": "Passenger type code requested to price a given traveler",
          "pattern": "[a-zA-Z0-9]{2,3}",
          "x-risk-personal-data-field": "PASSENGER_TYPE"
        },
        "pricedPassengerTypeCodes": {
          "type": "array",
          "items": {
            "description": "Passenger type code used to price a given traveler, which can either be the requested passenger type code or a default one in case no fare  is available for the requested passenger type.\nThe list could as well contain applied passenger type discount codes in case the information is available.          \n",
            "type": "string"
          },
          "x-risk-personal-data-field": "PASSENGER_TYPE"
        },
        "travelerIds": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "Price applicable to this traveler or group of travelers"
          }
        },
        "ticketDesignator": {
          "type": "string",
          "description": "Code used by the airline to reflect the discount applied to the fares"
        },
        "passengerTypeDiscountCodes": {
          "type": "array",
          "description": "Passenger type discount codes used to biase the air offers pricing, corresponding to  the requested discounts. Depending on the pricing conditions, those discounts may not  be applied when the air offer is priced. Example: MIL, ICA\n",
          "items": {
            "type": "string",
            "pattern": "[a-zA-Z0-9]{2,6}"
          },
          "maxItems": 2,
          "x-risk-personal-data-field": "PASSENGER_TYPE"
        },
        "corporateCode": {
          "type": "string",
          "description": "Corporate code used by the airline to target a given fare"
        },
        "flightIds": {
          "type": "array",
          "description": "Flight identifiers associated to the fare (not available when using AirCalendar operations)",
          "items": {
            "type": "string"
          }
        }
      },
      "x-api-ref": "FareInfo"
    },
    "FareInfoOrder": {
      "type": "object",
      "properties": {
        "fareClass": {
          "type": "string"
        },
        "ticketDesignator": {
          "type": "string",
          "description": "Code used by the airline to reflect the discount applied to the fares"
        },
        "travelerIds": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "Price applicable to this traveler or group of travelers"
          }
        },
        "flightIds": {
          "type": "array",
          "description": "Flight identifiers associated to the fare (not available when using AirCalendar operations)",
          "items": {
            "type": "string"
          }
        }
      },
      "x-api-ref": "FareInfoOrder"
    },
    "FareInfoTravelDocument": {
      "type": "object",
      "properties": {
        "fareClass": {
          "type": "string"
        },
        "fareFamilyCode": {
          "description": "Fare Family code of the flight\n",
          "type": "string"
        },
        "couponStatus": {
          "description": "It represents the E-ticket record status code. This list below shows  the possible codes displayed in the e-ticket record: - Airport Control - Checked In - Exchanged/Reissued - Flown/Used - Converted to FIM: A FIM (Flight Interruption Manifest) is issued by the airline \n  when the airline has to involuntarily reroute a passenger due to flight cancellation \n  or major flight delay\n- Irregular Operations - Lifted/Boarded - Open: OPEN FOR USE - Printed - Refunded - Suspended - Revoked - Paper Ticket - Unavailable: Indicates Interim status: airport control, checked in, \n  irregular operations, lifted/boarded, refund taxes/fees/charges only, \n  suspended, revoked, unavailable\n- Void - Refund Taxes/Fees/Charges only: Indicates the Validating Carrier has \n  determined the coupon is no longer available for use as ticketed, applicable \n  taxes/fees/charges may be refunded.\n- Print Exchange - Closed: Indicates the Validating Carrier has determined the coupon(s) \n  is not available for use. This is a final status, no follow-up action permitted\n- Ground Transportation Voucher \n",
          "type": "string",
          "enum": [
            "airportControl",
            "checkedIn",
            "exchangedOrReissued",
            "flownOrUsed",
            "convertedToFIM",
            "irregularOperations",
            "liftedOrBoarded",
            "open",
            "printed",
            "refunded",
            "suspended",
            "revoked",
            "paperTicket",
            "unavailable",
            "void",
            "refundTaxesOrFeesOrCharges",
            "printExchange",
            "closed",
            "groundTransportationVoucher"
          ]
        },
        "ticketDesignator": {
          "type": "string",
          "description": "Code used by the airline to reflect the discount applied to the fares"
        },
        "noShow": {
          "type": "boolean",
          "description": "indicator in case of no-show for the current coupon"
        },
        "freeCheckedBaggageAllowanceItems": {
          "description": "Free checked baggage allowance corresponding to the flights in the Order",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FreeCheckedBaggageAllowanceItem"
          }
        },
        "flight": {
          "$ref": "#/definitions/FlightTravelDocument"
        },
        "reasonForIssuance": {
          "description": "Provided for EMD only.\nAn EMD is categorized based on its Reason for Issuance Code (RFIC), which defines the  group of service it belongs to. There can be only one RFIC code per EMD.\nEven if an EMD can have multiple Reason for Issuance Sub-Codes (RFISC, one per coupon),  industrie standard still recommends one RFISC per EMD.",
          "$ref": "#/definitions/ReasonForIssuance"
        }
      },
      "x-api-ref": "FareInfoTravelDocument"
    },
    "FareOptions": {
      "type": "object",
      "description": "Fare Options",
      "properties": {
        "sellingLocationCode": {
          "description": "PointOfSale location code",
          "type": "string",
          "pattern": "[a-zA-Z]{3}",
          "example": "NCE"
        },
        "ticketingLocationCode": {
          "description": "PointOfTicketing location code",
          "type": "string",
          "pattern": "[a-zA-Z]{3}",
          "example": "BLR"
        },
        "fareTypes": {
          "type": "array",
          "description": "Type of fares, Ex: Public,Private.",
          "items": {
            "type": "string",
            "enum": [
              "public",
              "unifare"
            ]
          }
        },
        "currencyCode": {
          "type": "string",
          "description": "This defines the desired currency. If not specified the used currency is based on the location of the origin.",
          "pattern": "[A-Z]{3}"
        },
        "corporateCodes": {
          "type": "array",
          "description": "Corporate code or corporate name are used for targeting specific corporate fares.",
          "items": {
            "type": "string",
            "pattern": "[a-zA-Z][a-zA-Z0-9]{1,9}|\\d{6}"
          }
        }
      },
      "x-api-ref": "FareOptions"
    },
    "Fee": {
      "type": "object",
      "required": [
        "currencyCode"
      ],
      "properties": {
        "value": {
          "description": "Fee amount value expressed as numerical information.\nThe decimal places are defined at currency level.\ne.g. \"EUR 100.85\" will be represented as `10085`, with the currency `decimalPlaces` = 2.\n",
          "type": "integer",
          "format": "int64",
          "minimum": 0
        },
        "rawValue": {
          "description": "Fee raw amount value, with the decimal separator.\nFor some content (e.g. Hotel), providers can return prices with more decimals than the decimalPlaces defined for corresponding currency, so amount value has to be rounded. e.g. if hotel provider returns 121.50 HKD, since 'decimalPlaces' = 0 for HKD currency, it is represented as rounded 'value'= 122 and 'rawAmount' = \"121.50\"\n",
          "type": "string"
        },
        "currencyCode": {
          "description": "ISO currency [code](http://www.iso.org/iso/home/standards/currency_codes.htm). It allows accessing the currency dictionary, containing any information related to the currency: in particular `decimalPlaces`  can be used to determine the amount actual value and display. Example: the numerical amount `1955` associated to the `EUR` currency code (`decimalPlaces: 2`) corresponds to: `19,55 Euro`. For points (or miles) the code associated is `MIL`, for compensation/upgrade credits `ECR`.",
          "type": "string",
          "pattern": "[A-Z]{3}",
          "x-dictionary-name": "currency",
          "x-field-name": "currency",
          "x-field-type": "CurrencyDictionaryItem"
        },
        "code": {
          "description": "Fee code",
          "type": "string",
          "pattern": "[A-Z0-9]{1,4}"
        },
        "nature": {
          "description": "Type of fee",
          "type": "string",
          "enum": [
            "ticketing",
            "paymentCard"
          ]
        },
        "minAmount": {
          "type": "integer",
          "format": "int64",
          "description": "Minimum fee amount",
          "minimum": 0
        },
        "maxAmount": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum fee amount",
          "minimum": 0
        }
      },
      "x-api-ref": "Fee"
    },
    "Flight": {
      "type": "object",
      "description": "Flight information corresponding to a flight id. This object is included in the FlightDictionary.\nA flight element may be composed of several legs (FlightEndPoint).\n",
      "allOf": [
        {
          "$ref": "#/definitions/FlightBase"
        },
        {
          "type": "object",
          "properties": {
            "isOpenSegment": {
              "description": "Open segment",
              "type": "boolean",
              "default": false
            },
            "isInformational": {
              "description": "Flag indicating if the flight is informational.\nAn informational flight is booked and fully managed on another system and is only  kept in the Amadeus order for information purpose.",
              "type": "boolean"
            },
            "secureFlightIndicator": {
              "description": "Flag indicating if some travel documents are needed for this flight",
              "type": "boolean",
              "default": false
            },
            "isSubjectToGovernmentApproval": {
              "description": "Flag indicating if the flight must be approved by the government (DEI-201)",
              "type": "boolean"
            },
            "performanceIndicator": {
              "$ref": "#/definitions/FlightPerformanceIndicator"
            },
            "stops": {
              "type": "array",
              "description": "Details of stops for direct or change of gauge flights",
              "items": {
                "$ref": "#/definitions/FlightStop"
              }
            },
            "meals": {
              "description": "List of meals associated with booked booking class of the flight.",
              "$ref": "#/definitions/Meal"
            },
            "availableMealsPerBookingClass": {
              "description": "This field is FOR FLIGHT SEARCH (SHOPPING) STEP ONLY. Provides the list of meals per booking class in the flight. B=BREAKFAST, K=CONTINENTAL BREAKFAST, L=LUNCH, D=DINNER, S=SNACK OR BRUNCH, O=COLD MEAL, H=HOT MEAL, M=MEAL (NON-SPECIFIC), R=REFRESHMENT, C=ALCOHOLIC BEVERAGES COMPLIMENTARY,F=FOOD FOR PURCHASE, P=ALCOHOLIC BEVERAGES FOR PURCHASE,  Y=DUTY FREE SALES AVAILABLE, N=NO MEAL SERVICE, V=REFRESHMENTS FOR PURCHASE, G=FOOD AND BEVERAGES FOR PURCHASE. Booking Class can be Y=Economy.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Meal"
              }
            },
            "flightStatus": {
              "description": "status of the flight",
              "type": "string",
              "enum": [
                "scheduled",
                "departed",
                "cancelled",
                "delayed",
                "arrived",
                "landingCancelled",
                "diverted"
              ]
            },
            "aircraftConfigurationVersion": {
              "description": "Physical configuration, also called ACV code (aircraft type + fitted configuration)",
              "type": "string",
              "pattern": "[A-Z0-9]{3}",
              "example": "2C1"
            }
          }
        }
      ],
      "x-api-ref": "Flight"
    },
    "FlightBase": {
      "type": "object",
      "description": "Flight basic information corresponding to a flight id.\nA flight element may be composed of several legs (FlightEndPoint).\n",
      "allOf": [
        {
          "$ref": "#/definitions/FlightCommon"
        },
        {
          "type": "object",
          "required": [
            "departure",
            "arrival"
          ],
          "properties": {
            "departure": {
              "$ref": "#/definitions/FlightEndPoint"
            },
            "arrival": {
              "$ref": "#/definitions/FlightEndPoint"
            },
            "aircraftCode": {
              "description": "IATA aircraft code (http://www.flugzeuginfo.net/table_accodes_iata_en.php)",
              "type": "string",
              "pattern": "[a-zA-Z0-9]{1,3}",
              "x-dictionary-name": "aircraft",
              "x-field-name": "aircraft",
              "x-field-type": "string"
            },
            "duration": {
              "type": "integer",
              "description": "Duration time expressed in seconds"
            },
            "connectionTime": {
              "type": "integer",
              "description": "Duration of connecting time expressed in seconds"
            }
          }
        }
      ],
      "x-api-ref": "FlightBase"
    },
    "FlightBaseSearchRequest": {
      "type": "object",
      "description": "Flight basic information corresponding to a flight id.\nA flight element may be composed of several legs (FlightEndPointSearchRequest).\n",
      "allOf": [
        {
          "$ref": "#/definitions/FlightCommonSearchRequest"
        },
        {
          "type": "object",
          "required": [
            "departure",
            "arrival"
          ],
          "properties": {
            "departure": {
              "$ref": "#/definitions/FlightEndPointSearchRequest"
            },
            "arrival": {
              "$ref": "#/definitions/FlightEndPointSearchRequest"
            },
            "aircraftCode": {
              "description": "IATA aircraft code (http://www.flugzeuginfo.net/table_accodes_iata_en.php)",
              "type": "string",
              "pattern": "[a-zA-Z0-9]{1,3}",
              "x-dictionary-name": "aircraft",
              "x-field-name": "aircraft",
              "x-field-type": "string"
            },
            "duration": {
              "type": "integer",
              "description": "Duration time expressed in seconds"
            },
            "connectionTime": {
              "type": "integer",
              "description": "Duration of connecting time expressed in seconds"
            }
          }
        }
      ],
      "x-api-ref": "FlightBaseSearchRequest"
    },
    "FlightBasicEndPoint": {
      "type": "object",
      "description": "Departure or arrival information (if case of multiple legs, departure for the first leg)",
      "properties": {
        "locationCode": {
          "description": "IATA airport code",
          "type": "string",
          "pattern": "[a-zA-Z]{3}",
          "x-dictionary-name": "location",
          "x-field-name": "location",
          "x-field-type": "LocationDictionaryItem"
        },
        "dateTime": {
          "description": "Local date and time with the following format \"yyyy-MM-dd'T'HH:mm:ssZ\" (e.g. 2018-02-10T20:40:00+02:00)",
          "type": "string",
          "format": "date-time",
          "example": "2018-02-10T20:40:00+02:00"
        },
        "estimatedDateTime": {
          "description": "Estimated time, in case of delay or other modification.\nLocal date and time with the following format \\\"yyyy-MM-dd'T'HH:mm:ssZ\\\" (e.g. 2018-02-10T20:40:00+02:00)\n",
          "type": "string",
          "format": "date-time",
          "example": "2018-02-10T21:40:00+02:00"
        }
      },
      "x-api-ref": "FlightBasicEndPoint"
    },
    "FlightChangeEligibility": {
      "type": "object",
      "description": "Eligibility for `change` gives an indication whether the API user can start a rebooking flow, which would ultimately change the booked flights.  If the eligibility is returned as false, the API provides a reason code and title regarding the restriction:\n| Code  | Title                                            |\n|-------|--------------------------------------------------|\n| 000   | FLIGHT CHANGE NOT ALLOWED                        |\n| 001   | FLIGHT CHANGE NOT ALLOWED                        |\n| 002   | GROUP PNR NOT ALLOWED                            |\n| 003   | PNR NOT TICKETED                                 |\n| 004   | UNACCOMPANIED MINOR NOT ALLOWED                  |\n| 005   | SERVICES NOT ISSUED                              |\n| 006   | COMPLEX ITINERARY NOT ALLOWED                    |\n| 007   | INVALID FLIGHT STATUS                            |\n| 008   | PNR/TICKET DISCREPANCY                           |\n| 009   | FLIGHT CHANGE NOT ALLOWED BY FARE                |\n| 010   | EXTRA SEAT NOT ALLOWED                           |\n| 011   | FLOWN SEGMENT                                    |\n| 012   | UPGRADED PNR                                     |\n| 013   | ORDER WITH CHECKED-IN BAGGAGE                    |\n| 014   | DISRUPTED ORDER                                  |\n| 015   | FARE DISCOUNT IN ORDER                           |\n| 016   | ORDER WITH PASSENGER BOARDED                     | \n| 017   | PASSENGER NO SHOW                                |\n| 018   | ITINERARY WITH STOPOVER                          |\n| 019   | INVALID COUPON STATUS                            |\n| 020   | MULTIPLE TICKETS PER PASSENGER NOT ALLOWED       |\n| 021   | MILES & CASH OR REDEMPTION ORDER                 |\n| 022   | TOO MANY TICKETS IN ORDER                        |",
      "required": [
        "flightIds",
        "isEligible"
      ],
      "properties": {
        "airBoundId": {
          "type": "string",
          "description": "Identifier of the bound"
        },
        "flightIds": {
          "type": "array",
          "description": "These are the identifiers of the flights that compose the order's air bound. Each bound has it's own flight change eligibility. This array will contain only one element in case of bound with single flight.",
          "items": {
            "type": "string",
            "pattern": "[a-zA-Z0-9-]{1,20}"
          }
        },
        "isEligible": {
          "description": "If true, this bound can be changed.",
          "type": "boolean"
        },
        "nonEligibilityReasons": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NonEligibilityReason"
          }
        },
        "nonEligibilityReason": {
          "description": "DEPRECATED the field \"nonEligibilityReasons\" must be used instead When the bound cannot be change, the reason of the non-elibility is reported here.",
          "type": "string",
          "enum": [
            "flightGeneralStatus",
            "ticketProblem",
            "ticketTypeNotAllowed",
            "offerConditionRule",
            "operationalStatusNotSupported",
            "ineligibleBookingStatus",
            "flightIsDisrupted",
            "flightChangeNotActivated",
            "incompatibleCheckinStatus",
            "groupsNotSupported",
            "promotionNotSupported",
            "upgradedPNRNotAllowed",
            "unaccompaniedMinorNotSupported",
            "tooManyPassengerTypes",
            "unissuedServicePresent",
            "complexItineraryNotAllowed",
            "fareDiscountNotAllowed",
            "extraSeatNotAllowed",
            "discrepancyInOrder",
            "milesAndCashNotAllowed",
            "dynamicWaiverPresent",
            "reasonNotSupportedInThisVersion"
          ]
        },
        "isPenaltyApplied": {
          "type": "boolean",
          "description": "True if a penalty will be applied when the change occurs. Please refer to the fare conditions for details about this penalty: 'GET /air-offer-conditions'"
        },
        "isRouteChangeAllowed": {
          "type": "boolean",
          "description": "If true, origin and/or destination can be modified when changing flights in this order."
        },
        "waiverCodes": {
          "type": "array",
          "description": "If the airline encourages a flight change and waives the associated penalty, the detailed conditions are found in the waiver. In that case, the associated codes are returned here and details can be found in the associated dictionary.",
          "items": {
            "type": "string",
            "pattern": "[a-zA-Z0-9-]{1,20}"
          },
          "x-dictionary-name": "waivers",
          "x-map-name": "waiver",
          "x-field-type": "DynamicWaiverDictionaryItem"
        }
      },
      "x-api-ref": "FlightChangeEligibility"
    },
    "FlightCommon": {
      "type": "object",
      "required": [
        "marketingAirlineCode"
      ],
      "properties": {
        "marketingAirlineCode": {
          "description": "IATA airline code (http://www.iata.org/publications/Pages/code-search.aspx)",
          "type": "string",
          "pattern": "[A-Z0-9]{2,3}",
          "x-dictionary-name": "airline",
          "x-field-name": "marketingAirline",
          "x-field-type": "string"
        },
        "operatingAirlineCode": {
          "description": "IATA airline code (http://www.iata.org/publications/Pages/code-search.aspx)",
          "type": "string",
          "pattern": "[A-Z0-9]{2,3}",
          "x-dictionary-name": "airline",
          "x-field-name": "operatingAirline",
          "x-field-type": "string"
        },
        "operatingAirlineName": {
          "description": "Airline name if there is no airline code for the operating carrier",
          "type": "string",
          "pattern": "[A-Za-z0-9 /-]{1,60}"
        },
        "marketingFlightNumber": {
          "description": "Marketing flight number",
          "type": "string",
          "pattern": "[A-Z0-9]*",
          "example": "123"
        },
        "operatingAirlineFlightNumber": {
          "description": "Operating airline flight number",
          "type": "string",
          "pattern": "[A-Z0-9]*",
          "example": "123"
        },
        "aircraftOwnerAirlineCode": {
          "description": "IATA airline code (http://www.iata.org/publications/Pages/code-search.aspx). Defines the actual aircraft owner airline operating the flight",
          "type": "string",
          "pattern": "[A-Z0-9]{2,3}",
          "x-dictionary-name": "airline",
          "x-field-name": "airline",
          "x-field-type": "string"
        },
        "aircraftOwnerAirlineName": {
          "description": "Aircraft owner name if the IATA airline code is not available",
          "type": "string",
          "pattern": "[A-Z0-9 -]{1,60}"
        },
        "suffix": {
          "description": "Suffix of the flight.\nIATA standard practices rule that only one flight with a given flight number can operate on a given day.  However, some issues can happen if a flight originally scheduled to depart before midnight is delayed,  and its new schedule departure date changes to the next day. In this case, to avoid two flight numbers  departing on the same date, a suffix is typically added to the delayed flight number.\nFor example flight 6X 233 scheduled to depart on the 11th May at 23:30 may become 6X 233A scheduled to  depart on the 12th May at 00:30, in order to avoid conflicts with 6X 233 scheduled to depart on the 12th May at 23:30.          ",
          "type": "string",
          "pattern": "[A-Z0-9]{1,4}",
          "example": "A"
        }
      },
      "x-api-ref": "FlightCommon"
    },
    "FlightCommonSearchRequest": {
      "type": "object",
      "required": [
        "marketingAirlineCode",
        "marketingFlightNumber"
      ],
      "properties": {
        "marketingAirlineCode": {
          "description": "IATA airline code (http://www.iata.org/publications/Pages/code-search.aspx)",
          "type": "string",
          "pattern": "[A-Z0-9]{2,3}",
          "x-dictionary-name": "airline",
          "x-field-name": "marketingAirline",
          "x-field-type": "string"
        },
        "operatingAirlineCode": {
          "description": "IATA airline code (http://www.iata.org/publications/Pages/code-search.aspx)",
          "type": "string",
          "pattern": "[A-Z0-9]{2,3}",
          "x-dictionary-name": "airline",
          "x-field-name": "operatingAirline",
          "x-field-type": "string"
        },
        "operatingAirlineName": {
          "description": "Airline name if there is no airline code for the operating carrier",
          "type": "string",
          "pattern": "[A-Za-z0-9 /-]{1,60}"
        },
        "marketingFlightNumber": {
          "description": "Marketing flight number",
          "type": "string",
          "pattern": "[A-Z0-9]*",
          "example": "123"
        },
        "operatingAirlineFlightNumber": {
          "description": "Operating airline flight number",
          "type": "string",
          "pattern": "[A-Z0-9]*",
          "example": "123"
        },
        "aircraftOwnerAirlineCode": {
          "description": "IATA airline code (http://www.iata.org/publications/Pages/code-search.aspx). Defines the actual aircraft owner airline operating the flight",
          "type": "string",
          "pattern": "[A-Z0-9]{2,3}",
          "x-dictionary-name": "airline",
          "x-field-name": "airline",
          "x-field-type": "string"
        },
        "aircraftOwnerAirlineName": {
          "description": "Aircraft owner name if the IATA airline code is not available",
          "type": "string",
          "pattern": "[A-Z0-9 -]{1,60}"
        },
        "suffix": {
          "description": "Suffix of the flight.\nIATA standard practices rule that only one flight with a given flight number can operate on a given day.  However, some issues can happen if a flight originally scheduled to depart before midnight is delayed,  and its new schedule departure date changes to the next day. In this case, to avoid two flight numbers  departing on the same date, a suffix is typically added to the delayed flight number.\nFor example flight 6X 233 scheduled to depart on the 11th May at 23:30 may become 6X 233A scheduled to  depart on the 12th May at 00:30, in order to avoid conflicts with 6X 233 scheduled to depart on the 12th May at 23:30.          ",
          "type": "string",
          "pattern": "[A-Z0-9]{1,4}",
          "example": "A"
        }
      },
      "x-api-ref": "FlightCommonSearchRequest"
    },
    "FlightDelay": {
      "type": "object",
      "description": "Flight delay information corresponding to a flight id.\n",
      "properties": {
        "reason": {
          "type": "string",
          "description": "Reason for the flight delay.Appears only when the flight is delayed."
        },
        "duration": {
          "type": "integer",
          "description": "Duration of the flight delay expressed in seconds, it appears only when the flight is delayed."
        }
      },
      "x-api-ref": "FlightDelay"
    },
    "FlightDictionary": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AircraftDictionary"
        },
        {
          "type": "object",
          "properties": {
            "flight": {
              "type": "object",
              "description": "Flight information corresponding to a flight id. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "$ref": "#/definitions/Flight"
              }
            }
          }
        }
      ],
      "x-api-ref": "FlightDictionary"
    },
    "FlightEndPoint": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/FlightBasicEndPoint"
        },
        {
          "type": "object",
          "properties": {
            "gate": {
              "description": "Gate Information.Returned only in 'Get flight information' and in 'Get flight information by order' details.",
              "type": "string",
              "pattern": "[a-zA-Z0-9]{1,6}"
            },
            "terminal": {
              "description": "Terminal number",
              "type": "string",
              "pattern": "[a-zA-Z0-9]{1,25}"
            }
          }
        }
      ],
      "x-api-ref": "FlightEndPoint"
    },
    "FlightEndPointSearchRequest": {
      "type": "object",
      "required": [
        "locationCode",
        "dateTime"
      ],
      "properties": {
        "locationCode": {
          "description": "IATA airport code",
          "type": "string",
          "pattern": "[a-zA-Z]{3}",
          "x-dictionary-name": "location",
          "x-field-name": "location",
          "x-field-type": "LocationDictionaryItem"
        },
        "dateTime": {
          "description": "Local date and time with the following format \"yyyy-MM-dd'T'HH:mm:ssZ\" (e.g. 2018-02-10T20:40:00+02:00)",
          "type": "string",
          "format": "date-time",
          "example": "2018-02-10T20:40:00+02:00"
        },
        "estimatedDateTime": {
          "description": "Estimated time, in case of delay or other modification. Local date and time with the following format \\\"yyyy-MM-dd'T'HH:mm:ssZ\\\" (e.g. 2018-02-10T20:40:00+02:00)\n",
          "type": "string",
          "format": "date-time",
          "example": "2018-02-10T21:40:00+02:00"
        },
        "gate": {
          "description": "Gate Information.Returned only in 'Get flight information' and in 'Get flight information by order' details.",
          "type": "string",
          "pattern": "[a-zA-Z0-9]{1,6}"
        },
        "terminal": {
          "description": "Terminal number",
          "type": "string",
          "pattern": "[a-zA-Z0-9]{1,25}"
        }
      },
      "x-api-ref": "FlightEndPointSearchRequest"
    },
    "FlightExchangeDetails": {
      "type": "object",
      "description": "Details of the new flight to be booked in order air bound exchange",
      "allOf": [
        {
          "$ref": "#/definitions/FlightCommon"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Flight id"
            },
            "departure": {
              "$ref": "#/definitions/FlightBasicEndPoint"
            },
            "arrival": {
              "$ref": "#/definitions/FlightBasicEndPoint"
            },
            "bookingClass": {
              "description": "Booking class",
              "type": "string"
            }
          }
        }
      ],
      "x-api-ref": "FlightExchangeDetails"
    },
    "FlightInformation": {
      "type": "object",
      "description": "Flight information corresponding to a flight id.\n",
      "allOf": [
        {
          "$ref": "#/definitions/FlightInformationSegment"
        },
        {
          "type": "object",
          "required": [
            "availableBookingClasses",
            "flightStatus"
          ],
          "properties": {
            "availableBookingClasses": {
              "description": "Information on the list of booking classes available in the flight.",
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "[A-Z]{1}"
              }
            },
            "flightStatus": {
              "description": "status of the flight",
              "type": "string",
              "enum": [
                "scheduled",
                "boardingOpen",
                "boardingClosed",
                "departed",
                "cancelled",
                "delayed",
                "arrived",
                "landingCancelled",
                "diverted"
              ]
            },
            "flightDelay": {
              "$ref": "#/definitions/FlightDelay"
            },
            "availableMealsPerBookingClass": {
              "description": "Provides the list of meals per booking class in the flight. B=BREAKFAST, K=CONTINENTAL BREAKFAST, L=LUNCH, D=DINNER, S=SNACK OR BRUNCH, O=COLD MEAL, H=HOT MEAL, M=MEAL (NON-SPECIFIC), R=REFRESHMENT, C=ALCOHOLIC BEVERAGES COMPLIMENTARY,F=FOOD FOR PURCHASE, P=ALCOHOLIC BEVERAGES FOR PURCHASE,  Y=DUTY FREE SALES AVAILABLE, N=NO MEAL SERVICE, V=REFRESHMENTS FOR PURCHASE, G=FOOD AND BEVERAGES FOR PURCHASE. Booking Class can be Y=Economy.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Meal"
              }
            }
          }
        }
      ],
      "x-api-ref": "FlightInformation"
    },
    "FlightInformationAirlineCommon": {
      "type": "object",
      "required": [
        "airlineCode",
        "flightNumber"
      ],
      "properties": {
        "airlineCode": {
          "description": "IATA airline code (http://www.iata.org/publications/Pages/code-search.aspx)",
          "type": "string",
          "pattern": "[A-Z0-9]{2,3}",
          "x-dictionary-name": "airline",
          "x-field-name": "airline",
          "x-field-type": "string"
        },
        "flightNumber": {
          "description": "flight number",
          "type": "string",
          "pattern": "[A-Z0-9]*",
          "example": "123"
        },
        "suffix": {
          "description": "Suffix of the flight.\nIATA standard practices rule that only one flight with a given flight number can operate on a given day.  However, some issues can happen if a flight originally scheduled to depart before midnight is delayed,  and its new schedule departure date changes to the next day. In this case, to avoid two flight numbers  departing on the same date, a suffix is typically added to the delayed flight number.\nFor example flight 6X 233 scheduled to depart on the 11th May at 23:30 may become 6X 233A scheduled to  depart on the 12th May at 00:30, in order to avoid conflicts with 6X 233 scheduled to depart on the 12th May at 23:30.          ",
          "type": "string",
          "pattern": "[A-Z0-9]{1,4}",
          "example": "A"
        }
      },
      "x-api-ref": "FlightInformationAirlineCommon"
    },
    "FlightInformationArrivalEndPoint": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/FlightEndPoint"
        },
        {
          "type": "object",
          "required": [
            "flightStatus"
          ],
          "properties": {
            "timings": {
              "$ref": "#/definitions/FlightInformationArrivalTimings"
            },
            "diversion": {
              "$ref": "#/definitions/FlightInformationDiversionAirport"
            },
            "flightStatus": {
              "description": "status of the flight",
              "type": "string",
              "enum": [
                "scheduled",
                "departed",
                "cancelled",
                "delayed",
                "arrived",
                "landingCancelled",
                "diverted"
              ]
            },
            "flightDelay": {
              "$ref": "#/definitions/FlightDelay"
            }
          }
        }
      ],
      "x-api-ref": "FlightInformationArrivalEndPoint"
    },
    "FlightInformationArrivalTimings": {
      "type": "object",
      "properties": {
        "scheduledArrivalDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Scheduled time of arrival, local to the arrival airport with the format \"yyyy-MM-dd'T'HH:mm:ssZ\" (e.g. 2018-02-10T20:40:00+02:00)"
        },
        "actualOnBlockDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Actual time of arrival at the gate, local to the arrival airport with the format \"yyyy-MM-dd'T'HH:mm:ssZ\" (e.g. 2018-02-10T20:40:00+02:00)"
        },
        "estimatedOnBlockDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Estimated time of arrival at the gate, local to the arrival airport with the format \"yyyy-MM-dd'T'HH:mm:ssZ\" (e.g. 2018-02-10T20:40:00+02:00)"
        },
        "estimatedTouchDownDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Estimated time of arrival at the runway, local to the arrival airport with the format \"yyyy-MM-dd'T'HH:mm:ssZ\" (e.g. 2018-02-10T20:40:00+02:00)"
        },
        "actualTouchDownDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Actual time of arrival at the runway, local to the leg arrival airport with the format \"yyyy-MM-dd'T'HH:mm:ssZ\" (e.g. 2018-02-10T20:40:00+02:00)              "
        }
      },
      "x-api-ref": "FlightInformationArrivalTimings"
    },
    "FlightInformationDepartureEndPoint": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/FlightEndPoint"
        },
        {
          "type": "object",
          "required": [
            "flightStatus"
          ],
          "properties": {
            "timings": {
              "description": "Departure timings",
              "$ref": "#/definitions/FlightInformationDepartureTimings"
            },
            "flightStatus": {
              "description": "status of the flight",
              "type": "string",
              "enum": [
                "scheduled",
                "departed",
                "cancelled",
                "delayed",
                "arrived",
                "landingCancelled",
                "diverted"
              ]
            },
            "flightDelay": {
              "$ref": "#/definitions/FlightDelay"
            }
          }
        }
      ],
      "x-api-ref": "FlightInformationDepartureEndPoint"
    },
    "FlightInformationDepartureTimings": {
      "type": "object",
      "properties": {
        "scheduledDepartureDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Scheduled time of departure, local to the departure airport with the format \"yyyy-MM-dd'T'HH:mm:ssZ\" (e.g. 2018-02-10T20:40:00+02:00)"
        },
        "actualOffBlockDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Actual time of departure from the gate, local to the leg departure airport with the format \"yyyy-MM-dd'T'HH:mm:ssZ\" (e.g. 2018-02-10T20:40:00+02:00)"
        },
        "estimatedOffBlockDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Estimated time of departure from the gate, local to the leg departure airport with the format \"yyyy-MM-dd'T'HH:mm:ssZ\" (e.g. 2018-02-10T20:40:00+02:00)"
        },
        "estimatedTakeOffDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Estimated time of departure from the runway, local to the leg departure airport with the format \"yyyy-MM-dd'T'HH:mm:ssZ\" (e.g. 2018-02-10T20:40:00+02:00)"
        },
        "actualTakeOffDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Actual time of departure from the runway, local to the leg departure airport with the format \"yyyy-MM-dd'T'HH:mm:ssZ\" (e.g. 2018-02-10T20:40:00+02:00)          "
        }
      },
      "x-api-ref": "FlightInformationDepartureTimings"
    },
    "FlightInformationDictionary": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AircraftDictionary"
        },
        {
          "type": "object",
          "properties": {
            "meal": {
              "type": "object",
              "description": "Status map for meal codes. For more details please see [Maps in dictionary documentation] (https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        }
      ],
      "x-api-ref": "FlightInformationDictionary"
    },
    "FlightInformationDiversionAirport": {
      "type": "object",
      "properties": {
        "fromAirport": {
          "description": "Initial Airport from where the diversion occured.",
          "type": "string"
        },
        "toAirport": {
          "description": "Aircraft continues at this Airport",
          "type": "string"
        }
      },
      "x-api-ref": "FlightInformationDiversionAirport"
    },
    "FlightInformationEndPoint": {
      "type": "object",
      "properties": {
        "locationCode": {
          "description": "IATA airport code",
          "type": "string",
          "pattern": "[a-zA-Z]{3}",
          "x-dictionary-name": "location",
          "x-field-name": "location",
          "x-field-type": "LocationDictionaryItem"
        },
        "terminal": {
          "description": "Terminal number",
          "type": "string",
          "pattern": "[a-zA-Z0-9]{1,25}"
        },
        "dateTime": {
          "description": "Local date and time with the following format \"yyyy-MM-dd'T'HH:mm:ssZ\" e.g. 2018-02-10T20:40:00+02:00)",
          "type": "string",
          "format": "date-time",
          "example": "2018-02-10T20:40:00+02:00"
        }
      },
      "x-api-ref": "FlightInformationEndPoint"
    },
    "FlightInformationFlightStop": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/FlightStop"
        },
        {
          "type": "object",
          "properties": {
            "departureTimings": {
              "description": "Departure timings",
              "$ref": "#/definitions/FlightInformationDepartureTimings"
            },
            "arrivalTimings": {
              "description": "Arrival timings",
              "$ref": "#/definitions/FlightInformationArrivalTimings"
            },
            "diversion": {
              "description": "Diversion information if available",
              "$ref": "#/definitions/FlightInformationDiversionAirport"
            },
            "availableBookingClasses": {
              "description": "Information on the list of booking classes available in the flight.",
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "[A-Z]{1}"
              }
            },
            "flightStatus": {
              "description": "Status of the flight",
              "type": "string",
              "enum": [
                "scheduled",
                "departed",
                "cancelled",
                "delayed",
                "arrived",
                "landingCancelled",
                "diverted"
              ]
            },
            "flightDelay": {
              "$ref": "#/definitions/FlightDelay"
            },
            "availableMealsPerBookingClass": {
              "description": "Provides information of meals for every available booking class in the flight. Meal code specifies the type of meal available per booking class. B=BREAKFAST, K=CONTINENTAL BREAKFAST, L=LUNCH, D=DINNER, S=SNACK OR BRUNCH, O=COLD MEAL, H=HOT MEAL, M=MEAL (NON-SPECIFIC), R=REFRESHMENT, C=ALCOHOLIC BEVERAGES COMPLIMENTARY,F=FOOD FOR PURCHASE, P=ALCOHOLIC BEVERAGES FOR PURCHASE,  Y=DUTY FREE SALES AVAILABLE, N=NO MEAL SERVICE, V=REFRESHMENTS FOR PURCHASE, G=FOOD AND BEVERAGES FOR PURCHASE. Booking Class can be Y=Economy.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Meal"
              }
            }
          }
        }
      ],
      "x-api-ref": "FlightInformationFlightStop"
    },
    "FlightInformationOperatingFlight": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/FlightInformationAirlineCommon"
        },
        {
          "type": "object",
          "properties": {
            "airlineName": {
              "description": "Airline name if there is no airline code for the operating carrier",
              "type": "string",
              "pattern": "[A-Z0-9]{1,60}"
            }
          }
        }
      ],
      "x-api-ref": "FlightInformationOperatingFlight"
    },
    "FlightInformationReply": {
      "type": "object",
      "description": "Reply containing flight information of flights\n",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FlightInformation"
              }
            },
            "dictionaries": {
              "$ref": "#/definitions/FlightInformationDictionary"
            }
          }
        }
      ],
      "x-api-ref": "FlightInformationReply"
    },
    "FlightInformationSegment": {
      "type": "object",
      "description": "Flight information corresponding to a flight id. A flight element may be composed of several legs (FlightEndPoint).\n",
      "properties": {
        "departure": {
          "$ref": "#/definitions/FlightInformationDepartureEndPoint"
        },
        "arrival": {
          "$ref": "#/definitions/FlightInformationArrivalEndPoint"
        },
        "marketingFlight": {
          "description": "Information about the flight",
          "$ref": "#/definitions/FlightInformationAirlineCommon"
        },
        "operatingFlight": {
          "description": "Information about the operating flight",
          "$ref": "#/definitions/FlightInformationOperatingFlight"
        },
        "isOpenSegment": {
          "description": "Open segment",
          "type": "boolean",
          "default": false
        },
        "secureFlightIndicator": {
          "description": "Flag indicating if some travel documents are needed for this flight",
          "type": "boolean",
          "default": false
        },
        "performanceIndicator": {
          "$ref": "#/definitions/FlightPerformanceIndicator"
        },
        "aircraftCode": {
          "description": "IATA aircraft code (http://www.flugzeuginfo.net/table_accodes_iata_en.php)",
          "type": "string",
          "pattern": "[a-zA-Z0-9]{1,3}",
          "x-dictionary-name": "aircraft",
          "x-field-name": "aircraft",
          "x-field-type": "string"
        },
        "stops": {
          "type": "array",
          "description": "Details of stops for direct or change of gauge flights",
          "items": {
            "$ref": "#/definitions/FlightInformationFlightStop"
          }
        },
        "duration": {
          "type": "integer",
          "description": "Duration time expressed in seconds"
        }
      },
      "x-api-ref": "FlightInformationSegment"
    },
    "FlightItem": {
      "allOf": [
        {
          "$ref": "#/definitions/FlightItemIdentifier"
        },
        {
          "type": "object",
          "properties": {
            "cabin": {
              "type": "string",
              "enum": [
                "eco",
                "ecoPremium",
                "business",
                "first"
              ]
            },
            "bookingClass": {
              "description": "Booking class associated to the cabin",
              "type": "string"
            },
            "operating": {
              "description": "Information concerning the airline operating the flight if any.",
              "$ref": "#/definitions/FlightItemOperating"
            },
            "statusCode": {
              "type": "string",
              "description": "Operational status. HK = confirmed, HL = waitlist, TK = schedule change confirmed, TL = schedule change waitlist, UN = unable to confirm not operating, UC = unable to confirm, HX = have cancelled, NO = no action taken.\nAt shopping time, the only status that can be returned is HL=waitlist\n",
              "x-dictionary-name": "bookingStatus",
              "x-field-name": "bookingStatus",
              "x-field-type": "BookingStatusDictionaryItem"
            },
            "connectionTime": {
              "type": "integer",
              "description": "In case of flight connection, it expresses the waiting time until the next flight. Duration expressed in seconds"
            },
            "airlineOrderId": {
              "type": "string",
              "description": "Order id created on the airline reservation system for the airline of that flight. It could be for example the reservation number created on the PSS of the airline when the airline is not on Altea.",
              "x-risk-personal-data-field": "PNR_RECORD_LOCATOR"
            },
            "quota": {
              "description": "Number of remaining seats for this flight. Quota is only returned in case of low availability at shopping time or when performing a Cart refresh.",
              "type": "integer",
              "minimum": 0,
              "maximum": 999
            },
            "departureDaysDifference": {
              "type": "integer",
              "description": "Number of days difference compared to the departure time of the first flight of the bound.\nInformation computed considering the local date and returned only if dates not referring to the same day.\n'Example: +2' as departure days difference means the flight will take off '2' days later than first flight took off.\n"
            },
            "arrivalDaysDifference": {
              "type": "integer",
              "description": "Number of days difference compared to the departure time of the first flight of the bound.\nInformation computed considering the local date and returned only if dates not referring to the same day.\n'Example: +2' as arrival days difference means the flight will take off '2' days later than first flight took off.\n"
            },
            "fareFamilyCode": {
              "description": "Fare family of the flight.",
              "type": "string",
              "x-dictionary-name": "fareFamilyWithServices",
              "x-field-name": "fareFamily",
              "x-field-type": "FareFamilyWithServicesDictionaryItem"
            },
            "isFlown": {
              "description": "Flag indicating if the flight has already been flown (the default value is false).",
              "type": "boolean"
            },
            "amenityCodes": {
              "description": "It provides a reference to the amenities defined in the dictionary.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-dictionary-name": "amenities",
              "x-map-name": "amenities",
              "x-field-type": "AmenitiesDictionaryItem"
            }
          }
        }
      ],
      "x-api-ref": "FlightItem"
    },
    "FlightItemIdentifier": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Flight id, as defined in flights dictionary",
          "x-dictionary-name": "flight",
          "x-field-name": "flight",
          "x-field-type": "Flight"
        }
      },
      "x-api-ref": "FlightItemIdentifier"
    },
    "FlightItemOperating": {
      "type": "object",
      "properties": {
        "bookingClass": {
          "description": "Booking class associated to the cabin",
          "type": "string"
        }
      },
      "x-api-ref": "FlightItemOperating"
    },
    "FlightPerformanceIndicator": {
      "description": "Details of the flight on-time performance indicator",
      "type": "object",
      "properties": {
        "onTimeArrival": {
          "description": "Percentage of on-time arrival (from 0 to 100)",
          "type": "integer"
        },
        "calculationPeriod": {
          "description": "Period from which the data are calculated",
          "type": "string",
          "format": "date-time",
          "example": "2018-02-10T20:40:00+02:00"
        },
        "dataAccuracy": {
          "description": "Accuracy of the percentage data",
          "type": "string"
        }
      },
      "x-api-ref": "FlightPerformanceIndicator"
    },
    "FlightReaccommodationEligibility": {
      "type": "object",
      "description": "The eligibility to change or acknowledge a bound of an order that has been disrupted.",
      "required": [
        "change"
      ],
      "properties": {
        "acknowledge": {
          "description": "Indicates the eligibility to acknowledge bound(s) that has been disrupted.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AcknowledgeEligibility"
          }
        },
        "change": {
          "description": "Indicates the eligibility to change a bound for free after the order has been disrupted.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChangeFlightReaccommodationEligibility"
          }
        }
      },
      "x-api-ref": "FlightReaccommodationEligibility"
    },
    "FlightReaccommodationPeriod": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ElementaryPeriod"
        }
      ],
      "x-api-ref": "FlightReaccommodationPeriod"
    },
    "FlightRequest": {
      "type": "object",
      "description": "Flight related input required to perform a search",
      "required": [
        "marketingAirlineCode",
        "marketingFlightNumber",
        "originLocationCode",
        "destinationLocationCode",
        "departureDate",
        "isRequestedFlight"
      ],
      "properties": {
        "marketingAirlineCode": {
          "description": "IATA airline code (http://www.iata.org/publications/Pages/code-search.aspx)",
          "type": "string",
          "pattern": "[A-Z0-9]{2,3}",
          "example": "AY"
        },
        "marketingFlightNumber": {
          "description": "Marketing flight number",
          "type": "string",
          "pattern": "[A-Z0-9]*",
          "example": "827"
        },
        "originLocationCode": {
          "type": "string",
          "description": "Departure location code of the flight (airport code)",
          "pattern": "[a-zA-Z]{3}",
          "example": "HEL"
        },
        "destinationLocationCode": {
          "type": "string",
          "description": "Destination location code of the flight (airport code), in case of a round trip this is also the departure location code of second bound",
          "pattern": "[a-zA-Z]{3}",
          "example": "LON"
        },
        "departureDate": {
          "description": "Departure flight date in ISO 8601 (http://www.w3.org/TR/NOTE-datetime) without timezone",
          "type": "string",
          "format": "date",
          "example": "2016-07-01"
        },
        "bookingClass": {
          "type": "string",
          "description": "Booking class for seat reservation. Used to refine seat map results. If not specified, \"Y\" (Economy) booking class is used by default",
          "pattern": "[A-Z]{1,2}",
          "example": "J"
        },
        "isRequestedFlight": {
          "type": "boolean",
          "description": "Defines which flight should be used for the seatmap computation. Only one flight can have isRequestedFlight = true."
        },
        "fareClassSelections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FareClassSelection"
          },
          "description": "Defines the association between the fare basis to be used for the travelers while computing the seatmap for this flight"
        }
      },
      "x-api-ref": "FlightRequest"
    },
    "FlightSearchRequest": {
      "title": "FlightSearchRequest",
      "allOf": [
        {
          "$ref": "#/definitions/FlightBaseSearchRequest"
        },
        {
          "type": "object",
          "required": [
            "cabin"
          ],
          "properties": {
            "fareInfo": {
              "$ref": "#/definitions/FareInfo"
            },
            "cabin": {
              "type": "string",
              "enum": [
                "eco",
                "ecoPremium",
                "business",
                "first"
              ]
            },
            "bookingClass": {
              "type": "string",
              "pattern": "[A-Z]{1}"
            }
          }
        }
      ],
      "x-api-ref": "FlightSearchRequest"
    },
    "FlightSegment": {
      "type": "object",
      "description": "Details for one of the flight segment for a given flight's proposal.",
      "required": [
        "flightId"
      ],
      "properties": {
        "flightId": {
          "type": "string",
          "description": "Flight id, as defined in flights dictionary",
          "x-dictionary-name": "flight",
          "x-field-name": "flight",
          "x-field-type": "Flight"
        },
        "connectionTime": {
          "type": "integer",
          "description": "In case of flight connection, it expresses the waiting time until the next flight. Duration expressed in seconds"
        },
        "airlineOrderId": {
          "type": "string",
          "description": "Order id created on the airline reservation system for the airline of that flight. It could be for example the reservation number created on the PSS of the airline when the airline is not on Altea.",
          "x-risk-personal-data-field": "PNR_RECORD_LOCATOR"
        },
        "departureDaysDifference": {
          "type": "integer",
          "description": "Number of days difference compared to the departure time of the first flight of the bound.\nInformation computed considering the local date and returned only if dates not referring to the same day.\n'Example: +2' as departure days difference means the flight will take off '2' days later than first flight took off.\n"
        },
        "arrivalDaysDifference": {
          "type": "integer",
          "description": "Number of days difference compared to the departure time of the first flight of the bound.\nInformation computed considering the local date and returned only if dates not referring to the same day.\n'Example: +2' as arrival days difference means the flight will take off '2' days later than first flight took off.\n"
        }
      },
      "x-api-ref": "FlightSegment"
    },
    "FlightStop": {
      "description": "Details of stops for direct or change of gauge flights",
      "type": "object",
      "properties": {
        "locationCode": {
          "description": "Flight will stop at this location",
          "type": "string",
          "pattern": "[a-zA-Z]{3}",
          "x-dictionary-name": "location",
          "x-field-name": "location",
          "x-field-type": "LocationDictionaryItem"
        },
        "departureTerminal": {
          "description": "Flight will stop at this terminal",
          "type": "string",
          "pattern": "[a-zA-Z0-9]{1,25}"
        },
        "duration": {
          "description": "Stop duration expressed in seconds",
          "type": "integer"
        },
        "isChangeOfGauge": {
          "description": "Type of stop",
          "type": "boolean"
        },
        "arrivalDateTime": {
          "description": "Arrival at the stop with the following format \"yyyy-MM-dd'T'HH:mm:ssZ\" (e.g. 2018-02-10T20:40:00+02:00)",
          "type": "string",
          "format": "date-time",
          "example": "2018-02-10T20:40:00+02:00"
        },
        "departureDateTime": {
          "description": "Departure from the stop with the following format \"yyyy-MM-dd'T'HH:mm:ssZ\" (e.g. 2018-02-10T20:40:00+02:00)",
          "type": "string",
          "format": "date-time",
          "example": "2018-02-10T20:40:00+02:00"
        },
        "aircraftCode": {
          "description": "IATA aircraft code (http://www.flugzeuginfo.net/table_accodes_iata_en.php). Specified if a change of gauge (with change of aircraft) occurs",
          "type": "string",
          "pattern": "[a-zA-Z0-9]{1,3}",
          "x-dictionary-name": "aircraft",
          "x-field-name": "aircraft",
          "x-field-type": "string"
        },
        "aircraftOwnerAirlineCode": {
          "description": "IATA airline code (http://www.iata.org/publications/Pages/code-search.aspx). Defines the aircraft owner airline code for the flight departing from the technical stop's location.",
          "type": "string",
          "pattern": "[A-Z0-9]{2,3}",
          "x-dictionary-name": "airline",
          "x-field-name": "airline",
          "x-field-type": "string"
        },
        "aircraftOwnerAirlineName": {
          "description": "Aircraft owner name if the IATA airline code is not available",
          "type": "string",
          "pattern": "[A-Z0-9]{1,60}"
        }
      },
      "x-api-ref": "FlightStop"
    },
    "FlightTimetableData": {
      "type": "object",
      "description": "Flight information related to a single segment of the timetable",
      "properties": {
        "flight": {
          "$ref": "#/definitions/FlightBase"
        },
        "numberOfStops": {
          "type": "integer",
          "description": "Number of stops for the flight"
        },
        "operatingDays": {
          "type": "array",
          "description": "List of the day the flight operates in the week corresponding to the date provided",
          "items": {
            "type": "string",
            "enum": [
              "monday",
              "tuesday",
              "wednesday",
              "thursday",
              "friday",
              "saturday",
              "sunday"
            ]
          }
        }
      },
      "x-api-ref": "FlightTimetableData"
    },
    "FlightTimetableItem": {
      "type": "object",
      "description": "Reply containing a list of flight details and schedule. Each timetable item contains  a single flight or several flights in case of connections corresponding to the requested origin and destination",
      "properties": {
        "connectedFlights": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FlightTimetableData"
          }
        }
      },
      "x-api-ref": "FlightTimetableItem"
    },
    "FlightTimetableListReply": {
      "type": "object",
      "description": "Reply containing a list of flight details and schedule. Connecting flights are grouped together.",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FlightTimetableItem"
              }
            },
            "dictionaries": {
              "$ref": "#/definitions/AircraftDictionary"
            }
          }
        }
      ],
      "x-api-ref": "FlightTimetableListReply"
    },
    "FlightTravelDocument": {
      "type": "object",
      "description": "Flight info in travel documents",
      "allOf": [
        {
          "$ref": "#/definitions/FlightCommon"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "description": "Id of the flight associated to the travel document",
              "type": "string"
            },
            "departure": {
              "$ref": "#/definitions/FlightEndPoint"
            },
            "arrival": {
              "$ref": "#/definitions/FlightEndPoint"
            }
          }
        }
      ],
      "x-api-ref": "FlightTravelDocument"
    },
    "FoodAmenity": {
      "type": "object",
      "description": "Details of Food Amenity\n",
      "properties": {
        "foodType": {
          "description": "Details of food availability.\n",
          "type": "string",
          "enum": [
            "FOOD_AVAILABLE"
          ]
        },
        "isChargeable": {
          "description": "Defines if the food amenity is chargeable",
          "type": "boolean"
        }
      },
      "x-api-ref": "FoodAmenity"
    },
    "FormOfIdentificationDetail": {
      "type": "object",
      "discriminator": "identificationType",
      "description": "Object used to manipulate (add, read, update) the form of identification details (FOID).\nFor each operation only one type of data could be used according the document type, either a regulatory document, or a frequent flyer card,\nor a payment card or a ticket or confirmation number. To see the structure of the different types of identification, please see [FOID documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/foid.html#/IdentificationType/get_)\n",
      "required": [
        "identificationType",
        "travelerIds"
      ],
      "properties": {
        "id": {
          "description": "Form of identification request id, used only in output after the request creation.",
          "type": "string"
        },
        "tid": {
          "description": "Temporary id that can be used to associate requested and returned services. It is only valid the time of the transaction.",
          "type": "string",
          "pattern": "[a-zA-Z0-9_]{1,20}"
        },
        "airlineCode": {
          "description": "Two letter airline code defined for the FOID message. IATA airline code (http://www.iata.org/publications/Pages/code-search.aspx).",
          "type": "string",
          "pattern": "[A-Z0-9]{2}[A-Z]*"
        },
        "travelerIds": {
          "type": "array",
          "description": "Traveler(s) associated to this FOID(Form of identification). At least one traveler identifier is associated to the FOID.",
          "items": {
            "type": "string",
            "pattern": "[a-zA-Z0-9-]{1,20}"
          },
          "minItems": 1
        },
        "identificationType": {
          "type": "string",
          "description": "type of form of identification. To see the structure of the different types of identification, please see [FOID documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/foid.html#/IdentificationType/get_) Paymentcard identification is not allowed to be added to cart due to security reasons.",
          "enum": [
            "IdentificationRegulatoryDocuments",
            "IdentificationFrequentFlyerCard",
            "IdentificationPaymentCard",
            "IdentificationTicketNumber",
            "IdentificationConfirmationNumber",
            "IdentificationFromReference"
          ]
        }
      },
      "x-api-ref": "FormOfIdentificationDetail"
    },
    "FormOfIdentificationDetailListReply": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FormOfIdentificationDetail"
              }
            }
          }
        }
      ],
      "x-api-ref": "FormOfIdentificationDetailListReply"
    },
    "FormOfIdentificationDetailPostOrderRequest": {
      "type": "object",
      "description": "The FOID can be created either by using one or several regulatory documents (ID card, passport, driving license...) or by using a frequent flyer card or a payment card. The data can come from either from an existing resource referenced by its ID, or by a new one provided in the request.\nFor a ticket or confirmation number, the document number must be specified.\n",
      "allOf": [
        {
          "$ref": "#/definitions/FormOfIdentificationDetail"
        },
        {
          "type": "object",
          "properties": {
            "travelerId": {
              "type": "string",
              "pattern": "[a-zA-Z0-9-]{1,20}"
            }
          }
        }
      ],
      "x-api-ref": "FormOfIdentificationDetailPostOrderRequest"
    },
    "FreeBaggageAllowanceDifference": {
      "type": "object",
      "description": "Comparison of free baggage allowance between the reference offer/bound and the curent offer/bound.\n",
      "properties": {
        "isTypeChanged": {
          "type": "boolean",
          "description": "This defines if the baggage allowance type changed from weight to piece or vice versa.\n"
        },
        "updatedQuantity": {
          "description": "This field represents the baggage allowance by piece or weight.",
          "type": "integer"
        }
      },
      "x-api-ref": "FreeBaggageAllowanceDifference"
    },
    "FreeCheckedBaggageAllowanceItem": {
      "description": "Definition of free checked baggage allowance associated to a list of flights",
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/BaggageAllowanceDetail"
        },
        "flightIds": {
          "type": "array",
          "description": "Ids of the flights for which the baggage allowance is valid",
          "items": {
            "type": "string"
          }
        },
        "travelerIds": {
          "type": "array",
          "items": {
            "description": "Traveler or group of travelers for which the baggage allowance is valid",
            "type": "string"
          }
        }
      },
      "x-api-ref": "FreeCheckedBaggageAllowanceItem"
    },
    "FreeFlow": {
      "type": "object",
      "description": "This ContactType is used when the contact doesn't match other contact pattern (e.g. contact created manually or with restricted access). Cannot be used as input in Digital Commerce. FreeFlow information. Derived from Contact object by polymorphism.",
      "allOf": [
        {
          "$ref": "#/definitions/Contact"
        },
        {
          "type": "object",
          "required": [
            "freeFlowText"
          ],
          "properties": {
            "purpose": {
              "description": "Contact purpose",
              "type": "string",
              "enum": [
                "standard",
                "notification",
                "emergency",
                "information"
              ],
              "default": "standard"
            },
            "freeFlowText": {
              "description": "Freetext of the contact, based on actual API user rights.",
              "type": "string"
            },
            "maskingMethodApplied": {
              "description": "Defined if the contact is masked or not. Due to some access rights, some parts of this contact can be not visible.",
              "type": "string",
              "enum": [
                "masked",
                "partiallyMasked",
                "notMasked"
              ],
              "default": "notMasked"
            }
          }
        }
      ],
      "x-api-ref": "FreeFlow"
    },
    "FrequentFlyer": {
      "type": "object",
      "description": "Frequent flyer information",
      "properties": {
        "companyCode": {
          "description": "Code of the airline company",
          "type": "string",
          "pattern": "[A-Z0-9]{2,3}",
          "example": "6X",
          "x-risk-personal-data-field": "FREQUENT_FLYER_NUMBER"
        },
        "cardNumber": {
          "description": "Card number",
          "type": "string",
          "pattern": "[a-zA-Z0-9]{1,25}",
          "example": "992003172079000",
          "x-risk-personal-data-field": "FREQUENT_FLYER_NUMBER"
        },
        "priorityCode": {
          "description": "Frequent flyer priority code within the Loyalty system. Both tier level and priority codes are unique identifiers of a Frequent Flyer.",
          "type": "string",
          "pattern": "[0-9]{1,2}",
          "example": "3",
          "x-risk-personal-data-field": "FREQUENT_FLYER_NUMBER"
        },
        "tierLevel": {
          "description": "Frequent flyer tier level code",
          "type": "string",
          "pattern": "[a-zA-Z0-9]{1,10}",
          "example": "GOLD",
          "x-risk-personal-data-field": "FREQUENT_FLYER_NUMBER"
        },
        "airlineCustomerValue": {
          "description": "Provide the customer value defined by the airline according the customer profile (frequent traveller) e.g. 500. It can be determined according the revenue realized by the airline for this customer.",
          "type": "string",
          "pattern": "[0-9]{1,4}",
          "example": "3",
          "x-risk-personal-data-field": "FREQUENT_FLYER_NUMBER"
        }
      },
      "x-api-ref": "FrequentFlyer"
    },
    "FrequentFlyerCard": {
      "type": "object",
      "description": "Frequent flyer card that can be used to accrue or redeem miles (only mileage accrual supported so far). The Frequent Flyer Card can be associated to a Shopping cart as well as a Journey.",
      "allOf": [
        {
          "$ref": "#/definitions/ItemCommon"
        },
        {
          "type": "object",
          "required": [
            "companyCode",
            "cardNumber"
          ],
          "properties": {
            "tid": {
              "description": "Temporary id that can be used to associate requested and returned frequent flyer cards. Valid only for the time of the transaction.",
              "type": "string",
              "pattern": "[a-zA-Z0-9_]{1,20}"
            },
            "companyCode": {
              "description": "Code of the company emitting the card",
              "type": "string",
              "pattern": "[A-Z0-9]{2,3}",
              "example": "6X"
            },
            "cardNumber": {
              "description": "Card number",
              "type": "string",
              "pattern": "[a-zA-Z0-9]{1,25}",
              "example": "992003172079000",
              "x-risk-personal-data-field": "FREQUENT_FLYER_NUMBER"
            },
            "travelerId": {
              "description": "Id of the traveler, if present in the cart / order",
              "type": "string",
              "pattern": "[a-zA-Z0-9-]{1,20}"
            },
            "travelerTId": {
              "description": "It can be used when both the frequent flyer and its associated traveler are added simultanuously",
              "type": "string",
              "pattern": "[a-zA-Z0-9_]{1,20}"
            },
            "tierLevel": {
              "description": "Frequent flyer card tier level code",
              "type": "string",
              "pattern": "[a-zA-Z0-9]{1,10}",
              "example": "GOLD"
            },
            "tierLevelName": {
              "description": "Frequent flyer card tier level description Eg: \"Platinum\"",
              "type": "string",
              "pattern": "[a-zA-Z0-9]{1,70}"
            },
            "priorityCode": {
              "description": "Frequent flyer priority code within the Loyalty system. Both tier level and priority codes are unique identifiers of a Frequent Flyer.",
              "type": "string",
              "pattern": "[0-9]{1,2}",
              "example": "3"
            },
            "allianceTierLevel": {
              "description": "Frequent flyer card alliance tier level code",
              "type": "string",
              "pattern": "[a-zA-Z0-9]{1,10}"
            },
            "allianceTierLevelName": {
              "description": "Tier level description name. Eg: \"Platinum\"",
              "type": "string",
              "pattern": "[a-zA-Z0-9]{1,70}"
            },
            "alliancePriorityCode": {
              "description": "Frequent flyer alliance priority code within the Loyalty system.",
              "type": "string",
              "pattern": "[0-9]{1,2}",
              "example": "3"
            },
            "airlineCustomerValue": {
              "description": "Provide the customer value defined by the airline according the customer profile (frequent traveller) e.g. 500. It can be determined according the revenue realized by the airline for this customer.",
              "type": "string",
              "pattern": "[0-9]{1,4}",
              "example": "3"
            },
            "airOfferId": {
              "description": "Reference to the air-offer biased with the Frequent Flyer.  When this link is present, the Frequent Flyer card cannot be deleted separately from the offer. This link is created once the related air-offer is added to the cart  and cannot be updated in a PATCH process. Available for Miles & Cash only.",
              "type": "string"
            }
          }
        }
      ],
      "x-api-ref": "FrequentFlyerCard"
    },
    "FrequentFlyerCardReply": {
      "type": "object",
      "description": "Reply containing a frequent flyer card element",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/FrequentFlyerCard"
            }
          }
        }
      ],
      "x-api-ref": "FrequentFlyerCardReply"
    },
    "FrequentFlyerCardRequest": {
      "type": "object",
      "description": "Frequent flyer card to be added to an Order. Only one type of usage per request is allowed either: - miles accrual (SSR FQTV) - servicing (SSR FQTS) - owner to mark the owner of the Order (SSR FQTO). Therefore:\n  - To specify several usages for a same card, a different request must be triggered\n  - By choosing the usage 'owner', no traveler association is possible.",
      "properties": {
        "frequentFlyerCard": {
          "$ref": "#/definitions/FrequentFlyerCard"
        },
        "usage": {
          "description": "Usage of the card",
          "type": "string",
          "enum": [
            "milesAccrual",
            "servicing",
            "owner"
          ],
          "default": "milesAccrual"
        },
        "flightIds": {
          "type": "array",
          "description": "A list of flights associated to this frequent flyer card request. If not specified, the request is created without flight association for specified airline or all airlines of the itinerary.",
          "items": {
            "type": "string",
            "pattern": "[a-zA-Z0-9-]{1,20}"
          }
        },
        "airlineCodes": {
          "type": "array",
          "description": "Two letter airline codes defined for the frequent flyer request. IATA airline code (http://www.iata.org/publications/Pages/code-search.aspx). If not specified, the request applies to all airlines of the itinerary.",
          "items": {
            "type": "string",
            "pattern": "[A-Z0-9]{2}[A-Z]*"
          }
        }
      },
      "x-api-ref": "FrequentFlyerCardRequest"
    },
    "FrequentFlyerCardRequestReply": {
      "type": "object",
      "description": "Reply containing a frequent flyer card element and its associated service requests.",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/FrequentFlyerCardRequestReplyData"
            }
          }
        }
      ],
      "x-api-ref": "FrequentFlyerCardRequestReply"
    },
    "FrequentFlyerCardRequestReplyData": {
      "type": "object",
      "description": "Reply data containing a frequent flyer card element and the associated service requests",
      "properties": {
        "frequentFlyerCard": {
          "$ref": "#/definitions/FrequentFlyerCard"
        },
        "serviceRequests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SpecialServiceRequest"
          }
        }
      },
      "x-api-ref": "FrequentFlyerCardRequestReplyData"
    },
    "FrequentFlyerCardRequestsListReply": {
      "type": "object",
      "description": "Reply containing a list of frequent flyer cards and their associated service requests.",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FrequentFlyerCardRequestReplyData"
              }
            }
          }
        }
      ],
      "x-api-ref": "FrequentFlyerCardRequestsListReply"
    },
    "FrequentFlyerCardsListReply": {
      "type": "object",
      "description": "Reply containing a list of frequent flyer cards",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FrequentFlyerCard"
              }
            }
          }
        }
      ],
      "x-api-ref": "FrequentFlyerCardsListReply"
    },
    "FrequentFlyerEnrollmentRequest": {
      "type": "object",
      "description": "Detail used to enroll a customer to a company frequent flyer program.",
      "required": [
        "companyCode"
      ],
      "properties": {
        "companyCode": {
          "description": "Code of the company emitting the card",
          "type": "string",
          "pattern": "[A-Z0-9]{2,3}",
          "example": "6X"
        },
        "email": {
          "description": "The email to which the loyalty program will send the information to complete the enrollment",
          "type": "string",
          "pattern": "[a-zA-Z0-9_@-]{1,70}"
        },
        "languageCode": {
          "description": "Code of the preferred language to be used, e.g. en-GB for English-United Kingdom.\n",
          "type": "string",
          "default": "en-GB",
          "pattern": "[a-zA-Z0-9-]{2,5}"
        }
      },
      "x-api-ref": "FrequentFlyerEnrollmentRequest"
    },
    "FrequentFlyerJourneyRequest": {
      "type": "object",
      "description": "Frequent flyer card that can be used to accrue or redeem miles (only mileage accrual supported so far)",
      "allOf": [
        {
          "$ref": "#/definitions/ItemCommon"
        },
        {
          "type": "object",
          "required": [
            "companyCode",
            "cardNumber"
          ],
          "properties": {
            "tid": {
              "description": "Temporary id that can be used to associate requested and returned frequent flyer cards. Valid only for the time of the transaction.",
              "type": "string",
              "pattern": "[a-zA-Z0-9_]{1,20}"
            },
            "companyCode": {
              "description": "Code of the company emitting the card",
              "type": "string",
              "pattern": "[A-Z0-9]{2,3}",
              "example": "6X"
            },
            "cardNumber": {
              "description": "Card number",
              "type": "string",
              "pattern": "[a-zA-Z0-9]{2,20}",
              "example": "992003172079000",
              "x-risk-personal-data-field": "FREQUENT_FLYER_NUMBER"
            },
            "travelerId": {
              "description": "Id of the traveler, if present in the cart / order",
              "type": "string",
              "pattern": "[a-zA-Z0-9-]{1,20}"
            },
            "travelerTId": {
              "description": "It can be used when both the frequent flyer and its associated traveler are added simultanuously",
              "type": "string",
              "pattern": "[a-zA-Z0-9_]{1,20}"
            },
            "tierLevel": {
              "description": "Frequent flyer card tier level code",
              "type": "string",
              "pattern": "[a-zA-Z0-9]{2,10}",
              "example": "GOLD"
            },
            "tierLevelName": {
              "description": "Frequent flyer card tier level description Eg: \"Platinum\"",
              "type": "string",
              "pattern": "[a-zA-Z0-9]{1,70}"
            },
            "priorityCode": {
              "description": "Frequent flyer priority code within the Loyalty system. Both tier level and priority codes are unique identifiers of a Frequent Flyer.",
              "type": "string",
              "pattern": "[0-9]{1,2}",
              "example": "3"
            },
            "allianceTierLevel": {
              "description": "Frequent flyer card alliance tier level code",
              "type": "string",
              "pattern": "[a-zA-Z0-9]{2,10}"
            },
            "allianceTierLevelName": {
              "description": "Tier level description name. Eg: \"Platinum\"",
              "type": "string",
              "pattern": "[a-zA-Z0-9]{1,70}"
            },
            "alliancePriorityCode": {
              "description": "Frequent flyer alliance priority code within the Loyalty system.",
              "type": "string",
              "pattern": "[0-9]{1,2}",
              "example": "3"
            },
            "airlineCustomerValue": {
              "description": "Provide the customer value defined by the airline according the customer profile (frequent traveller) e.g. 500. It can be determined according the revenue realized by the airline for this customer.",
              "type": "string",
              "pattern": "[0-9]{1,4}",
              "example": "3"
            }
          }
        }
      ],
      "x-api-ref": "FrequentFlyerJourneyRequest"
    },
    "GeneralRemark": {
      "type": "object",
      "description": "Free text information added to an order (RM). These are visible to all DAPI users.\n",
      "allOf": [
        {
          "$ref": "#/definitions/Remark"
        },
        {
          "type": "object",
          "required": [
            "freetext"
          ],
          "properties": {
            "category": {
              "description": "Category of the remark e.g. RMA will be inserted in the order with the provided free text",
              "type": "string",
              "pattern": "[A-Z]"
            },
            "freetext": {
              "description": "Free text of the remark",
              "type": "string",
              "pattern": ".{1,126}",
              "x-risk-personal-data-field": "REMARKS"
            },
            "flightIds": {
              "type": "array",
              "description": "A list of flights associated to this Remark. If not specified, the remark applies to all flights",
              "items": {
                "type": "string",
                "pattern": "[a-zA-Z0-9-]{1,20}"
              }
            },
            "securities": {
              "type": "array",
              "description": "List of security credentials for the general remark.\nThose securities can be returned in the API output but are  not used when specified in input: it is not possible to assigned  some permnissions to GeneralRemark via the input.",
              "items": {
                "$ref": "#/definitions/Security"
              },
              "maxItems": 3
            }
          }
        }
      ],
      "x-api-ref": "GeneralRemark"
    },
    "GeoCode": {
      "type": "object",
      "description": "Geo code information",
      "properties": {
        "longitude": {
          "type": "number",
          "format": "double",
          "description": "Longitude of geographic location to search around.\nExample: 13.3835"
        },
        "latitude": {
          "type": "number",
          "format": "double",
          "description": "Latitude of geographic location to search around.\nExample: 52.5238"
        }
      },
      "x-api-ref": "GeoCode"
    },
    "GuaranteePolicy": {
      "description": "the guarantee policy information applicable to the rate plan for the requested period. It includes accepted payments, deadline and the amount due",
      "type": "object",
      "properties": {
        "amount": {
          "$ref": "#/definitions/Amount"
        },
        "deadline": {
          "type": "string",
          "format": "date-time",
          "description": "Represents the deadline's date and time in ISO 8601[https://www.w3.org/TR/NOTE-datetime]. \n Example: 2010-08-14T13:00:00\n Please note that this value is expressed in the hotel local time zone\n"
        },
        "description": {
          "$ref": "#/definitions/TextWithLanguageType"
        },
        "acceptedPayments": {
          "$ref": "#/definitions/HotelPaymentPolicy"
        }
      },
      "x-api-ref": "GuaranteePolicy"
    },
    "Guests": {
      "title": "Guests",
      "type": "object",
      "properties": {
        "adults": {
          "description": "Number of adults.",
          "type": "integer"
        },
        "childAges": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "Comma separated list of ages of each child. If 2 children have the same age, it will be repeated here."
        }
      },
      "x-api-ref": "Guests"
    },
    "Hotel": {
      "title": "Hotel",
      "description": "details for the requested hotel",
      "type": "object",
      "properties": {
        "type": {
          "description": "The type of this data object (hotel by default)",
          "type": "string",
          "default": "hotel"
        },
        "hotelId": {
          "description": "Amadeus hotel ID",
          "type": "string"
        },
        "providers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Provider"
          }
        },
        "brandCode": {
          "description": "The chain code of the physical hotel\nExample: XD is the chain code, but the physical hotel is RT (brand code)    \n",
          "type": "string",
          "pattern": "[A-Z0-9]{2}"
        },
        "dupeId": {
          "description": "Unique identifier of the physical hotel.\nOne physical hotel can be represented by different brands, each one having its own hotel ID.\nThis attribute allows a client application to group together hotels that are actually the same.\n",
          "type": "string"
        },
        "name": {
          "description": "Hotel name",
          "type": "string"
        },
        "rating": {
          "description": "Hotel rating (1-5)",
          "type": "string",
          "pattern": "[1-5]"
        },
        "description": {
          "$ref": "#/definitions/TextWithLanguageType"
        },
        "amenities": {
          "description": "List of amenities offered by this hotel",
          "type": "array",
          "items": {
            "type": "string",
            "description": "Amenity name\n PARKING\n SPA\n RESTAURANT\n"
          }
        },
        "media": {
          "type": "array",
          "description": "Hotel media",
          "items": {
            "$ref": "#/definitions/MediaUri"
          }
        },
        "cityCode": {
          "description": "The IATA city code associated to the hotel",
          "type": "string",
          "pattern": "[A-Z]{3}"
        },
        "latitude": {
          "description": "Hotel latitude (5 decimals)",
          "type": "number",
          "format": "double"
        },
        "longitude": {
          "description": "Hotel longitude (5 decimals)",
          "type": "number",
          "format": "double"
        },
        "hotelDistance": {
          "$ref": "#/definitions/HotelDistance"
        },
        "address": {
          "$ref": "#/definitions/Address"
        },
        "contact": {
          "$ref": "#/definitions/HotelContact"
        }
      },
      "x-api-ref": "Hotel"
    },
    "HotelContact": {
      "description": "the contact details of the hotel",
      "properties": {
        "phone": {
          "type": "string",
          "description": "Phone number of the hotel",
          "example": "+33679278416",
          "x-risk-personal-data-field": "PHONE_NUMBER"
        },
        "fax": {
          "type": "string",
          "description": "Fax number of the hotel",
          "example": "+33679278417",
          "x-risk-personal-data-field": "PHONE_NUMBER"
        },
        "email": {
          "type": "string",
          "format": "email",
          "description": "Email Address",
          "minLength": 3,
          "maxLength": 90,
          "example": "hotel@brand.com",
          "x-risk-personal-data-field": "EMAIL_ADDRESS"
        }
      },
      "x-api-ref": "HotelContact"
    },
    "HotelDictionary": {
      "type": "object",
      "properties": {
        "hotelDetails": {
          "type": "object",
          "description": "Hotel details corresponding to a hotel id.",
          "additionalProperties": {
            "$ref": "#/definitions/Hotel"
          }
        },
        "currencyDictionary": {
          "description": "- Used to convey the number of decimal places of the amounts retuned by a hotel\n- Used to convey rate conversions in case the requested currency differs from the currency returned by a hotel\n- target_amount = rate x origin_amount\n- Example:\n        currencyDictionary: {\n          USD: {\n                decimalPlaces: 2,\n                conversionRates: [\n                      {\n                      \"rate\": \"0.8762838000000001\",\n                      \"target\": \"EUR\",\n                      \"targetDecimalPlaces\": 2\n                      },\n          GBP: {\n                decimalPlaces: 2,\n                conversionRates: [\n                      {\n                      \"rate\": \"1.3107280000000001\",\n                      \"target\": \"EUR\",\n                      \"targetDecimalPlaces\": 2\n            }\n        }        \n",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/CurrencyDictionaryItem"
          }
        },
        "country": {
          "type": "object",
          "description": "Countries map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "x-api-ref": "HotelDictionary"
    },
    "HotelDistance": {
      "description": "distance from the point of search",
      "properties": {
        "distance": {
          "type": "number",
          "format": "double",
          "description": "distance"
        },
        "distanceUnit": {
          "type": "string",
          "description": "unit of measure"
        }
      },
      "x-api-ref": "HotelDistance"
    },
    "HotelOffer": {
      "title": "HotelOffer",
      "description": "details of the requested offer",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/HotelOfferCommon"
        },
        {
          "type": "object",
          "required": [
            "id"
          ],
          "properties": {
            "type": {
              "description": "The type of this data object (offer by default).",
              "type": "string",
              "default": "offer"
            },
            "id": {
              "description": "Unique identifier of this offer. Might be valid for a temporary period only.",
              "type": "string"
            },
            "self": {
              "description": "a self link to the object",
              "type": "string",
              "format": "uri"
            }
          }
        }
      ],
      "x-api-ref": "HotelOffer"
    },
    "HotelOfferCommon": {
      "title": "HotelOfferCommon",
      "description": "details of the requested offer",
      "type": "object",
      "properties": {
        "hotelId": {
          "type": "string",
          "description": "The id of the associated hotel",
          "x-dictionary-name": "hotelDetails",
          "x-field-name": "hotelDetails",
          "x-field-type": "Hotel"
        },
        "checkInDate": {
          "type": "string",
          "format": "date",
          "example": "2020-12-30",
          "description": "check-in date of the stay (hotel local date). Format YYYY-MM-DD\n\nThe lowest accepted value is today date (no dates in the past).  \n"
        },
        "checkOutDate": {
          "type": "string",
          "format": "date",
          "example": "2020-12-31",
          "description": "check-out date of the stay (hotel local date). Format YYYY-MM-DD\nThe lowest accepted value is `checkInDate`+1.         \n"
        },
        "roomQuantity": {
          "description": "Number of rooms requested.",
          "type": "integer"
        },
        "bookingCode": {
          "description": "Identifies the offer during the booking, to be used in addition of invBlockCode and rateCode.",
          "type": "string"
        },
        "invBlockCode": {
          "description": "Allotment reserved in the hotel CRS, to be used in addition of bookingCode and rateCode when booking the offer.",
          "type": "string"
        },
        "rateCode": {
          "description": "Amadeus Rate plan code identification, to be used in addition of bookingCode and invBlockCode when booking the offer.\nExamples:\n PRO (promotional rate)\n MIL (military rate)      \n",
          "type": "string",
          "pattern": "[A-Z0-9]{3}"
        },
        "rateName": {
          "type": "string",
          "description": "name of the rate, a summary of the rateCode description",
          "example": "BED-BREAKFAST AND WIFI"
        },
        "rateFamilyEstimated": {
          "$ref": "#/definitions/RateFamily"
        },
        "category": {
          "description": "Amadeus rate plan type identification\nExamples:\n ASSOCIATION\n FAMILY_PLAN\n",
          "type": "string"
        },
        "description": {
          "$ref": "#/definitions/TextWithLanguageType"
        },
        "commission": {
          "$ref": "#/definitions/Commission"
        },
        "boardType": {
          "description": "The included board type (meal)\nExamples:\n ALL_INCLUSIVE\n BREAKFAST\n",
          "type": "string"
        },
        "room": {
          "$ref": "#/definitions/RoomDetails"
        },
        "guests": {
          "$ref": "#/definitions/Guests"
        },
        "price": {
          "$ref": "#/definitions/HotelPrice"
        },
        "policies": {
          "$ref": "#/definitions/PolicyDetails"
        },
        "pointsAccrual": {
          "description": "Number of points a customer will get when booking an Hotel offer.\n",
          "$ref": "#/definitions/LoyaltyAward"
        }
      },
      "x-api-ref": "HotelOfferCommon"
    },
    "HotelOffers": {
      "title": "Hotel Offers",
      "description": "details for the requested hotel and the available offers",
      "type": "object",
      "properties": {
        "type": {
          "description": "the type of the object (offers)",
          "type": "string",
          "default": "offers"
        },
        "hotel": {
          "$ref": "#/definitions/Hotel"
        },
        "available": {
          "description": "availability status of this hotel-offers",
          "type": "boolean"
        },
        "offers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HotelOffer"
          }
        },
        "self": {
          "description": "a self link to the object",
          "type": "string",
          "format": "uri"
        }
      },
      "x-api-ref": "HotelOffers"
    },
    "HotelOffersFeatured": {
      "type": "object",
      "description": "Object containing the information related to a hotel offer and additional information exclusively related to teaser.",
      "allOf": [
        {
          "$ref": "#/definitions/HotelOffers"
        },
        {
          "type": "object",
          "properties": {
            "displayOrder": {
              "type": "integer",
              "description": "ordinal number of the best rate offer after ordering"
            }
          }
        }
      ],
      "x-api-ref": "HotelOffersFeatured"
    },
    "HotelOffersListReply": {
      "type": "object",
      "description": "A list of hotel offers in the cart",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HotelOffer"
              }
            },
            "dictionaries": {
              "$ref": "#/definitions/HotelDictionary"
            }
          }
        }
      ],
      "x-api-ref": "HotelOffersListReply"
    },
    "HotelOffersSelectionRequest": {
      "description": "Object used to specify a selection of an HotelOffer when using the entry point POST /carts/{cartId}/hotel-offers HotelOffersSelectionRequest is made of an HotelOfferId and an optional list of associated travelers. Note: traveler association (via travelerIds field) is not implemented (yet) when adding an Hotel offer into a Cart.\n",
      "type": "object",
      "required": [
        "hotelOfferId"
      ],
      "properties": {
        "hotelOfferId": {
          "type": "string",
          "description": "Id of the selected HotelOffer"
        },
        "travelerIds": {
          "type": "array",
          "items": {
            "description": "Travelers associated to the selected HotelOffer",
            "type": "string"
          },
          "maxItems": 1
        }
      },
      "x-api-ref": "HotelOffersSelectionRequest"
    },
    "HotelPaymentPolicy": {
      "type": "object",
      "description": "accepted payment methods, several type of form of payment are possible for a guarantee",
      "properties": {
        "creditCards": {
          "type": "array",
          "description": "Accepted Payment Card Types for the `method` CREDIT_CARD",
          "items": {
            "type": "string",
            "pattern": "^[A-Z]{2}$",
            "minLength": 2,
            "maxLength": 2,
            "example": "VI",
            "description": "card type (CA, VI, AX, DC...)\nExamples:\n  * CA - MasterCard (warning: use it instead of MC/IK/EC/MD/XS)\n  * VI - Visa\n  * AX - American Express\n  * DC - Diners Club\n  * AU - Carte Aurore\n  * CG - Cofinoga\n  * DS - Discover\n  * GK - Lufthansa GK Card\n  * JC - Japanese Credit Bureau\n  * TC - Torch Club\n  * TP - Universal Air Travel Card\n  * BC - Bank Card\n  * DL - Delta\n  * MA - Maestro\n  * UP - China UnionPay   \n"
          },
          "example": [
            "CA",
            "VI",
            "AX"
          ]
        },
        "methods": {
          "type": "array",
          "description": "Accepted Payment Methods",
          "items": {
            "type": "string",
            "example": "CREDIT_CARD",
            "enum": [
              "CREDIT_CARD",
              "AGENCY_ACCOUNT",
              "TRAVEL_AGENT_ID",
              "CORPORATE_ID",
              "HOTEL_GUEST_ID",
              "CHECK",
              "MISC_CHARGE_ORDER",
              "ADVANCE_DEPOSIT",
              "COMPANY_ADDRESS"
            ],
            "description": "The Payment Methods :\n * CREDIT_CARD (CC) - Payment Cards in `creditCards` are accepted\n * AGENCY_ACCOUNT - Agency Account (Credit Line) is accepted. Agency is Charged at CheckOut\n * TRAVEL_AGENT_ID - Agency IATA/ARC Number is accepted to Guarantee the booking\n * CORPORATE_ID (COR-ID) - Corporate Account is accepted to Guarantee the booking\n * HOTEL_GUEST_ID - Hotel Chain Rewards Card Number is accepted to Guarantee the booking\n * CHECK - Checks are accepted\n * MISC_CHARGE_ORDER - Miscellaneous Charge Order is accepted\n * ADVANCE_DEPOSIT - Cash is accepted for Deposit/PrePay\n * COMPANY_ADDRESS - Company Billing Address is accepted to Guarantee the booking"
          }
        }
      },
      "x-api-ref": "HotelPaymentPolicy"
    },
    "HotelPrice": {
      "type": "object",
      "description": "price valuation information",
      "properties": {
        "oldTotal": {
          "description": "Total amount after taxes returned by provider",
          "$ref": "#/definitions/Amount"
        },
        "total": {
          "description": "Total amount after taxes",
          "$ref": "#/definitions/Amount"
        },
        "base": {
          "description": "Total amount before taxes",
          "$ref": "#/definitions/Amount"
        },
        "taxes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HotelTax"
          }
        },
        "variations": {
          "description": "some prices may vary during a stay. It shows the rate changes during the stay and the average daily rate",
          "$ref": "#/definitions/PriceVariations"
        },
        "discount": {
          "description": "Details about the discount when it is applied.",
          "$ref": "#/definitions/Discount"
        }
      },
      "x-api-ref": "HotelPrice"
    },
    "HotelRecommendation": {
      "type": "object",
      "description": "A hotel recommendation exposes a list of hotel offers associated to the reference relevant criteria",
      "properties": {
        "relevantCriteria": {
          "$ref": "#/definitions/HotelRelevantCriteria"
        },
        "hotelOffers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HotelOffersFeatured"
          }
        }
      },
      "x-api-ref": "HotelRecommendation"
    },
    "HotelRelevantCriteria": {
      "type": "object",
      "description": "Set of search criteria applied to generate the recommendation, based on the AAM filing. These information can be re-used to search, in standalone mode, for hotel offers.",
      "required": [
        "locationCode",
        "checkInDate",
        "checkOutDate",
        "adults"
      ],
      "properties": {
        "locationCode": {
          "description": "Hotel location IATA code",
          "type": "string",
          "pattern": "[a-zA-Z]{3}"
        },
        "checkInDate": {
          "description": "Check-in date of the stay. Format YYYY-MM-DD.",
          "type": "string",
          "format": "date"
        },
        "checkOutDate": {
          "description": "Check-out date of the stay. Format YYYY-MM-DD.",
          "type": "string",
          "format": "date"
        },
        "quantity": {
          "description": "Number of rooms requested",
          "type": "integer"
        },
        "adults": {
          "description": "Number of adults per room.  if adults = 2 and quantity = 2, total number of adults is 4.",
          "type": "integer",
          "minimum": 1,
          "maximum": 9
        },
        "childAges": {
          "description": "List of ages of each child per room. If 2 children have the same age, it will be repeated here. if childAges contains 2 ages and quantity = 2, total number of children is 4.",
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "hotelName": {
          "description": "Name of the hotel",
          "type": "string"
        },
        "providers": {
          "description": "List of Amadeus hotel provider to filter the response by.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Provider"
          }
        },
        "brandCodes": {
          "description": "List of hotel brand codes to filter the response by. A brand code is used to identify the physical hotel supplier when the hotel is provided by an aggregator. For example, RT is the brand code of ACCOR Hotels.",
          "example": [
            "RT",
            "EM",
            "EH"
          ],
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^[A-Z0-9]{2}$"
          }
        },
        "orderBy": {
          "description": "Sorting order operator related to a hotel recommendation  that is used for displaying the list of hotel offers. priceAsc, to order hotel offers by price ascending; priceDesc, to order hotel offers by price descending; starRatingAsc, to order hotel offers by hotel star rating ascending; starRatingDesc, to order hotel offers by hotel star rating descending.",
          "type": "string",
          "enum": [
            "priceAsc",
            "priceDesc",
            "starRatingAsc",
            "starRatingDesc"
          ]
        },
        "radius": {
          "description": "Radius of the area to search.",
          "type": "integer"
        },
        "radiusUnit": {
          "description": "Radius unit.",
          "type": "string",
          "enum": [
            "km",
            "mile"
          ]
        },
        "ratings": {
          "description": "List of hotel star ratings to filter the response by.",
          "type": "array",
          "items": {
            "type": "integer",
            "enum": [
              5,
              4,
              3,
              2,
              1
            ]
          }
        },
        "maxPricePerNight": {
          "description": "Requested maximum price per night.",
          "$ref": "#/definitions/Amount"
        },
        "boardType": {
          "description": "Requested board type (meal).",
          "type": "string",
          "enum": [
            "ROOM_ONLY",
            "BREAKFAST",
            "HALF_BOARD",
            "FULL_BOARD",
            "ALL_INCLUSIVE"
          ]
        },
        "amenities": {
          "description": "List of hotel amenities to filter the search response by.",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "SWIMMING_POOL",
              "RESTAURANT",
              "SPA",
              "PARKING",
              "FITNESS_CENTER",
              "AIR_CONDITIONING",
              "AIRPORT_SHUTTLE",
              "PETS_ALLOWED",
              "BUSINESS_CENTER",
              "DISABLED_FACILITIES",
              "WIFI"
            ]
          }
        }
      },
      "x-api-ref": "HotelRelevantCriteria"
    },
    "HotelTax": {
      "type": "object",
      "title": "HotelTax",
      "properties": {
        "amount": {
          "$ref": "#/definitions/Amount"
        },
        "code": {
          "description": "The tax code which identifies the tax.\n  Examples:\n  1=BED_TAX\n  2=CITY_TAX\n",
          "type": "string"
        },
        "percentage": {
          "type": "string"
        },
        "included": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "pricingFrequency": {
          "description": "Specifies if the tax applies per stay or per night\n - PER_STAY\n - PER_NIGHT\n",
          "type": "string"
        },
        "pricingMode": {
          "description": "Specifies if the tax applies per occupant or per room\n - PER_OCCUPANT\n - PER_PRODUCT\n",
          "type": "string"
        }
      },
      "x-api-ref": "HotelTax"
    },
    "HttpPayload": {
      "type": "object",
      "description": "Payload of an extended link.\n",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the parameter to be sent"
        },
        "value": {
          "description": "Value of the parameter",
          "type": "string"
        }
      },
      "x-api-ref": "HttpPayload"
    },
    "HttpRequest": {
      "description": "HTTP request containing Url, HTTP method and payload",
      "allOf": [
        {
          "$ref": "#/definitions/Url"
        },
        {
          "type": "object",
          "properties": {
            "methods": {
              "description": "The list of methods that are available on the resource (selected among POST, PUT, PATCH, GET, DELETE)",
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "GET",
                  "POST",
                  "PUT",
                  "PATCH",
                  "DELETE"
                ]
              }
            },
            "payload": {
              "description": "Payload of the HTTP request",
              "type": "array",
              "items": {
                "$ref": "#/definitions/HttpPayload"
              }
            }
          }
        }
      ],
      "x-api-ref": "HttpRequest"
    },
    "IdentificationConfirmationNumber": {
      "type": "object",
      "description": "Identification using an airline record locator / booking confirmation number",
      "allOf": [
        {
          "$ref": "#/definitions/FormOfIdentificationDetail"
        },
        {
          "type": "object",
          "required": [
            "confirmationNumber"
          ],
          "properties": {
            "confirmationNumber": {
              "type": "string",
              "description": "Confirmation number / record locator",
              "x-risk-personal-data-field": "PNR_RECORD_LOCATOR"
            }
          }
        }
      ],
      "x-api-ref": "IdentificationConfirmationNumber"
    },
    "IdentificationFrequentFlyerCard": {
      "type": "object",
      "description": "Identification using a frequent flyer card",
      "allOf": [
        {
          "$ref": "#/definitions/FormOfIdentificationDetail"
        },
        {
          "type": "object",
          "required": [
            "frequentFlyerCard"
          ],
          "properties": {
            "frequentFlyerCard": {
              "$ref": "#/definitions/FrequentFlyerCard"
            }
          }
        }
      ],
      "x-api-ref": "IdentificationFrequentFlyerCard"
    },
    "IdentificationFromReference": {
      "type": "object",
      "description": "Identification using data coming from an existing resource referenced by its ID.",
      "allOf": [
        {
          "$ref": "#/definitions/FormOfIdentificationDetail"
        },
        {
          "type": "object",
          "properties": {
            "referenceId": {
              "type": "string",
              "description": "ID of the document / frequent flyer card to be used for FOID information / tid of the payment card in request,applicable only at the time of checkout.",
              "x-risk-personal-data-field": "FREQUENT_FLYER_NUMBER"
            }
          }
        }
      ],
      "x-api-ref": "IdentificationFromReference"
    },
    "IdentificationPaymentCard": {
      "type": "object",
      "description": "Identification using a payment card",
      "allOf": [
        {
          "$ref": "#/definitions/FormOfIdentificationDetail"
        },
        {
          "type": "object",
          "required": [
            "paymentCard"
          ],
          "properties": {
            "paymentCard": {
              "$ref": "#/definitions/PaymentCard"
            }
          }
        }
      ],
      "x-api-ref": "IdentificationPaymentCard"
    },
    "IdentificationRegulatoryDocuments": {
      "type": "object",
      "description": "Identification using identity/regulatory documents",
      "allOf": [
        {
          "$ref": "#/definitions/FormOfIdentificationDetail"
        },
        {
          "type": "object",
          "required": [
            "regulatoryDocumentList"
          ],
          "properties": {
            "regulatoryDocumentList": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RegulatoryFoidDocument"
              },
              "maxItems": 3
            }
          }
        }
      ],
      "x-api-ref": "IdentificationRegulatoryDocuments"
    },
    "IdentificationTicketNumber": {
      "type": "object",
      "description": "Identification using an airline ticket number",
      "allOf": [
        {
          "$ref": "#/definitions/FormOfIdentificationDetail"
        },
        {
          "type": "object",
          "required": [
            "ticketNumber"
          ],
          "properties": {
            "ticketNumber": {
              "type": "string",
              "description": "Airline ticket number",
              "x-risk-personal-data-field": "AIRLINE_TICKET_NUMBER"
            }
          }
        }
      ],
      "x-api-ref": "IdentificationTicketNumber"
    },
    "Image": {
      "type": "object",
      "required": [
        "src"
      ],
      "properties": {
        "width": {
          "type": "integer",
          "description": "Image width expressed in pixels. This attribute is not guaranteed to be returned if the content is hosted in an external source (i.e. provider CDN). In case the content is coming from Amadeus Car Multimedia Solution, this value will be set, as well as the sizeCode.\n"
        },
        "height": {
          "type": "integer",
          "description": "Image height expressed in pixels This attribute is not guaranteed to be returned if the content is hosted in an external source (i.e. provider CDN). In case the content is coming from Amadeus Car Multimedia Solution, this value will be set, as well as the sizeCode.\n"
        },
        "sizeCode": {
          "type": "integer",
          "description": "Image size code following Amadeus Car Multimedia standards which defines a value range from 0 to 9. However, this attribute will not be returned if the content is in an external source (i.e. provider CDN).\n"
        },
        "src": {
          "type": "string",
          "description": "Image url"
        },
        "tags": {
          "type": "array",
          "description": "Tag(s) describring the image e.g. [GIF, PNG, SMALL, BIG, MEDIUM, SVG,... ] This content might be used in order to convey some information about the image, especially in those cases in which it is hosted in an external solution (i.e. provider CDN). This list is not guaranteed to be filled with values, so it should be taken as additional information.\n",
          "items": {
            "type": "string"
          }
        }
      },
      "x-api-ref": "Image"
    },
    "Individual": {
      "type": "object",
      "description": "Object used to define customers insights input for a search",
      "allOf": [
        {
          "$ref": "#/definitions/TravelerCommon"
        },
        {
          "$ref": "#/definitions/NameCommon"
        },
        {
          "type": "object",
          "properties": {
            "dateOfBirth": {
              "description": "Date of birth (date in ISO 8601: http://www.w3.org/TR/NOTE-datetime)\n",
              "type": "string",
              "format": "date",
              "example": "2002-07-25",
              "x-risk-personal-data-field": "DATE_OF_BIRTH"
            },
            "gender": {
              "description": "Gender of the individual (value 'unknown' to be used for undisclosed gender).\n",
              "type": "string",
              "enum": [
                "male",
                "female",
                "unspecified",
                "unknown"
              ],
              "x-risk-personal-data-field": "PASSENGER_TYPE"
            },
            "nationalityCountryCodes": {
              "type": "array",
              "description": "Individual's nationalities expressed as two letter country codes",
              "items": {
                "type": "string",
                "description": "ISO 3166-1 country code",
                "pattern": "[a-zA-Z0-9]{2}"
              },
              "x-risk-personal-data-field": "CITIZENSHIP"
            },
            "identityDocuments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RegulatoryApisDocument"
              }
            },
            "contacts": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Contact"
              }
            }
          }
        }
      ],
      "x-api-ref": "Individual"
    },
    "InstallmentPlanData": {
      "type": "object",
      "description": "Indicates the details of the payment using installments. For each installment plan,  following information is returned:       - Number of installments - Amount and currency for the first installment - Amount and currency for the next installments - Amount and currency of the interest (if applicable) Only available for PaymentCard.\n",
      "properties": {
        "numberOfInstallments": {
          "type": "number",
          "format": "integer",
          "description": "Number of installments in which the full amount of the payment is split.\n"
        },
        "amounts": {
          "type": "object",
          "description": "The total amount to be paid is the sum of the price of the \nbooking plus the interest (if applicable) due to the use of installments.\nThis total amount is split in a 'first' installment, and the remaining amount \nis then split in alicuote 'next' installments. The interest is already included in \nthe calculated installment amounts. It is also returned separately for \ninformation purposes.\n\nE.g. the price of one Order is 250 EUROS. The plan to pay in 3 installments has \nan interest of 5 EUROS. One example of the amounts returned would be:\n- first: 155 EUROS\n- next: 50 EUROS\n- interest: 5 EUROS\nThe 'first' installment includes 150 EUROS from the price of the Order plus the \n5 EUROS from the interest. The remaining 100 EUROS is split in two 'next' intallments \nof 50 EUROS.\n",
          "properties": {
            "first": {
              "description": "Amount and currency of the first installment.\n",
              "$ref": "#/definitions/Amount"
            },
            "next": {
              "description": "Amount and currency of the next installments after the first installment.\n",
              "$ref": "#/definitions/Amount"
            },
            "interest": {
              "description": "Amount and currency of the interest. It is already included  in all the installments plan.\n",
              "$ref": "#/definitions/Amount"
            }
          }
        }
      },
      "x-api-ref": "InstallmentPlanData"
    },
    "InsuranceCommon": {
      "type": "object",
      "required": [
        "insuranceProviderCode",
        "countryCode",
        "product",
        "prices"
      ],
      "properties": {
        "insuranceProviderCode": {
          "type": "string",
          "example": "TGC",
          "description": "the insurance provider code",
          "maxLength": 3,
          "x-dictionary-name": "insuranceProvider",
          "x-field-name": "insuranceProvider",
          "x-field-type": "InsuranceProviderDictionaryItem"
        },
        "countryCode": {
          "type": "string",
          "example": "GB",
          "description": "ISO 3166-1 country code",
          "pattern": "[a-zA-Z0-9]{2}"
        },
        "product": {
          "$ref": "#/definitions/InsuranceProductDescription",
          "description": "The code and the name of the product"
        },
        "extension": {
          "$ref": "#/definitions/InsuranceProductDescription",
          "description": "The code and the name of the product extension (if existing)"
        },
        "prices": {
          "$ref": "#/definitions/InsurancePricingRecords",
          "description": "Price details associated to the insurance offer"
        }
      },
      "x-api-ref": "InsuranceCommon"
    },
    "InsuranceDetail": {
      "type": "object",
      "description": "Text or URL based information associated to the insurance offer",
      "properties": {
        "type": {
          "type": "string",
          "description": "the information type",
          "enum": [
            "text",
            "url"
          ],
          "example": "url"
        },
        "description": {
          "type": "string",
          "description": "the information content",
          "maxLength": 256,
          "example": "https://www.myInsurance.com/Terms&Conditions"
        },
        "lang": {
          "type": "string",
          "description": "the language code used in the content",
          "maxLength": 3,
          "example": "EN"
        }
      },
      "x-api-ref": "InsuranceDetail"
    },
    "InsuranceDetails": {
      "type": "object",
      "description": "Object gather list of all data related to the provider or product. It can be text or urls. Aim is to provide image and description of the product.",
      "properties": {
        "logo": {
          "description": "A list of text or URL based information associated to the insurance offer",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InsuranceDetail"
          }
        },
        "information": {
          "description": "A list of text or URL based information associated to the insurance offer",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InsuranceDetail"
          }
        },
        "images": {
          "description": "A list of text or URL based information associated to the insurance offer",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InsuranceDetail"
          }
        },
        "marketingText": {
          "description": "A list of text or URL based information associated to the insurance offer",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InsuranceDetail"
          }
        },
        "privacyPolicy": {
          "description": "A list of text or URL based information associated to the insurance offer",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InsuranceDetail"
          }
        },
        "declaration": {
          "description": "A list of text or URL based information associated to the insurance offer",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InsuranceDetail"
          }
        },
        "termsAndConditions": {
          "description": "A list of text or URL based information associated to the insurance offer",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InsuranceDetail"
          }
        },
        "disclosure": {
          "description": "A list of text or URL based information associated to the insurance offer",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InsuranceDetail"
          }
        },
        "disclaimer": {
          "description": "A list of text or URL based information associated to the insurance offer",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InsuranceDetail"
          }
        }
      },
      "x-api-ref": "InsuranceDetails"
    },
    "InsuranceDictionary": {
      "type": "object",
      "description": "The dictionary is used to store all common data repreated among insurance offers. It is made of the InsuranceDictionaryCommon and the monetary description.",
      "allOf": [
        {
          "$ref": "#/definitions/InsuranceDictionaryCommon"
        },
        {
          "type": "object",
          "properties": {
            "currency": {
              "type": "object",
              "description": "Currencies map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "$ref": "#/definitions/CurrencyDictionaryItem"
              }
            }
          }
        }
      ],
      "x-api-ref": "InsuranceDictionary"
    },
    "InsuranceDictionaryCommon": {
      "type": "object",
      "description": "The dictionary is used to store all common data repreated among insurance offers. It is made of the country description and the provider description.",
      "allOf": [
        {
          "$ref": "#/definitions/CountryDictionary"
        },
        {
          "type": "object",
          "properties": {
            "insuranceProvider": {
              "type": "object",
              "description": "Insurance Providers map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "$ref": "#/definitions/InsuranceProviderDictionaryItem"
              }
            }
          }
        }
      ],
      "x-api-ref": "InsuranceDictionaryCommon"
    },
    "InsuranceItem": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/InsuranceCommon"
        },
        {
          "type": "object",
          "required": [
            "id",
            "confirmationNumber",
            "statusCode"
          ],
          "properties": {
            "id": {
              "type": "string",
              "description": "Id to be used for the interaction with order"
            },
            "travelerIds": {
              "type": "array",
              "description": "List of traveler(s) associated to the insurance item. If not specified,the insurance applies to all travelers part of the order. This information is available only at Order retrieve operation (GET /purchase/orders/{orderId}).",
              "items": {
                "type": "string",
                "pattern": "[a-zA-Z0-9-]{1,20}"
              }
            },
            "confirmationNumber": {
              "type": "string",
              "description": "Confirmation number related to the insurance booking",
              "x-risk-personal-data-field": "INSURANCE_CONFIRMATION_NUMBER"
            },
            "statusCode": {
              "type": "string",
              "description": "Operational status. HK = confirmed, HL = waitlist, TK = schedule change confirmed, schedule change waitlist, UN = unable to confirm not operating, UC = unable to confirm, HX = have cancelled, NO = no action taken.",
              "x-dictionary-name": "bookingStatus",
              "x-field-name": "status",
              "x-field-type": "BookingStatusDictionaryItem"
            },
            "frequentFlyer": {
              "description": "Frequent flyer card on which the miles were credited after insurance booking. If no miles accrual has taken place then this field will not be returned.",
              "$ref": "#/definitions/FrequentFlyer"
            }
          }
        }
      ],
      "x-api-ref": "InsuranceItem"
    },
    "InsuranceItemRequest": {
      "type": "object",
      "required": [
        "insuranceOfferId"
      ],
      "properties": {
        "insuranceOfferId": {
          "type": "string",
          "description": "Id of the insurance"
        },
        "frequentFlyer": {
          "description": "Frequent flyer card to be used for miles accrual upon insurance booking",
          "$ref": "#/definitions/FrequentFlyer"
        }
      },
      "x-api-ref": "InsuranceItemRequest"
    },
    "InsuranceItemsListReply": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InsuranceItem"
              }
            },
            "dictionaries": {
              "$ref": "#/definitions/InsuranceOrderDictionary"
            }
          }
        }
      ],
      "x-api-ref": "InsuranceItemsListReply"
    },
    "InsuranceOffer": {
      "allOf": [
        {
          "$ref": "#/definitions/InsuranceCommon"
        },
        {
          "type": "object",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "string",
              "example": "TGC-STC-123456",
              "description": "The insuranceOfferId is the unique id refering to one offer. It contains all necessary information to make the correlation between the offer at shopping and booking time"
            },
            "details": {
              "$ref": "#/definitions/InsuranceDetails"
            }
          }
        }
      ],
      "x-api-ref": "InsuranceOffer"
    },
    "InsuranceOfferReply": {
      "type": "object",
      "description": "List of insurance offers corresponding to the search criteria",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data",
            "dictionaries"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/InsuranceOffer"
            },
            "dictionaries": {
              "$ref": "#/definitions/InsuranceDictionary"
            }
          }
        }
      ],
      "x-api-ref": "InsuranceOfferReply"
    },
    "InsuranceOffersReply": {
      "type": "object",
      "description": "List of insurance offers corresponding to the search criteria",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data",
            "dictionaries"
          ],
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InsuranceOffer"
              }
            },
            "dictionaries": {
              "$ref": "#/definitions/InsuranceDictionary"
            }
          }
        }
      ],
      "x-api-ref": "InsuranceOffersReply"
    },
    "InsuranceOrderDictionary": {
      "allOf": [
        {
          "$ref": "#/definitions/InsuranceDictionary"
        },
        {
          "type": "object",
          "properties": {
            "bookingStatus": {
              "type": "object",
              "description": "Status map for insurances. For more details please see [Maps in dictionary documentation] (https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "$ref": "#/definitions/BookingStatusDictionaryItem"
              }
            }
          }
        }
      ],
      "x-api-ref": "InsuranceOrderDictionary"
    },
    "InsurancePricingRecords": {
      "type": "object",
      "required": [
        "totalPrice"
      ],
      "description": "It stores the price for Insurance.",
      "properties": {
        "totalPrice": {
          "description": "Insurance total price for all passenger",
          "$ref": "#/definitions/Price"
        }
      },
      "x-api-ref": "InsurancePricingRecords"
    },
    "InsuranceProductDescription": {
      "description": "Describes the commercial product associated to an insurance offer.",
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "the insurance product or extension code",
          "pattern": "^[A-Za-z0-9]{1,4}$",
          "example": "STI1"
        },
        "name": {
          "type": "string",
          "description": "the insurance product or extension name",
          "example": "Travel Insurance single trip extension"
        }
      },
      "x-api-ref": "InsuranceProductDescription"
    },
    "InsuranceProviderDictionaryItem": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The provider full name",
          "example": "Travel Guard"
        },
        "details": {
          "$ref": "#/definitions/InsuranceDetails"
        }
      },
      "x-api-ref": "InsuranceProviderDictionaryItem"
    },
    "InsuranceRecommendation": {
      "type": "object",
      "description": "An insurance recommendation exposes some relevant criteria (actual search for insurance offers not supported yet)",
      "properties": {
        "relevantCriteria": {
          "$ref": "#/definitions/InsuranceRelevantCriteria"
        },
        "insuranceOffers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InsuranceOffer"
          }
        }
      },
      "x-api-ref": "InsuranceRecommendation"
    },
    "InsuranceRelevantCriteria": {
      "type": "object",
      "description": "Set of search criteria applied to generate the recommendation, based on the AAM filing. These information can be re-used to search, in standalone mode, for insurance offers.",
      "properties": {
        "providers": {
          "description": "List of Amadeus insurance providers to filter the response by.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Provider"
          }
        },
        "productCode": {
          "description": "Code of travel insurance product",
          "type": "string",
          "pattern": "[a-zA-Z0-9]{4}"
        }
      },
      "x-api-ref": "InsuranceRelevantCriteria"
    },
    "ItemCommon": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Identifier of the resource. not read / taken into account when creating a resource",
          "type": "string"
        }
      },
      "x-api-ref": "ItemCommon"
    },
    "ItemOccurrence": {
      "type": "object",
      "description": "This object contains the range of occurrence applying on the prices of an item Today this structure is available only for services for below entry points: - GET /v2/shopping/services/by-order - GET /v2/shopping/services/by-cart",
      "properties": {
        "min": {
          "type": "integer"
        },
        "max": {
          "type": "integer"
        }
      },
      "x-api-ref": "ItemOccurrence"
    },
    "ItemsAssociation": {
      "type": "object",
      "description": "Used to specify the flights, services and travelers an element is associated with. Allowed associations may depend on the type of element in use",
      "properties": {
        "flightIds": {
          "type": "array",
          "description": "Flight ids the element is associated with",
          "items": {
            "type": "string"
          }
        },
        "serviceIds": {
          "type": "array",
          "description": "Service ids the element is associated with",
          "items": {
            "type": "string"
          }
        },
        "travelerIds": {
          "type": "array",
          "description": "Traveler ids the element is associated with",
          "items": {
            "type": "string"
          }
        },
        "travelerTIds": {
          "type": "array",
          "description": "Temporary traveler ids the element is associated with",
          "items": {
            "type": "string"
          }
        },
        "insuranceIds": {
          "type": "array",
          "description": "Insurance ids the element is associated with",
          "items": {
            "type": "string"
          }
        },
        "hotelIds": {
          "type": "array",
          "description": "Hotel ids the element is associated with",
          "items": {
            "type": "string"
          }
        }
      },
      "x-api-ref": "ItemsAssociation"
    },
    "Itinerary": {
      "type": "object",
      "description": "Description of an itinerary subject of the search",
      "allOf": [
        {
          "$ref": "#/definitions/CommonItinerary"
        },
        {
          "type": "object",
          "properties": {
            "returnDateTime": {
              "type": "string",
              "description": "DEPRECATED Return date and time for the inbound (first return flight) in ISO 8601 [http://www.w3.org/TR/NOTE-datetime].\nIt specifies date and hours of the search (eg. 2017-11-10T10:21:00)\n",
              "format": "date-time"
            },
            "departureCommercialFareFamilies": {
              "type": "array",
              "description": "Commercial fare families to be used for outbound. Must be provided along with returnCommercialFareFamilies in case of RoundTrip. Must not be provided along with commercial fare families for the entire trip at itinerary level.\n",
              "items": {
                "type": "string",
                "pattern": "[a-zA-Z0-9 -]{1,35}"
              },
              "minItems": 1
            },
            "returnCommercialFareFamilies": {
              "type": "array",
              "description": "DEPRECATED Commercial fare families to be used for inbound. Must be provided along with departureCommercialFareFamilies in case of RoundTrip. Must not be provided along with commercialFareFamilies for the entire trip at itinerary level.\n",
              "items": {
                "type": "string",
                "pattern": "[a-zA-Z0-9 -]{1,35}"
              },
              "minItems": 1
            },
            "returnTimeWindow": {
              "type": "integer",
              "description": "DEPRECATED \"Time window for the return trip or continuation of an open-jaw. E.g: A returnTimeWindow=2 means from 2 hours before, until 2 hours after the return time. The value 0 is considered as there is no time window.\"\n",
              "minimum": 0,
              "maximum": 12
            },
            "departureStopOver": {
              "description": "Stop over for the outbound. It could be applied only for one-way or round trips",
              "$ref": "#/definitions/StopOver"
            },
            "returnStopOver": {
              "description": "DEPRECATED Stop over for the inbound in case of round trip",
              "$ref": "#/definitions/StopOver"
            },
            "tid": {
              "type": "integer",
              "description": "Temporary id used for as bound identifier for more flight research in complex itinerary Tid should be consecutive, no skip in tid value, meaning that if you have 3 bounds in your itinerary,  you should not have tid = 4",
              "minimum": 1,
              "maximum": 6
            }
          }
        }
      ],
      "x-api-ref": "Itinerary"
    },
    "ItinerarySearchRequest": {
      "title": "ItinerarySearchRequest",
      "allOf": [
        {
          "type": "object"
        },
        {
          "$ref": "#/definitions/CityPair"
        },
        {
          "type": "object",
          "required": [
            "flights"
          ],
          "properties": {
            "flights": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FlightSearchRequest"
              },
              "minItems": 1
            }
          }
        }
      ],
      "x-api-ref": "ItinerarySearchRequest"
    },
    "ItineraryViewMetrics": {
      "type": "object",
      "description": "ItineraryViewMetrics contains the information about number of people watching for a bound  (identified by originalLocationCode, destinationLocationCode and departureDateTime)\n",
      "allOf": [
        {
          "$ref": "#/definitions/ViewMetrics"
        },
        {
          "type": "object",
          "properties": {
            "originLocationCode": {
              "description": "Departure location (airport code) of the bound",
              "type": "string",
              "pattern": "[a-zA-Z]{3}",
              "x-dictionary-name": "location",
              "x-field-name": "originLocation",
              "x-field-type": "LocationDictionaryItem"
            },
            "destinationLocationCode": {
              "description": "Arrival location (airport code) of the bound",
              "type": "string",
              "pattern": "[a-zA-Z]{3}",
              "x-dictionary-name": "location",
              "x-field-name": "destinationLocation",
              "x-field-type": "LocationDictionaryItem"
            },
            "departureDateTime": {
              "description": "Departure Date and time of the bound",
              "type": "string",
              "format": "date-time",
              "example": "2021-02-10T20:40:00+02:00"
            }
          }
        }
      ],
      "x-api-ref": "ItineraryViewMetrics"
    },
    "Journey": {
      "type": "object",
      "description": "Collection of travelers on flights, grouped so as to form a logical journey for one or more passengers on one or more flights.\nE.g. NCE->LHR direct for pax A (single traveler on flight, standalone), or NCE->LHR->DFW for pax A and B (4 travelers on flights, outbound) + DFW->LHR->NCE A and B (4 travelers on flights, inbound).\"\n",
      "required": [
        "id",
        "type",
        "flights",
        "travelers",
        "journeyElements",
        "acceptanceEligibility",
        "acceptance"
      ],
      "properties": {
        "id": {
          "description": "Journey unique identifier",
          "type": "string",
          "pattern": "[a-zA-Z0-9]{16}"
        },
        "type": {
          "description": "Type of journey. Outbound/Inbound is in case of return journey detection.",
          "type": "string",
          "enum": [
            "standalone",
            "outbound",
            "inbound"
          ]
        },
        "checkinSystem": {
          "$ref": "#/definitions/CheckinSystem"
        },
        "linkedJourneyIds": {
          "description": "The journeys linked to this journey: outbound if inbound and vice-versa.",
          "type": "array",
          "items": {
            "description": "Id of the linked journey",
            "type": "string",
            "pattern": "[a-zA-Z0-9]{16}"
          }
        },
        "flights": {
          "type": "array",
          "description": "Ordered list of flights in this journey.",
          "items": {
            "$ref": "#/definitions/CheckInFlightIdObject"
          }
        },
        "travelers": {
          "type": "array",
          "description": "List of traveler (passengers to check-in) in this journey.",
          "items": {
            "$ref": "#/definitions/JourneyTraveler"
          }
        },
        "journeyElements": {
          "type": "array",
          "description": "List of journey elements in this journey.",
          "items": {
            "$ref": "#/definitions/JourneyElementCommon"
          }
        },
        "services": {
          "type": "array",
          "description": "List of services (e.g. in flight entertainment, meals...)",
          "items": {
            "$ref": "#/definitions/ServiceItem"
          }
        },
        "baggages": {
          "type": "array",
          "description": "List of baggages registered on this journey",
          "items": {
            "$ref": "#/definitions/Baggage"
          }
        },
        "acceptanceEligibility": {
          "$ref": "#/definitions/Eligibility"
        },
        "acceptance": {
          "$ref": "#/definitions/Acceptance"
        },
        "contacts": {
          "type": "array",
          "description": "Emails, phone numbers and addresses",
          "items": {
            "$ref": "#/definitions/Contact"
          }
        },
        "isGroupBooking": {
          "type": "boolean",
          "default": false,
          "description": "This field describes whether this journey should be considered a group booking. The conditions for this are configured in Altea DCS Self-Service Check-In backend. User interfaces will often behave differently for group bookings.\n"
        },
        "deeplinkRedirectionUrl": {
          "description": "Redirection URL to bring users to partner (operating) airline's application for check-in.\n",
          "type": "string"
        },
        "disruption": {
          "description": "Disruption information related to the Journey.",
          "$ref": "#/definitions/JourneyDisruption"
        }
      },
      "x-api-ref": "Journey"
    },
    "JourneyAlternativeFlightOffer": {
      "type": "object",
      "description": "Alternative flight offer for this journey",
      "required": [
        "id",
        "flights"
      ],
      "properties": {
        "id": {
          "description": "Identifier of this offer",
          "type": "string"
        },
        "offerType": {
          "description": "Describes the type of alternative offer retrieved Type standbyEarly can only be applied after acceptance, by using POST /journey/{journeyId}/payment-records Type sameDayChange can be applied before or after acceptance, by using POST /journey/{journeyId}/payment-records",
          "type": "string",
          "enum": [
            "standbyEarly",
            "sameDayChange"
          ]
        },
        "prices": {
          "description": "Price of this offer. There may be multiple amounts involved, e.g. miles + cash",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Amount"
          }
        },
        "originalFlights": {
          "type": "array",
          "description": "Ordered list of the original flights that would be replaced.",
          "items": {
            "$ref": "#/definitions/CheckInFlightIdObject"
          }
        },
        "flights": {
          "type": "array",
          "description": "Ordered list of new flights in this alternative offer.",
          "items": {
            "$ref": "#/definitions/CheckInFlightIdObject"
          }
        }
      },
      "x-api-ref": "JourneyAlternativeFlightOffer"
    },
    "JourneyAlternativeFlightOffersDictionary": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CheckInFlightDictionary"
        },
        {
          "type": "object",
          "properties": {
            "currency": {
              "type": "object",
              "description": "Currencies map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "$ref": "#/definitions/CurrencyDictionaryItem"
              }
            }
          }
        }
      ],
      "x-api-ref": "JourneyAlternativeFlightOffersDictionary"
    },
    "JourneyAlternativeFlightOffersReply": {
      "type": "object",
      "description": "Reply containing alternative flight options for this journey",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/JourneyAlternativeFlightOffer"
              }
            },
            "dictionaries": {
              "$ref": "#/definitions/JourneyAlternativeFlightOffersDictionary"
            }
          }
        }
      ],
      "x-api-ref": "JourneyAlternativeFlightOffersReply"
    },
    "JourneyBaggageDictionary": {
      "properties": {
        "traveler": {
          "type": "object",
          "description": "Traveler information corresponding to a traveler id.",
          "additionalProperties": {
            "$ref": "#/definitions/JourneyTraveler"
          }
        }
      },
      "x-api-ref": "JourneyBaggageDictionary"
    },
    "JourneyBaggageRequest": {
      "type": "object",
      "required": [
        "travelerId"
      ],
      "description": "Object used when adding baggages to a journey",
      "properties": {
        "travelerId": {
          "description": "Id of the traveler to add the baggages to",
          "type": "string"
        },
        "quantity": {
          "description": "Quantity of baggages to add",
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "type": {
          "description": "In case of special baggage, the type to add as filed by the airline and returned by the baggage policies.",
          "type": "string"
        }
      },
      "x-api-ref": "JourneyBaggageRequest"
    },
    "JourneyBaggagesReply": {
      "type": "object",
      "description": "Reply containing the list of baggages registered in a journey including their current status and 'bagtag number'",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Baggage"
              }
            },
            "dictionaries": {
              "$ref": "#/definitions/JourneyBaggageDictionary"
            }
          }
        }
      ],
      "x-api-ref": "JourneyBaggagesReply"
    },
    "JourneyDictionary": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/JourneyElementDictionary"
        },
        {
          "type": "object",
          "properties": {
            "journeyElement": {
              "type": "object",
              "description": "JourneyElement information corresponding to a journeyElement id.",
              "additionalProperties": {
                "$ref": "#/definitions/JourneyElement"
              }
            }
          }
        }
      ],
      "x-api-ref": "JourneyDictionary"
    },
    "JourneyDisruption": {
      "type": "object",
      "required": [
        "status",
        "disruptedFlightIds"
      ],
      "description": "Contains Disruption information related to the Journey.",
      "properties": {
        "status": {
          "description": "Status of disruption.",
          "type": "string",
          "enum": [
            "isDisrupted",
            "wasDisrupted"
          ]
        },
        "reBookingLink": {
          "type": "object",
          "description": "Http request containing the url to the Self Reaccommodation application.\n",
          "$ref": "#/definitions/HttpRequest"
        },
        "disruptedFlightIds": {
          "type": "array",
          "description": "Flight identifier of the disrupted flight, as defined in flights dictionary",
          "x-dictionary-name": "flight",
          "x-field-name": "flight",
          "x-field-type": "CheckInFlight",
          "pattern": "[a-zA-Z0-9]{1,20}",
          "items": {
            "type": "string"
          }
        }
      },
      "x-api-ref": "JourneyDisruption"
    },
    "JourneyElement": {
      "type": "object",
      "description": "Journey element (traveler on a flight) details.",
      "required": [
        "id",
        "travelerId",
        "flightId",
        "acceptanceEligibility",
        "boardingPassEligibility",
        "checkInStatus"
      ],
      "properties": {
        "id": {
          "description": "Identifier of the journey element (traveler on a flight).",
          "type": "string",
          "pattern": "[a-zA-Z0-9]{16}"
        },
        "travelerId": {
          "type": "string",
          "description": "Traveler Id",
          "pattern": "[a-zA-Z0-9-]{1,20}",
          "x-dictionary-name": "traveler",
          "x-field-name": "traveler",
          "x-field-type": "Traveler"
        },
        "flightId": {
          "type": "string",
          "description": "Flight id, as defined in flights dictionary.",
          "x-dictionary-name": "flight",
          "x-field-name": "flight",
          "x-field-type": "CheckInFlight",
          "pattern": "[a-zA-Z0-9]{1,20}"
        },
        "orderId": {
          "description": "Identifier of the order associated to this journey element",
          "type": "string",
          "pattern": "[a-zA-Z0-9]{6}",
          "x-risk-personal-data-field": "PNR_RECORD_LOCATOR"
        },
        "cabin": {
          "description": "Cabin of the passenger, in single letter format e.g. \"Y\". If a seat is assigned, identical to the cabin defined on the seat",
          "type": "string"
        },
        "seat": {
          "$ref": "#/definitions/SeatmapSeatProperties"
        },
        "acceptanceEligibility": {
          "$ref": "#/definitions/Eligibility"
        },
        "checkInStatus": {
          "type": "string",
          "description": "Check-in status of the traveler on the flight",
          "enum": [
            "accepted",
            "standBy",
            "notAccepted",
            "rejected"
          ]
        },
        "acceptance": {
          "$ref": "#/definitions/JourneyElementAcceptance"
        },
        "boardingPassEligibility": {
          "$ref": "#/definitions/BoardingPassEligibility"
        },
        "seatmapEligibility": {
          "$ref": "#/definitions/SeatmapEligibility"
        },
        "boardingPass": {
          "$ref": "#/definitions/BoardingPass"
        },
        "boardingPassPrintStatus": {
          "type": "string",
          "description": "Boarding Pass printing status. A needPrinting status means that the boarding pass was printed but need to be printed again because some information changed (seat, class...).\n",
          "enum": [
            "notPrinted",
            "printed",
            "needPrinting"
          ]
        },
        "frequentFlyerCard": {
          "$ref": "#/definitions/FrequentFlyerCard"
        },
        "boardingStatus": {
          "description": "Indicate if the traveler has boarded his flight. If the flight is outside the Departure Control System window (long before or after departure date), boarding status might be unknown.\n",
          "type": "string",
          "enum": [
            "notBoarded",
            "boarded",
            "unknown"
          ]
        },
        "bookingStatusCode": {
          "type": "string",
          "description": "Operational status. HK = confirmed, HL = waitlist, TK = schedule change confirmed, schedule change waitlist, UN = unable to confirm not operating, UC = unable to confirm, HX = have cancelled, NO = no action taken."
        },
        "exitSeatSuitability": {
          "type": "string",
          "description": "Exit seat suitability. UnableToDetermine suitability will trigger a warning at next touchpoint with an agent in order for him to check the suitability. If suitability is set to notSuitable, the traveler should not be assigned an exit seat.\n",
          "enum": [
            "suitable",
            "notSuitable",
            "unableToDetermine"
          ]
        },
        "linkedJourneyElementIds": {
          "description": "The journey elements linked to this journey. In case of standby early, the standby journey element will contain this link to the ID of the confirmed journey element, and vice versa.",
          "type": "array",
          "items": {
            "description": "Id of the linked journey element",
            "type": "string"
          }
        },
        "isStandbyEarly": {
          "type": "boolean",
          "default": false,
          "description": "Indicates whether this journey element is a standby early transfer journey element or not. A standby early journey element is created and added to the Journey when a standby early transfer request is done. It is always linked to the confirmed journey element."
        }
      },
      "x-api-ref": "JourneyElement"
    },
    "JourneyElementAcceptance": {
      "type": "object",
      "description": "Acceptance/Check-in data related to the journey element.",
      "allOf": [
        {
          "$ref": "#/definitions/CheckinChannel"
        },
        {
          "type": "object"
        }
      ],
      "x-api-ref": "JourneyElementAcceptance"
    },
    "JourneyElementCommon": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "JourneyElement id, as defined in JourneyElement dictionary",
          "x-dictionary-name": "journeyElement",
          "x-field-name": "journeyElement",
          "x-field-type": "JourneyElement"
        }
      },
      "x-api-ref": "JourneyElementCommon"
    },
    "JourneyElementDictionary": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CheckInFlightDictionary"
        },
        {
          "type": "object",
          "properties": {
            "traveler": {
              "type": "object",
              "description": "Traveler information corresponding to a traveler id.",
              "additionalProperties": {
                "$ref": "#/definitions/JourneyTraveler"
              }
            }
          }
        }
      ],
      "x-api-ref": "JourneyElementDictionary"
    },
    "JourneyElementReply": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/JourneyElement"
            },
            "dictionaries": {
              "$ref": "#/definitions/JourneyElementDictionary"
            }
          }
        }
      ],
      "x-api-ref": "JourneyElementReply"
    },
    "JourneyElementSeatData": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/SeatmapSeatProperties"
        },
        {
          "type": "object",
          "required": [
            "isExitSuitabilityRequired",
            "journeyElementId"
          ],
          "properties": {
            "isExitSuitabilityRequired": {
              "description": "Indicate if the traveler must anwer exit suitability questions to determine if he can take this seat. Suitability result of the question needs to be provided with service PATCH /checkin/jorney-elements/{journeyElementId}/\n",
              "type": "boolean"
            },
            "journeyElementId": {
              "description": "Id of the JourneyElement the seat is associated to.",
              "type": "string"
            },
            "previousSeat": {
              "description": "Seat that was previously assigned to the traveler. This could help identifying a change from another device or performed by an agent.",
              "$ref": "#/definitions/SeatmapSeatProperties"
            }
          }
        }
      ],
      "x-api-ref": "JourneyElementSeatData"
    },
    "JourneyElementSeatReply": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/JourneyElementSeatData"
            }
          }
        }
      ],
      "x-api-ref": "JourneyElementSeatReply"
    },
    "JourneyElementsListReply": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/JourneyElement"
              }
            },
            "dictionaries": {
              "$ref": "#/definitions/JourneyElementDictionary"
            }
          }
        }
      ],
      "x-api-ref": "JourneyElementsListReply"
    },
    "JourneyElementUpgrade": {
      "type": "object",
      "description": "An upgrade, either an option or already applied, for a journey element (one traveler on one flight).",
      "required": [
        "id",
        "journeyElementId",
        "upgradeType",
        "cabin"
      ],
      "properties": {
        "id": {
          "description": "ID of this upgrade offer.",
          "type": "string"
        },
        "journeyElementId": {
          "description": "ID of the relevant journey element",
          "type": "string"
        },
        "upgradeType": {
          "description": "Type of upgrade. Paid upgrade is a standard upgrade for monetary payment, miles upgrade uses airline miles (and possibly money as well), credits upgrade is for airlines that use other types of redemption credits (and possibly money as well).",
          "type": "string",
          "enum": [
            "paidUpgrade",
            "milesUpgrade",
            "creditsUpgrade"
          ]
        },
        "cabin": {
          "description": "Cabin offered by this upgrade",
          "type": "string"
        },
        "price": {
          "description": "Price of this upgrade. There may be multiple amounts involved,  e.g. upgrade in miles + taxes in monetary",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Amount"
          }
        }
      },
      "x-api-ref": "JourneyElementUpgrade"
    },
    "JourneyPaymentAuthorizationReply": {
      "type": "object",
      "description": "Reply containing the payment authorization data.\n",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "properties": {
            "data": {
              "$ref": "#/definitions/JourneyPaymentAuthorizationReplyData"
            }
          }
        }
      ],
      "x-api-ref": "JourneyPaymentAuthorizationReply"
    },
    "JourneyPaymentAuthorizationReplyData": {
      "type": "object",
      "description": "Data containing the payment authorization information. In the case of simple payment (no 3DS), only the status field and action are returned\n",
      "properties": {
        "status": {
          "description": "Indicates if the authorization was successful",
          "type": "string",
          "enum": [
            "ok",
            "ko",
            "pending3DSecure"
          ]
        },
        "paymentAction": {
          "description": "Action to be performed by the UI",
          "type": "string",
          "enum": [
            "confirm",
            "redirect",
            "error",
            "mopSelection"
          ]
        },
        "url": {
          "description": "URL of the 3DS page if needed",
          "type": "string"
        },
        "merchantData": {
          "description": "Merchant data, which will be posted back to the TermUrl at the end of the 3DS process",
          "type": "string"
        },
        "paymentAuthenticationRequest": {
          "description": "Zipped Base64-encoded data about the transaction, received from the Visa/Mastercard directory servers",
          "type": "string"
        },
        "termUrl": {
          "description": "URL the customer will be returned to at the end of the 3DS process",
          "type": "string"
        }
      },
      "x-api-ref": "JourneyPaymentAuthorizationReplyData"
    },
    "JourneyPaymentAuthorizationRequest": {
      "type": "object",
      "description": "Input needed to authorize payment.\n",
      "allOf": [
        {
          "$ref": "#/definitions/JourneyPaymentRequest"
        },
        {
          "type": "object",
          "properties": {
            "paymentAction": {
              "description": "Payment action to apply. If not passed will default to 'add'. 'add' to add a payment method to be authorized.\n",
              "type": "string",
              "enum": [
                "add"
              ]
            },
            "paymentMethod": {
              "description": "PaymentMethod used for this part of the payment. Today only paymentCard is supported The ID and TID fields are not needed\n",
              "$ref": "#/definitions/PaymentMethod"
            }
          }
        }
      ],
      "x-api-ref": "JourneyPaymentAuthorizationRequest"
    },
    "JourneyPaymentConfirmationRequest": {
      "type": "object",
      "description": "Input needed to confirm and finalize payment. For backwards compatiblity reasons, authorizationSuccessful is not mandatory. If not present, success true is assumed. For the Same Day Change flow, the email and language fields are needed when initially creating the payment request (JourneyPaymentRequest) For all other flows, the email and language fields are needed when confirming it (JourneyPaymentConfirmationRequest).\n",
      "allOf": [
        {
          "$ref": "#/definitions/JourneyPaymentRequest"
        },
        {
          "type": "object",
          "properties": {
            "authorizationSuccessful": {
              "type": "boolean",
              "description": "Was the authorization call successful, in which case finalization should be performed, or did it fail, in which case cleanup should be performed. This is informative of course, final verification is performed between backend and payment provider For backwards compatiblity reasons, this field is not mandatory. If not present, success true is assumed.\n"
            }
          }
        }
      ],
      "x-api-ref": "JourneyPaymentConfirmationRequest"
    },
    "JourneyPaymentRequest": {
      "type": "object",
      "description": "Input needed to request payment on a journey. If not given, a standard unpaid services payment will be performed. For the Same Day Change flow, the email and language fields are needed when initially creating the payment request (JourneyPaymentRequest) For all other flows, the email and language fields are needed when confirming it (JourneyPaymentConfirmationRequest).",
      "properties": {
        "paymentOperationType": {
          "description": "This defines what needs to be paid as part of this operation. If 'services' no additional input is needed (today all services are paid, filtering has not yet been implemented) If 'upgrade' the 'upgradeIds' array must be filled If 'sameDayChange' or 'standbyEarly', the 'alternativeOfferIds' array must be filled",
          "type": "string",
          "enum": [
            "services",
            "upgrade",
            "standbyEarly",
            "sameDayChange"
          ]
        },
        "upgradeIds": {
          "description": "List of IDs of individual upgrades that the customer has selected",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "seatItemIds": {
          "description": "List of IDs of individual chargeable seats that the customer has selected",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "baggageItemIds": {
          "description": "List of IDs of individual excess bags that the customer has selected",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "serviceItemIds": {
          "description": "List of IDs of individual services that the customer has selected",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "alternativeOfferIds": {
          "description": "List of IDs of alternative flight offer being applied.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "returnUrl": {
          "description": "In case of 3D Secure payment managed by Amadeus Payment Platform, the return URL to be called by APP upon validation of the one-time code",
          "type": "string"
        },
        "paymentRequests": {
          "type": "array",
          "description": "A list of payment request. Each payment request contains a payment method, and the amount to be paid using that method.\nThe API supports only payment with 1 PaymentCard today.\n",
          "items": {
            "$ref": "#/definitions/JourneyPaymentWithAssociationRequest"
          }
        },
        "email": {
          "description": "Email address for the payment receipt",
          "type": "string",
          "pattern": "[a-zA-Z0-9_@-]{1,70}",
          "x-risk-personal-data-field": "EMAIL_ADDRESS"
        },
        "lang": {
          "description": "Code of the preferred language to be used for the receipt, e.g. en-GB for English-United Kingdom. [For more details](http://www.lingoes.net/en/translator/langcode.htm)",
          "type": "string",
          "default": "en-GB",
          "pattern": "[a-zA-Z0-9-]{2,5}"
        }
      },
      "x-api-ref": "JourneyPaymentRequest"
    },
    "JourneyPaymentWithAssociationRequest": {
      "type": "object",
      "description": "A payment request contains: - the payment method to use for the payment - the amount and currency to be paid using that method - the items to be covered by this payment request\nThe items to be covered by the payment request is optional. Several options are available for the API user: - The API user can provide a specific payment request for seat and services, by providing their ids. - If this is not provided, the payment request will be used to cover any items in the order\nNote that the payment of a specific seat and/or services should cover its full amount i.e. payment of 1 single service with multiple services is not supported.\nSupported payment methods are: MilesPayment, PaymentCard, ExternalPayment or AlternativePaymentMethod.\n",
      "allOf": [
        {
          "$ref": "#/definitions/PaymentRequest"
        },
        {
          "type": "object",
          "properties": {
            "numberOfInstallments": {
              "type": "number",
              "format": "integer",
              "description": "Indicates the number of installments selected to be used for the payment. It is only available for payment with PaymentCard.\n"
            },
            "requiredAtAirport": {
              "type": "boolean",
              "description": "Request this card to be presented at the airport counter."
            },
            "currencyConversionProposalIds": {
              "type": "array",
              "description": "ID of the currency conversion Proposal to be used for the payment",
              "items": {
                "type": "string"
              }
            },
            "thirdPartyItems": {
              "type": "object",
              "description": "List of third party items (like external insurance providers) that would be included in the payment process or authorization.\n",
              "$ref": "#/definitions/PaymentThirdPartyItems"
            },
            "authorization": {
              "description": "Authorization information to be sent in input for redirection flows",
              "$ref": "#/definitions/PaymentAuthorizationInput"
            },
            "payerIdentification": {
              "description": "Payer data to enable fraud detection",
              "$ref": "#/definitions/PayerIdentification"
            },
            "travelerIds": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "[a-zA-Z0-9-]{1,20}"
              },
              "description": "List of travelers associated to this payment request. To split payment by traveler, the given payment method will be used to pay for all flights, seats and services of the given traveler."
            }
          }
        }
      ],
      "x-api-ref": "JourneyPaymentWithAssociationRequest"
    },
    "JourneyReply": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/Journey"
            },
            "dictionaries": {
              "$ref": "#/definitions/JourneyDictionary"
            }
          }
        }
      ],
      "x-api-ref": "JourneyReply"
    },
    "JourneyRequest": {
      "type": "object",
      "description": "Operation to be used for building the list of journeys available for check-in corresponding to a\n  confirmed booking.\n",
      "properties": {
        "lastName": {
          "description": "Last name of one traveler part of the order",
          "type": "string",
          "pattern": "[a-zA-Z -]{1,70}",
          "x-risk-personal-data-field": "PASSENGER_NAME"
        },
        "firstName": {
          "description": "First name of one traveler part of the order",
          "type": "string",
          "pattern": "[a-zA-Z -]{1,70}",
          "x-risk-personal-data-field": "PASSENGER_NAME"
        },
        "orderId": {
          "description": "Identifier of an order (Record Locator)",
          "type": "string",
          "pattern": "[a-zA-Z0-9]{6}",
          "x-risk-personal-data-field": "PNR_RECORD_LOCATOR"
        },
        "eTicketNumber": {
          "description": "E-ticket number",
          "type": "string",
          "pattern": "[0-9]{3}-[0-9]{10}",
          "x-risk-personal-data-field": "AIRLINE_TICKET_NUMBER"
        },
        "frequentFlyerCardId": {
          "type": "string",
          "description": "Identifier of a frequent flyer card, whatever its usage [redeem miles, accrue miles...]",
          "pattern": "[a-zA-Z0-9-:]{1,20}",
          "x-risk-personal-data-field": "FREQUENT_FLYER_NUMBER"
        },
        "staffNumber": {
          "type": "string",
          "description": "Staff number. No pattern is defined here, as can vary by airline"
        },
        "departureDate": {
          "type": "string",
          "description": "Departure flight date in ISO 8601 (http://www.w3.org/TR/NOTE-datetime)\nwithout timezone. Ex : 2026-07-21\n",
          "format": "date"
        },
        "originLocationCode": {
          "type": "string",
          "description": "Departure location code of flight (city or airport code)",
          "pattern": "[a-zA-Z]{3}"
        },
        "flightNumber": {
          "type": "string",
          "description": "Reservation flight number",
          "pattern": "[A-Z0-9]*"
        },
        "airlineCode": {
          "type": "string",
          "description": "Reservation airline code",
          "pattern": "[A-Z0-9]{2,3}"
        },
        "documentNumber": {
          "type": "string",
          "description": "Number present on the document",
          "pattern": "[a-zA-Z0-9-]{1,40}",
          "x-risk-personal-data-field": "NATIONAL_DOCUMENT_NUMBER"
        },
        "documentType": {
          "type": "string",
          "description": "Type of the document",
          "enum": [
            "passport",
            "identityCard",
            "drivingLicense"
          ]
        },
        "numericOrderId": {
          "type": "string",
          "description": "Numeric identifier for the order",
          "pattern": "[0-9]{12}",
          "x-risk-personal-data-field": "PNR_RECORD_LOCATOR"
        }
      },
      "x-api-ref": "JourneyRequest"
    },
    "JourneySeatDictionary": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/JourneyElementDictionary"
        },
        {
          "type": "object",
          "properties": {
            "journeyElements": {
              "type": "object",
              "description": "Journey elements corresponding to a journeyElement id.",
              "additionalProperties": {
                "$ref": "#/definitions/JourneyElement"
              }
            }
          }
        }
      ],
      "x-api-ref": "JourneySeatDictionary"
    },
    "JourneySeatReply": {
      "type": "object",
      "description": "Reply containing a seat object.\n",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "type": "array",
              "description": "List of Seats",
              "items": {
                "$ref": "#/definitions/JourneyElementSeatData"
              }
            },
            "dictionaries": {
              "$ref": "#/definitions/JourneySeatDictionary"
            }
          }
        }
      ],
      "x-api-ref": "JourneySeatReply"
    },
    "JourneySeatSelection": {
      "type": "object",
      "description": "Seat selection for a single traveler.\nA Seat can be associated to an existing traveler in the journey using travelerId.\nIf no seat number is provided for the traveller, a seat will be allocated by default.\n",
      "required": [
        "travelerId"
      ],
      "properties": {
        "seatNumber": {
          "type": "string",
          "description": "Concatenation of the row id and the column id, for example 12B"
        },
        "travelerId": {
          "type": "string",
          "description": "Traveler id associated to the seat",
          "pattern": "[a-zA-Z0-9-]{1,20}"
        },
        "exitSeatSuitability": {
          "type": "string",
          "description": "Exit seat suitability. UnableToDetermine suitability will trigger a warning at next touchpoint with an agent in order for him to check the suitability. If suitability is set to notSuitable and the traveler was assigned an exit seat, the Departure Control System will change the seat automatically.\n",
          "enum": [
            "suitable",
            "notSuitable",
            "unableToDetermine"
          ]
        },
        "journeyElementId": {
          "description": "Id of the Journey element associated to the seat. Only available in output.\n",
          "type": "string",
          "pattern": "[a-zA-Z0-9]{16}"
        }
      },
      "x-api-ref": "JourneySeatSelection"
    },
    "JourneyServiceDictionaryCommon": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/FlightDictionary"
        },
        {
          "type": "object",
          "properties": {
            "tax": {
              "type": "object",
              "description": "Taxes map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "type": "string"
              }
            },
            "surcharge": {
              "type": "object",
              "description": "Surcharges map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "type": "string"
              }
            },
            "currency": {
              "type": "object",
              "description": "Currencies map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "$ref": "#/definitions/CurrencyDictionaryItem"
              }
            },
            "anonymousTraveler": {
              "type": "object",
              "description": "Basic information about an anonymous traveler such as the passenger type code and the frequent flyer card(s). Frequent flyer cards applies only for a particular case: a transaction based on a cart already containing frequent flyer card(s) but not yet traveler(s). For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "$ref": "#/definitions/AnonymousTraveler"
              }
            },
            "discount": {
              "type": "object",
              "description": "Details about the discounts. The reference currency is the one defined at Price level.\n",
              "additionalProperties": {
                "$ref": "#/definitions/DiscountDictionaryItem"
              }
            },
            "traveler": {
              "type": "object",
              "description": "Information about a traveler such as first and last name. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "$ref": "#/definitions/JourneyTraveler"
              }
            },
            "seatCharacteristic": {
              "type": "object",
              "description": "Seat characteristics map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "$ref": "#/definitions/SeatCharacteristicDictionaryItem"
              }
            }
          }
        }
      ],
      "x-api-ref": "JourneyServiceDictionaryCommon"
    },
    "JourneyServiceReply": {
      "type": "object",
      "description": "Reply containing a service object.\n",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/ServiceItem"
            },
            "dictionaries": {
              "$ref": "#/definitions/JourneyServiceDictionaryCommon"
            }
          }
        }
      ],
      "x-api-ref": "JourneyServiceReply"
    },
    "JourneyServicesCatalogueReply": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServicesCatalogueReplyData"
              }
            },
            "dictionaries": {
              "$ref": "#/definitions/JourneyServiceDictionaryCommon"
            }
          }
        }
      ],
      "x-api-ref": "JourneyServicesCatalogueReply"
    },
    "JourneyServicesReply": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServiceItem"
              }
            },
            "links": {
              "type": "array",
              "description": "Meta information containing the HTTP details of the linked resources",
              "items": {
                "$ref": "#/definitions/HttpRequest"
              }
            },
            "dictionaries": {
              "$ref": "#/definitions/JourneyServiceDictionaryCommon"
            }
          }
        }
      ],
      "x-api-ref": "JourneyServicesReply"
    },
    "JourneysListReply": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Journey"
              }
            },
            "dictionaries": {
              "$ref": "#/definitions/JourneyDictionary"
            }
          }
        }
      ],
      "x-api-ref": "JourneysListReply"
    },
    "JourneyTraveler": {
      "type": "object",
      "description": "Individual taking part in a journey",
      "allOf": [
        {
          "$ref": "#/definitions/Traveler"
        },
        {
          "type": "object",
          "properties": {
            "purposeOfVisit": {
              "description": "Indicates the purpose of visit for the traveler.\nSupported values are: - hajj: Hajj is an annual Islamic pilgrimage to Mecca. - umrah: Umrah is an Islamic pilgrimage to Mecca that can be undertaken at any time of the year.\n",
              "type": "string",
              "enum": [
                "hajj",
                "umrah"
              ]
            },
            "isPilgrimConfirmationProvided": {
              "description": "Indicates if the passenger has provided their Purpose of visit(Pilgrimage)confirmation.",
              "type": "boolean",
              "default": false
            },
            "isVoluntaryToSplitTravelers": {
              "description": "Indicates if the traveler is willing to travel separately from the other travelers they are linked to in the PNR if all the travelers can't be accomodated on the flight they are on standby.\n",
              "type": "boolean",
              "default": false
            }
          }
        }
      ],
      "x-api-ref": "JourneyTraveler"
    },
    "JourneyTravelerPatchRequest": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "traveler id",
          "pattern": "[a-zA-Z0-9-]{1,20}"
        },
        "purposeOfVisit": {
          "type": "string",
          "description": "Indicates the purpose of visit for the traveler.\nSupported values are: - hajj: Hajj is an annual Islamic pilgrimage to Mecca. - umrah: Umrah is an Islamic pilgrimage to Mecca that can be undertaken at any time of the year.\n",
          "enum": [
            "hajj",
            "umrah"
          ]
        },
        "isVoluntaryToSplitTravelers": {
          "description": "Indicates if the traveler is willing to travel separately from the other travelers they are linked to in the PNR if all the travelers can't be accomodated on the flight they are on standby.\n",
          "type": "boolean"
        }
      },
      "x-api-ref": "JourneyTravelerPatchRequest"
    },
    "JourneyTravelerPostRequest": {
      "type": "object",
      "properties": {
        "lastName": {
          "description": "Last name of one traveler part of the order",
          "type": "string",
          "pattern": "[a-zA-Z -]{1,70}",
          "x-risk-personal-data-field": "PASSENGER_NAME"
        },
        "firstName": {
          "description": "First name of one traveler part of the order",
          "type": "string",
          "pattern": "[a-zA-Z -]{1,70}",
          "x-risk-personal-data-field": "PASSENGER_NAME"
        },
        "orderId": {
          "description": "Record locator of a PNR",
          "type": "string",
          "pattern": "[a-zA-Z0-9]{6}",
          "x-risk-personal-data-field": "PNR_RECORD_LOCATOR"
        },
        "eTicketNumber": {
          "description": "E-ticket number",
          "type": "string",
          "pattern": "[0-9]{3}-[0-9]{10}",
          "x-risk-personal-data-field": "AIRLINE_TICKET_NUMBER"
        },
        "frequentFlyerCardId": {
          "description": "Identifier of a frequent flyer card, whatever its usage [redeem miles, accrue miles...]",
          "type": "string",
          "pattern": "[a-zA-Z0-9-:]{1,20}",
          "x-risk-personal-data-field": "FREQUENT_FLYER_NUMBER"
        },
        "staffNumber": {
          "type": "string",
          "description": "Staff number. No pattern is defined here, as can vary by airline",
          "x-risk-personal-data-field": "AIRLINE_TICKET_NUMBER"
        },
        "departureDate": {
          "description": "Departure flight date in ISO 8601 (http://www.w3.org/TR/NOTE-datetime) without timezone. Ex : 2016-07-01",
          "type": "string",
          "format": "date"
        },
        "originLocationCode": {
          "description": "Departure location code of outbound (city or airport code)",
          "type": "string",
          "pattern": "[a-zA-Z]{3}"
        },
        "journeyElementId": {
          "description": "Id of the (Journey element) traveler on the flight.",
          "type": "string",
          "pattern": "[a-zA-Z0-9]{16}"
        }
      },
      "x-api-ref": "JourneyTravelerPostRequest"
    },
    "JourneyTravelersReply": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "type": "array",
              "description": "List of Travelers",
              "items": {
                "$ref": "#/definitions/JourneyTraveler"
              }
            }
          }
        }
      ],
      "x-api-ref": "JourneyTravelersReply"
    },
    "JourneyUnpaidBaggageItem": {
      "type": "object",
      "description": "Unpaid baggage of one type associated to a journey for one traveler",
      "required": [
        "id",
        "travelerId",
        "quantity",
        "quantityUnit",
        "baggageType",
        "flightIds",
        "amount"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Id of the excess baggage item in the journey"
        },
        "travelerId": {
          "type": "string",
          "description": "Traveler to whom this baggage is associated",
          "x-dictionary-name": "traveler",
          "x-field-name": "traveler",
          "x-field-type": "Traveler"
        },
        "quantity": {
          "description": "Quantity of unpaid baggage (in kg or pieces, see quantityUnit)",
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "quantityUnit": {
          "description": "Unit of the quantity",
          "type": "string",
          "enum": [
            "pieces",
            "kg"
          ]
        },
        "baggageType": {
          "description": "Either \"ExcessBaggage\" for generic excess or if the baggage is of special type, its type as filed by the airline.",
          "type": "string"
        },
        "flightIds": {
          "description": "Flights on which this baggage is booked",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "amount": {
          "description": "Total price of this set of unpaid baggage",
          "$ref": "#/definitions/Amount"
        }
      },
      "x-api-ref": "JourneyUnpaidBaggageItem"
    },
    "JourneyUnpaidItems": {
      "type": "object",
      "description": "Unpaid items associated to a journey, as well as the total price",
      "required": [
        "total"
      ],
      "properties": {
        "total": {
          "description": "Total price of unpaid items",
          "$ref": "#/definitions/Amount"
        },
        "seats": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JourneyUnpaidSeatItem"
          }
        },
        "baggage": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JourneyUnpaidBaggageItem"
          }
        },
        "services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceItem"
          }
        }
      },
      "x-api-ref": "JourneyUnpaidItems"
    },
    "JourneyUnpaidItemsDictionary": {
      "properties": {
        "traveler": {
          "type": "object",
          "description": "Traveler information corresponding to a traveler id.",
          "additionalProperties": {
            "$ref": "#/definitions/JourneyTraveler"
          }
        },
        "flight": {
          "type": "object",
          "description": "Flight information corresponding to a flight id.",
          "additionalProperties": {
            "$ref": "#/definitions/CheckInFlight"
          }
        },
        "currency": {
          "type": "object",
          "description": "Currencies map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
          "additionalProperties": {
            "$ref": "#/definitions/CurrencyDictionaryItem"
          }
        }
      },
      "x-api-ref": "JourneyUnpaidItemsDictionary"
    },
    "JourneyUnpaidItemsReply": {
      "type": "object",
      "description": "Reply containing the unpaid items associated to the journey, as well as the total price",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/JourneyUnpaidItems"
            },
            "dictionaries": {
              "$ref": "#/definitions/JourneyUnpaidItemsDictionary"
            }
          }
        }
      ],
      "x-api-ref": "JourneyUnpaidItemsReply"
    },
    "JourneyUnpaidSeatItem": {
      "type": "object",
      "description": "Unpaid seat associated to a journey",
      "required": [
        "id",
        "travelerId",
        "seatNumber",
        "flightId",
        "amount"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Id of the chargeable seat item in the journey"
        },
        "travelerId": {
          "type": "string",
          "description": "Traveler for whom this seat is assigned",
          "x-dictionary-name": "traveler",
          "x-field-name": "traveler",
          "x-field-type": "Traveler"
        },
        "seatNumber": {
          "type": "string",
          "description": "Concatenation of the row id and the column id, for example 12B"
        },
        "flightId": {
          "type": "string",
          "description": "Flight on which this seat is assigned",
          "x-dictionary-name": "flight",
          "x-field-name": "flight",
          "x-field-type": "Flight"
        },
        "amount": {
          "description": "Price of this seat",
          "$ref": "#/definitions/Amount"
        }
      },
      "x-api-ref": "JourneyUnpaidSeatItem"
    },
    "JourneyUpdateSeatItemRequest": {
      "type": "object",
      "description": "Object used to specify the seat(s) selection that will be part of the add or update request",
      "required": [
        "flightId",
        "seatSelections"
      ],
      "properties": {
        "flightId": {
          "type": "string",
          "description": "Flight to which the seat selection is associated to"
        },
        "seatSelections": {
          "type": "array",
          "description": "It allows to define the list of seat selections for a group of travelers",
          "items": {
            "$ref": "#/definitions/JourneySeatSelection"
          },
          "minItems": 1
        }
      },
      "x-api-ref": "JourneyUpdateSeatItemRequest"
    },
    "JourneyUpgradePriceReply": {
      "type": "object",
      "description": "Reply containing a summary of the selected upgrades, and its associated dictionaries",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "properties": {
            "data": {
              "$ref": "#/definitions/JourneyUpgradePriceReplyData"
            },
            "dictionaries": {
              "$ref": "#/definitions/JourneyUpgradeReplyDictionary"
            }
          }
        }
      ],
      "x-api-ref": "JourneyUpgradePriceReply"
    },
    "JourneyUpgradePriceReplyData": {
      "type": "object",
      "description": "Reply containing a recap of the selected upgrades, and the total price",
      "properties": {
        "upgrades": {
          "description": "A recap of the selected upgrades",
          "type": "array",
          "items": {
            "$ref": "#/definitions/JourneyElementUpgrade"
          }
        },
        "totalPrices": {
          "description": "Total price of the upgrades that were passed as selected in the query, after applying discounts. There may be multiple amounts involved, e.g. upgrade in miles + taxes in cash",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Amount"
          }
        }
      },
      "x-api-ref": "JourneyUpgradePriceReplyData"
    },
    "JourneyUpgradePriceRequest": {
      "type": "object",
      "description": "Input needed to price selected upgrades on a journey",
      "required": [
        "upgradeIds"
      ],
      "properties": {
        "upgradeIds": {
          "description": "List of IDs of individual upgrades that the customer has selected. This allows the server to provide the final price for the selection",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-api-ref": "JourneyUpgradePriceRequest"
    },
    "JourneyUpgradeReplyDictionary": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/JourneyElementDictionary"
        },
        {
          "type": "object",
          "properties": {
            "journeyElement": {
              "type": "object",
              "description": "Journey element information corresponding to a traveler flight id.",
              "additionalProperties": {
                "$ref": "#/definitions/JourneyElement"
              }
            },
            "currency": {
              "type": "object",
              "description": "Currencies map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "$ref": "#/definitions/CurrencyDictionaryItem"
              }
            }
          }
        }
      ],
      "x-api-ref": "JourneyUpgradeReplyDictionary"
    },
    "JourneyUpgradeShopReply": {
      "type": "object",
      "description": "Reply containing all the upgrade data, and its associated dictionaries",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "properties": {
            "data": {
              "$ref": "#/definitions/JourneyUpgradeShopReplyData"
            },
            "dictionaries": {
              "$ref": "#/definitions/JourneyUpgradeReplyDictionary"
            }
          }
        }
      ],
      "x-api-ref": "JourneyUpgradeShopReply"
    },
    "JourneyUpgradeShopReplyData": {
      "type": "object",
      "description": "Data containing all the upgrade options for the journey with their individual prices. In addition, any relevant account balances",
      "properties": {
        "availableUpgrades": {
          "description": "List of available upgrades for this journey",
          "type": "array",
          "items": {
            "$ref": "#/definitions/JourneyElementUpgrade"
          }
        },
        "accountBalances": {
          "description": "the balance of the relevant customer account(s) e.g. miles, upgrade credits",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Account"
          }
        }
      },
      "x-api-ref": "JourneyUpgradeShopReplyData"
    },
    "KeyValuePair": {
      "type": "object",
      "description": "Key Value Pair",
      "required": [
        "key",
        "value"
      ],
      "properties": {
        "key": {
          "description": "Key",
          "type": "string"
        },
        "value": {
          "description": "Value associated to the key",
          "type": "string"
        }
      },
      "x-api-ref": "KeyValuePair"
    },
    "LightFlight": {
      "allOf": [
        {
          "$ref": "#/definitions/FlightCommon"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Flight id"
            },
            "isOpenSegment": {
              "description": "Open segment",
              "type": "boolean",
              "default": false
            },
            "isFlown": {
              "description": "Flag indicating if the flight has already been flown (the default value is false).",
              "type": "boolean"
            },
            "departure": {
              "$ref": "#/definitions/FlightEndPoint"
            },
            "arrival": {
              "$ref": "#/definitions/FlightEndPoint"
            },
            "bookingClass": {
              "description": "Booking class",
              "type": "string"
            },
            "statusCode": {
              "type": "string",
              "description": "Operational status. Possible values are: HK (confirmed), HL (waitlist),  TK (schedule change), HX (have cancelled). Flights with other values will not be returned.\n"
            }
          }
        }
      ],
      "x-api-ref": "LightFlight"
    },
    "Links": {
      "description": "links to continue in the shopping process",
      "type": "object",
      "properties": {
        "next": {
          "description": "Use this link to get the next hotels in the search result",
          "type": "string",
          "format": "uri"
        }
      },
      "x-api-ref": "Links"
    },
    "LocalizationParameter": {
      "type": "object",
      "description": "Localization parameters can be used to build your customised fare conditions.\nTo see the structure of the different types of LocalizationParameter, please see [Localization Parameter documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/localization_params.html#/TemplateType/get_)\nType of the parameters could be:\n- DateTemplateParameter\n- DateTimeTemplateParameter\n- AmountTemplateParameter\n- BooleanTemplateParameter\n- LocationCodeTemplateParameter\n",
      "discriminator": "templateType",
      "required": [
        "templateType"
      ],
      "properties": {
        "templateType": {
          "type": "string",
          "description": "LocalizationParameter types e.g. date, datetime, amount or boolean.\nTo see the structure of the different template parameter types, please see [Localization Parameter Templates documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/localization_params.html#/TemplateType/get_)\n",
          "enum": [
            "DateTemplateParameter",
            "DateTimeTemplateParameter",
            "AmountTemplateParameter",
            "BooleanTemplateParameter",
            "LocationCodeTemplateParameter"
          ]
        }
      },
      "x-api-ref": "LocalizationParameter"
    },
    "Location": {
      "type": "object",
      "description": "Description of a particular point or place in physical space",
      "properties": {
        "cityCode": {
          "description": "Contains location city code \n",
          "type": "string",
          "pattern": "[a-zA-Z]{3}"
        }
      },
      "x-api-ref": "Location"
    },
    "LocationCodeTemplateParameter": {
      "type": "object",
      "description": "LocationCode localization template parameter",
      "allOf": [
        {
          "$ref": "#/definitions/LocalizationParameter"
        },
        {
          "type": "object",
          "properties": {
            "value": {
              "type": "string",
              "pattern": "[a-zA-Z]{3}",
              "x-dictionary-name": "location",
              "x-field-name": "location",
              "x-field-type": "LocationDictionaryItem"
            }
          }
        }
      ],
      "x-api-ref": "LocationCodeTemplateParameter"
    },
    "LocationDictionaryItem": {
      "description": "Location dictionary",
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "description": "Location type: airport, city or state",
          "type": "string",
          "enum": [
            "airport",
            "city",
            "state"
          ]
        },
        "airportName": {
          "type": "string",
          "description": "Localized name of the airport (not returned if the location is a city or a state)"
        },
        "cityCode": {
          "description": "IATA city code. City code associated to airport (not returned if the location is a city or a state)",
          "type": "string",
          "pattern": "[a-zA-Z]{3}",
          "x-risk-personal-data-field": "ADDRESS"
        },
        "cityName": {
          "description": "Localized name of the city (not returned if the location is a state)",
          "type": "string",
          "pattern": "[a-zA-Z -]{1,35}",
          "x-risk-personal-data-field": "ADDRESS"
        },
        "stateCode": {
          "type": "string",
          "description": "State code (two character standard IATA state code)",
          "pattern": "[a-zA-Z0-9]{1,2}",
          "x-risk-personal-data-field": "ADDRESS"
        },
        "countryCode": {
          "type": "string",
          "description": "ISO 3166-1 country code",
          "pattern": "[a-zA-Z0-9]{2}",
          "x-risk-personal-data-field": "ADDRESS"
        },
        "timeZone": {
          "type": "string",
          "description": "Timezone of the city in UTC. This information is available only in Order Dictionary.",
          "pattern": "UTC(\\+|\\-)[0-9]{4}",
          "example": "UTC+0530"
        }
      },
      "x-api-ref": "LocationDictionaryItem"
    },
    "LostSeatItem": {
      "type": "object",
      "description": "This object contains the information regarding the seats selection for a single traveler or a group of travelers",
      "properties": {
        "seatSelections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SeatRecord"
          },
          "minItems": 1
        },
        "isChargeable": {
          "description": "true if the service is chargeable",
          "type": "boolean"
        },
        "originalFlightId": {
          "description": "Flight to which the seat selection was originally booked",
          "type": "string"
        },
        "targetFlightIds": {
          "description": "Flight to which the seat selection could not be booked",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-api-ref": "LostSeatItem"
    },
    "LostServiceItem": {
      "type": "object",
      "description": "This object contains a list of detailed information for each service item retrieved from Services catalogue",
      "properties": {
        "descriptions": {
          "description": "List of exhaustive descriptions available for the service",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceDescription"
          }
        },
        "isChargeable": {
          "description": "true if the lost service is chargeable",
          "type": "boolean"
        },
        "originalFlightId": {
          "description": "Flight to which the service was originally booked",
          "type": "string"
        },
        "targetFlightIds": {
          "description": "Flight to which the service could not be booked",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "travelerIds": {
          "description": "Flights to which this service was associated to",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-api-ref": "LostServiceItem"
    },
    "LoyaltyAward": {
      "title": "LoyaltyAward",
      "description": "Represents an amount of a specific currency code of the loyalty program",
      "type": "object",
      "properties": {
        "amount": {
          "type": "string",
          "description": "Amount of loyalty currency code",
          "pattern": "[-]?[0-9]+",
          "maxLength": 10
        },
        "loyaltyAwardType": {
          "type": "string",
          "description": "Optional information that represents the type of the Loyalty currency code. The award(s) can be defined as 'Base' or 'Bonus'. This affects the balance calculation according to the loyalty program business logic",
          "enum": [
            "BASE",
            "BONUS"
          ]
        },
        "category": {
          "type": "string",
          "description": "Category of the loyalty currency. \nSTANDARD represents standard loyalty points\nTIER the points used to calculate the tier level\nBENEFIT refers to services like Hotel stay or Lounge access",
          "enum": [
            "STANDARD",
            "TIER",
            "BENEFIT"
          ]
        },
        "codeDescription": {
          "type": "string",
          "description": "Represents the description of the loyalty program currency code"
        },
        "code": {
          "type": "string",
          "minLength": 2,
          "maxLength": 6,
          "pattern": "[a-zA-Z0-9]+",
          "description": "Loyalty program currency code corresponding to the amount. The list of available currency codes is defined in the configuration of the program in the loyalty system"
        },
        "description": {
          "$ref": "#/definitions/TextWithLanguageType"
        }
      },
      "x-api-ref": "LoyaltyAward"
    },
    "LoyaltyNumbersItem": {
      "type": "object",
      "properties": {
        "loyaltyCode": {
          "type": "string",
          "description": "CD: corporate code, PC: promotion code, NIL: nothing, ID: customer identification number, IT: inclusive tour, FT: frequent traveler, RC: rate code",
          "enum": [
            "CD",
            "PC",
            "NIL",
            "ID",
            "IT",
            "FT",
            "RC"
          ]
        },
        "loyaltyNumber": {
          "type": "string",
          "description": "This holds the value of a loyalty number",
          "x-risk-personal-data-field": "FREQUENT_FLYER_NUMBER"
        }
      },
      "x-api-ref": "LoyaltyNumbersItem"
    },
    "Meal": {
      "type": "object",
      "description": "Meal code specifies the type of meal available per booking class. B=BREAKFAST, K=CONTINENTAL BREAKFAST, L=LUNCH, D=DINNER, S=SNACK OR BRUNCH, O=COLD MEAL, H=HOT MEAL, M=MEAL (NON-SPECIFIC), R=REFRESHMENT, C=ALCOHOLIC BEVERAGES COMPLIMENTARY,F=FOOD FOR PURCHASE, P=ALCOHOLIC BEVERAGES FOR PURCHASE,  Y=DUTY FREE SALES AVAILABLE, N=NO MEAL SERVICE, V=REFRESHMENTS FOR PURCHASE, G=FOOD AND BEVERAGES FOR PURCHASE. Booking Class can be Y=Economy.",
      "properties": {
        "bookingClass": {
          "description": "Booking class",
          "type": "string",
          "pattern": "[A-Z]{1}"
        },
        "mealCodes": {
          "description": "Meal Type",
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "[A-Z]{1}"
          },
          "x-risk-personal-data-field": "TYPE_OF_MEAL"
        }
      },
      "x-api-ref": "Meal"
    },
    "MediaUri": {
      "type": "object",
      "description": "Media URI",
      "properties": {
        "uri": {
          "type": "string",
          "format": "uri"
        },
        "category": {
          "type": "string",
          "description": "Category of the type of images to be stored in the uri\nExamples :\n  * EXTERIOR\n  * LOBBY\n  * SWIMMING_POOL\n  * RESTAURANT\n  * ROOM\n  * VEHICLE_IMAGE\n  * COMPANY_LOGO"
        }
      },
      "x-api-ref": "MediaUri"
    },
    "Messages": {
      "type": "object",
      "properties": {
        "errors": {
          "description": "Array of error messages. If at least one error occurs, no data will be returned and the HTTP Status code is 200 for POST and DELETE, instead of 201 and 204 when the operation went well",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ErrorMessage"
          }
        },
        "warnings": {
          "description": "Array of warning messages. A warning message could be raised also in case of successful operation",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WarningMessage"
          }
        }
      },
      "x-api-ref": "Messages"
    },
    "Meta": {
      "description": "Meta information containing the HTTP details of the linked resources",
      "type": "object",
      "properties": {
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HttpRequest"
          }
        },
        "createdDocumentLinks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CreatedDocumentLink"
          }
        }
      },
      "x-api-ref": "Meta"
    },
    "Mileage": {
      "type": "object",
      "description": "Mileage information described by a maximum `maxDistance` allowed and its `distanceUnit`\nwith the `excessCost` information in case of the mileage is exceeded\n",
      "properties": {
        "excessCost": {
          "description": "Unitary cost of the exceeding mileage (defined by `maxDistance` and `distanceUnit`).\nThe amount will be expressed in the currency specified in the user preferences.\nExample: `1.16 USD` would be the cost per extra kilometer (if 'distanceUnit' corresponds to km)\n",
          "$ref": "#/definitions/Amount"
        },
        "maxDistance": {
          "type": "integer",
          "description": "Maximum distance included"
        },
        "distanceUnit": {
          "type": "string",
          "enum": [
            "km",
            "miles"
          ],
          "description": "Unit of the distance: km or miles"
        },
        "mileageTimeWindow": {
          "type": "string",
          "description": "Period for which the mileage allowance applies",
          "enum": [
            "daily",
            "monthly",
            "weekly",
            "fullPeriod"
          ]
        }
      },
      "x-api-ref": "Mileage"
    },
    "MilesCashMonetaryAmount": {
      "type": "object",
      "description": "Specific amount information for Miles & Cash",
      "required": [
        "convertedAmount",
        "nonConvertedAmount",
        "currencyCode"
      ],
      "properties": {
        "convertedAmount": {
          "description": "By redeeming miles, the monetary amount has been reduced by this amount. The amount value expressed as numerical information. The decimale places are defined at currency level. e.g. \"EUR 100.85\" will be represented as `10085`, with the currency `decimalPlaces` = 2.",
          "type": "integer",
          "format": "int64",
          "minimum": 0,
          "x-dictionary-name": "currency",
          "x-field-name": "convertedCurrency",
          "x-field-type": "CurrencyDictionaryItem"
        },
        "nonConvertedAmount": {
          "description": "This amount will not be paid in miles, it denotes the amount to be paid using a monetary payment method, e.g. Credit Card. The amount value expressed as numerical information. The decimale places are defined at currency level. e.g. \"EUR 100.85\" will be represented as `10085`, with the currency `decimalPlaces` = 2.",
          "type": "integer",
          "format": "int64",
          "minimum": 0,
          "x-dictionary-name": "currency",
          "x-field-name": "nonConvertedCurrency",
          "x-field-type": "CurrencyDictionaryItem"
        },
        "currencyCode": {
          "description": "ISO currency code (http://www.iso.org/iso/home/standards/currency_codes.htm).",
          "type": "string",
          "pattern": "[A-Z]{3}",
          "x-dictionary-name": "currency",
          "x-field-name": "currency",
          "x-field-type": "CurrencyDictionaryItem"
        }
      },
      "x-api-ref": "MilesCashMonetaryAmount"
    },
    "MilesCashSplitListDictionary": {
      "allOf": [
        {
          "$ref": "#/definitions/DictionaryCommon"
        }
      ],
      "x-api-ref": "MilesCashSplitListDictionary"
    },
    "MilesCashSplitListItem": {
      "description": "Possible split of payable amount for Miles & Cash",
      "type": "object",
      "required": [
        "id",
        "miles",
        "monetary"
      ],
      "properties": {
        "id": {
          "description": "Unique id for this item, to used when paying with this Miles & Cash split.",
          "type": "string"
        },
        "isMatchingRequestedAmount": {
          "description": "Boolean to indicate if the current split corresponds to the cash or miles amount requested by the API user.\nIf not returned, default value is `false`.",
          "type": "boolean"
        },
        "miles": {
          "description": "This is the amount in miles that will be redeemed. ",
          "type": "integer",
          "minimum": 0
        },
        "monetary": {
          "$ref": "#/definitions/MilesCashMonetaryAmount"
        },
        "detailedBreakdown": {
          "description": "It describes the full price breakdown, both of the monetary and miles part. It includes the details of the total amount and the amount per traveler type.",
          "$ref": "#/definitions/SliderAirPricingRecords"
        }
      },
      "x-api-ref": "MilesCashSplitListItem"
    },
    "MilesCashSplitListReply": {
      "type": "object",
      "description": "List of possible miles and cash splits",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MilesCashSplitListItem"
              }
            },
            "dictionaries": {
              "$ref": "#/definitions/MilesCashSplitListDictionary"
            }
          }
        }
      ],
      "x-api-ref": "MilesCashSplitListReply"
    },
    "MilesConversion": {
      "type": "object",
      "description": "Amount details from the Award Converter or the Miles&Cash Slider products that both enable shopping in miles. It is split in 2 categories (the meaning of which depends on via which of the two products the miles conversion was achieved): - The converted miles\n  - via the Award Converter:\n    The fare and total amounts converted in miles. This corresponds to the maximum amount converted in miles and that can be paid in miles.\n  - via the Miles&Cash Slider:\n    The amount selected by the web user, converted and to be paid in miles\n- The remaining non converted part in cash with applicable currency\n  - via the Award Converter:\n    The base, total and total taxes amounts that can't be converted in miles (based on Award Converter rules) and will need to be paid in revenue currency.\n  - via the Miles&Cash Slider:\n    Amount selected by the web user to be paid in revenue currency  ",
      "required": [
        "convertedMiles",
        "remainingNonConverted"
      ],
      "properties": {
        "convertedMiles": {
          "description": "Price breakdown of converted part expressed in miles",
          "type": "object",
          "$ref": "#/definitions/ConvertedMiles"
        },
        "remainingNonConverted": {
          "description": "Price breakdown of non-converted part expressed in cash",
          "type": "object",
          "$ref": "#/definitions/Price"
        }
      },
      "x-api-ref": "MilesConversion"
    },
    "MilesPayment": {
      "type": "object",
      "description": "Frequent Flyer Card information to be used to redeem miles.\nThe information can be provided in 2 ways.\n 1) The card can be referenced from the cart using frequentFlyerCardId.\n 2) The information can be provided directly, by filling companyCode and cardNumber.\nOnly one of these 2 ways can be chosen, they cannot be combined.\n",
      "allOf": [
        {
          "$ref": "#/definitions/PaymentMethod"
        },
        {
          "type": "object",
          "properties": {
            "milesPaymentSplitId": {
              "type": "string",
              "description": "Identifier of the selected Miles and Cash split from GET /payment-methods/miles-payment.\n",
              "example": "12#25"
            },
            "frequentFlyerCardId": {
              "description": "Identifier of a frequent flyer card stored in the cart.\nWhen using this identifier, no other frequent flyer card data is needed.\n",
              "type": "string",
              "pattern": "[a-zA-Z0-9-:]{1,20}",
              "x-risk-personal-data-field": "FREQUENT_FLYER_NUMBER"
            },
            "companyCode": {
              "description": "Code of the company emitting the card.\nThis property (and cardNumber) is mandatory when frequent flyer card data is added directly.\nIt should not be present when a frequent flyer card is used from the cart.\n",
              "type": "string",
              "pattern": "[A-Z0-9]{2,3}",
              "example": "6X"
            },
            "cardNumber": {
              "description": "Card number\nThis property (and companyCode) is mandatory when frequent flyer card data is added directly.\nIt should not be present when a frequent flyer card is used from the cart.\n",
              "type": "string",
              "pattern": "[a-zA-Z0-9]{2,20}",
              "example": "992003172079000",
              "x-risk-personal-data-field": "FREQUENT_FLYER_NUMBER"
            }
          }
        }
      ],
      "x-api-ref": "MilesPayment"
    },
    "MultiCurrencyAirPricingRecords": {
      "type": "object",
      "required": [
        "totalPrices"
      ],
      "description": "It stores the different price breakdowns for Air related resources",
      "properties": {
        "unitPrices": {
          "description": "List of Unit prices, where the UnitPrice expresses a price per single traveler type. It can be expressed in several currencies (cash or miles), thus this list will contain only one element when a single currency is used.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MultiCurrencyUnitPrice"
          }
        },
        "totalPrices": {
          "description": "Global total price.\nIt can be expressed in several currencies (cash or miles), thus this list will contain only one element when a single currency is used.\n",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MultiCurrencyPrice"
          }
        },
        "milesConversion": {
          "description": "Contains information about converted miles and non converted cash when the Award converter or the Miles&Cash slider is used",
          "type": "object",
          "$ref": "#/definitions/MultiCurrencyMilesConversion"
        },
        "exchangePrices": {
          "description": "Price amounts related to an ATC Shopper change to an Order. Amount values are displayed in the selling currency.",
          "$ref": "#/definitions/ExchangePriceDetails"
        }
      },
      "x-api-ref": "MultiCurrencyAirPricingRecords"
    },
    "MultiCurrencyMilesConversion": {
      "type": "object",
      "description": "Amount details from the Award Converter or the Miles&Cash Slider products that both enable shopping in miles. It is split in 2 categories (the meaning of which depends on via which of the two products the miles conversion was achieved): - The converted miles\n  - via the Award Converter:\n    The fare and total amounts converted in miles. This corresponds to the maximum amount converted in miles and that can be paid in miles.\n  - via the Miles&Cash Slider:\n    The amount selected by the web user, converted and to be paid in miles\n- The remaining non converted part in cash with applicable currency\n  - via the Award Converter:\n    The base, total and total taxes amounts that can't be converted in miles (based on Award Converter rules) and will need to be paid in revenue currency.\n  - via the Miles&Cash Slider:\n    Amount selected by the web user to be paid in revenue currency  ",
      "required": [
        "convertedMiles",
        "remainingNonConverted"
      ],
      "properties": {
        "convertedMiles": {
          "description": "Price breakdown of converted part expressed in miles",
          "type": "object",
          "$ref": "#/definitions/ConvertedMiles"
        },
        "remainingNonConverted": {
          "description": "Price breakdown of non-converted part expressed in cash",
          "type": "object",
          "$ref": "#/definitions/MultiCurrencyPrice"
        }
      },
      "x-api-ref": "MultiCurrencyMilesConversion"
    },
    "MultiCurrencyPrice": {
      "type": "object",
      "description": "Price breakdowns expressed as with amounts using a specific currency",
      "properties": {
        "base": {
          "description": "Base price. It includes some surcharges, but no taxes nor fees",
          "$ref": "#/definitions/Amount"
        },
        "total": {
          "description": "Total price, including base fare, taxes, surcharges and fees (excluding credit or debit card fees)",
          "$ref": "#/definitions/Amount"
        },
        "taxes": {
          "description": "Taxes breakdown",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tax"
          }
        },
        "totalTaxes": {
          "description": "Sum of all taxes (including surcharges). In case of a reissue, the total of taxes is including the tax categories 'old', 'new' and 'newPaid'.",
          "$ref": "#/definitions/Amount"
        },
        "totalRefundableTaxes": {
          "description": "Sum of all refundable taxes (including surcharges)",
          "$ref": "#/definitions/Amount"
        },
        "surcharges": {
          "description": "Surcharges breakdown",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Surcharge"
          }
        },
        "totalSurcharges": {
          "description": "Sum of all surcharges",
          "$ref": "#/definitions/Amount"
        },
        "fees": {
          "description": "Fees breakdown",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Fee"
          }
        },
        "totalFees": {
          "description": "Sum of all fees",
          "$ref": "#/definitions/Amount"
        },
        "discount": {
          "description": "Details about the discount when it is applied",
          "$ref": "#/definitions/Discount"
        }
      },
      "x-api-ref": "MultiCurrencyPrice"
    },
    "MultiCurrencyUnitPrice": {
      "type": "object",
      "description": "Price per traveler expressed using multiple currencies.\ne.g. in case of 2 adults and 1 child, it contains the price for 1 adult and the price for 1 child.\n",
      "properties": {
        "travelerIds": {
          "type": "array",
          "items": {
            "description": "Price is applicable to this traveler or group of travelers.\nIn case of a transaction either cart-free or based on a cart that does not contain travelers, travelers ids are defined in anonymousTraveler dictionary.\nOtherwise travelers ids are defined in cart\n",
            "type": "string"
          }
        },
        "flightIds": {
          "type": "array",
          "items": {
            "description": "Price is applicable to this flight or group of flights. If not provided, the price applies to all flights",
            "type": "string"
          }
        },
        "prices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MultiCurrencyPrice"
          }
        },
        "milesConversion": {
          "description": "Contains information about converted miles and non converted cash when the Award converter or the Miles&Cash slider is used",
          "type": "object",
          "$ref": "#/definitions/MultiCurrencyMilesConversion"
        },
        "exchangePrices": {
          "description": "Price amounts related to an ATC Shopper change to an Order. Amount values are displayed in the selling currency.",
          "$ref": "#/definitions/ExchangePriceDetails"
        }
      },
      "x-api-ref": "MultiCurrencyUnitPrice"
    },
    "MultiHotelsOffers": {
      "title": "MultiHotelsOffers",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "properties": {
            "data": {
              "description": "The list of the hotels matching the search criteria, and the available offers for each hotel.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/HotelOffers"
              }
            },
            "meta": {
              "$ref": "#/definitions/Meta"
            },
            "dictionaries": {
              "$ref": "#/definitions/HotelDictionary"
            }
          },
          "required": [
            "data"
          ]
        }
      ],
      "x-api-ref": "MultiHotelsOffers"
    },
    "Name": {
      "type": "object",
      "description": "Simple identity information, with major information only",
      "properties": {
        "firstName": {
          "description": "Individual first name.   If person has middle name both first and middle name should be added here (e.g. Arthur Ignatius) When creating/updating regulatory details, only first name can be added here.(e.g. Arthur) When using nameType=universal, only ASCII characters are accepted ([a-zA-Z ]+) for both lastName and firstName\nThe number of characters allowed for first name in regulatory details may differ upon configuration.",
          "type": "string",
          "pattern": "^ {0}[A-Za-z\\u00C0-\\u1FFF\\u3040-\\uD7AF][A-Za-z\\u00C0-\\u1FFF\\u3040-\\uD7AF\\u2019 \\-.]{0,69}$",
          "example": "Arthur Ignatius",
          "x-risk-personal-data-field": "PASSENGER_NAME"
        },
        "middleName": {
          "description": "Considered only for regulatory details Individual middle name.If the person has middle name, middle name should be added here (e.g. Ignatius)",
          "type": "string",
          "pattern": "^[A-Za-z \\-.]{0,30}$",
          "example": "Ignatius",
          "x-risk-personal-data-field": "PASSENGER_NAME"
        },
        "lastName": {
          "description": "Individual last name.  When using nameType=universal, only ASCII characters are accepted ([a-zA-Z ]+) for both lastName and firstName The number of characters allowed for last name in regulatory details may differ upon configuration.",
          "type": "string",
          "pattern": "^ {0}[A-Za-z\\u00C0-\\u1FFF\\u3040-\\uD7AF][A-Za-z\\u00C0-\\u1FFF\\u3040-\\uD7AF\\u2019 \\-.]{0,69}$",
          "example": "Holmes",
          "x-risk-personal-data-field": "PASSENGER_NAME"
        },
        "title": {
          "description": "Individual title (MR Mister ...)",
          "type": "string",
          "example": "Dr",
          "pattern": "[a-zA-Z -]{1,20}",
          "x-risk-personal-data-field": "PASSENGER_TITLE"
        },
        "nameType": {
          "description": "Type of the name provided: - Universal (supporting only ASCII characters) - Native (supporting all Unicode characters) - Romanized - this corresponds to the romanized version (in ASCII characters) of a native name. This type of name is only used in output (i.e. at Order retrieve).\n",
          "type": "string",
          "enum": [
            "universal",
            "native",
            "romanized"
          ],
          "default": "universal"
        },
        "isPreferred": {
          "description": "flag indicating if the current name is the preferred name. \nIf only one name should be used (e.g. for the display or order creation), this name is the preferred one.\nReturned only for traveler details.\n",
          "type": "boolean"
        }
      },
      "x-api-ref": "Name"
    },
    "NameCommon": {
      "type": "object",
      "description": "Simple name information",
      "properties": {
        "firstName": {
          "description": "Individual first name.   If person has middle name both first and middle name should be added here (e.g. Arthur Ignatius) When creating/updating regulatory details, only first name can be added here.(e.g. Arthur) When using nameType=universal, only ASCII characters are accepted ([a-zA-Z ]+) for both lastName and firstName\nThe number of characters allowed for first name in regulatory details may differ upon configuration.",
          "type": "string",
          "pattern": "^ {0}[A-Za-z\\u00C0-\\u1FFF\\u3040-\\uD7AF][A-Za-z\\u00C0-\\u1FFF\\u3040-\\uD7AF\\u2019 \\-.]{0,69}$",
          "example": "Arthur Ignatius",
          "x-risk-personal-data-field": "PASSENGER_NAME"
        },
        "lastName": {
          "description": "Individual last name.  When using nameType=universal, only ASCII characters are accepted ([a-zA-Z ]+) for both lastName and firstName\nThe number of characters allowed for last name in regulatory details may differ upon configuration.",
          "type": "string",
          "pattern": "^ {0}[A-Za-z\\u00C0-\\u1FFF\\u3040-\\uD7AF][A-Za-z\\u00C0-\\u1FFF\\u3040-\\uD7AF\\u2019 \\-.]{0,69}$",
          "example": "Holmes",
          "x-risk-personal-data-field": "PASSENGER_NAME"
        },
        "title": {
          "description": "Individual title",
          "type": "string",
          "example": "Mr, Dr",
          "pattern": "[a-zA-Z -]{1,20}",
          "x-risk-personal-data-field": "PASSENGER_TITLE"
        }
      },
      "x-api-ref": "NameCommon"
    },
    "NameInEntitlementDocument": {
      "type": "object",
      "description": "Name structure that includes a second last name, which is used in certain countries like Spain",
      "required": [
        "firstName",
        "lastName"
      ],
      "properties": {
        "firstName": {
          "description": "Individual first name. If the person has middle names, both first and middle name should be added here (e.g. Arthur Ignatius)",
          "type": "string",
          "example": "Arthur Ignatius",
          "pattern": "^[A-Za-z\\u0080-\\u04FF][A-Za-z\\u0080-\\u04FF\\u2019 -.]{0,109}$",
          "x-risk-personal-data-field": "PASSENGER_NAME"
        },
        "lastName": {
          "type": "string",
          "example": "Holmes",
          "pattern": "^[A-Za-z\\u0080-\\u04FF][A-Za-z\\u0080-\\u04FF\\u2019 -.]{1,109}$",
          "x-risk-personal-data-field": "PASSENGER_NAME"
        },
        "secondLastName": {
          "type": "string",
          "example": "Holmes",
          "pattern": "^[A-Za-z\\u0080-\\u04FF][A-Za-z\\u0080-\\u04FF\\u2019 -.]{1,109}$",
          "x-risk-personal-data-field": "PASSENGER_NAME"
        }
      },
      "x-api-ref": "NameInEntitlementDocument"
    },
    "NameRegulatory": {
      "type": "object",
      "description": "Simple identity information, with major information only",
      "properties": {
        "firstName": {
          "description": "Individual first name.   If person has middle name both first and middle name should be added here (e.g. Arthur Ignatius) When creating/updating regulatory details, only first name can be added here.(e.g. Arthur) When using nameType=universal, only ASCII characters are accepted ([a-zA-Z ]+) for both lastName and firstName\nThe number of characters allowed for first name in regulatory details may differ upon configuration.",
          "type": "string",
          "pattern": "^[A-Za-z \\-.]{0,30}$",
          "example": "Arthur Ignatius",
          "x-risk-personal-data-field": "PASSENGER_NAME"
        },
        "middleName": {
          "description": "Considered only for regulatory details Individual middle name.If the person has middle name, middle name should be added here (e.g. Ignatius)",
          "type": "string",
          "pattern": "^[A-Za-z \\-.]{0,30}$",
          "example": "Ignatius",
          "x-risk-personal-data-field": "PASSENGER_NAME"
        },
        "lastName": {
          "description": "Individual last name.  When using nameType=universal, only ASCII characters are accepted ([a-zA-Z ]+) for both lastName and firstName The number of characters allowed for last name in regulatory details may differ upon configuration.",
          "type": "string",
          "pattern": "^[A-Za-z \\-.]{0,30}$",
          "example": "Holmes",
          "x-risk-personal-data-field": "PASSENGER_NAME"
        },
        "title": {
          "description": "Individual title (MR Mister ...)",
          "type": "string",
          "example": "Dr",
          "pattern": "[a-zA-Z -]{1,20}",
          "x-risk-personal-data-field": "PASSENGER_TITLE"
        },
        "nameType": {
          "description": "Type of the name provided: - Universal (supporting only ASCII characters) - Native (supporting all Unicode characters) - Romanized - this corresponds to the romanized version (in ASCII characters) of a native name. This type of name is only used in output (i.e. at Order retrieve).\n",
          "type": "string",
          "enum": [
            "universal",
            "native",
            "romanized"
          ],
          "default": "universal"
        },
        "isPreferred": {
          "description": "flag indicating if the current name is the preferred name. \nIf only one name should be used (e.g. for the display or order creation), this name is the preferred one.\nReturned only for traveler details.\n",
          "type": "boolean"
        }
      },
      "x-api-ref": "NameRegulatory"
    },
    "NonEligibilityReason": {
      "type": "object",
      "description": "Non eligibility reason\n",
      "properties": {
        "code": {
          "description": "A code specific to the reason",
          "type": "string"
        },
        "title": {
          "description": "A title specific to the reason",
          "type": "string"
        }
      },
      "x-api-ref": "NonEligibilityReason"
    },
    "NotificationFromJourneyRequest": {
      "type": "object",
      "description": "The request for a notification.\n",
      "properties": {
        "journeyId": {
          "description": "Journey Id for which the notification should be done",
          "type": "string"
        },
        "lang": {
          "description": "Code of the preferred language to be used, e.g. en-GB for English-United Kingdom. [For more details](http://www.lingoes.net/en/translator/langcode.htm)",
          "type": "string",
          "pattern": "[a-zA-Z0-9-]{2,5}"
        },
        "layoutId": {
          "description": "Identifier of the layout to be used as a structure for the notification.  The layout needs to be defined in the Amadeus Format And Delivery system.",
          "type": "string"
        },
        "contactIds": {
          "description": "List of contactIds from the journey provided in the input, for which the notification needs to be sent.",
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "[a-zA-Z0-9-]{1,20}"
          }
        }
      },
      "x-api-ref": "NotificationFromJourneyRequest"
    },
    "NotificationIdentity": {
      "type": "object",
      "description": "The identity of a notification.\n",
      "required": [
        "contentType",
        "format"
      ],
      "properties": {
        "contentType": {
          "type": "string",
          "description": "The content type of the notification. Possible content types are: \n- ``travelDocumentReceipt``\nA receipt containing all travel documents in this order, also referred to as ITR/EPR. It can be used as a purchase confirmation document.\n- ``itinerary``\nThe itinerary shows a detailed information about the trip in this order.\n- ``invoice``\nThe invoice  is a commercial document for record keeping and accounting.  It contains a basic itinerary and details all purchased travel documents with prices.\n",
          "enum": [
            "travelDocumentReceipt",
            "itinerary",
            "invoice"
          ]
        },
        "format": {
          "type": "string",
          "description": "The format of the notification. Possible formats are: \n- ``email``\nAn email containing the requested contentType will be sent. \n- ``link``\nThe content will be created at a dedicated URL. Please note that not only travelDocumentReceipt currently supports this format.\n",
          "enum": [
            "email",
            "link"
          ]
        }
      },
      "x-api-ref": "NotificationIdentity"
    },
    "NotificationRequest": {
      "type": "object",
      "description": "The request for a notification.\n",
      "allOf": [
        {
          "$ref": "#/definitions/NotificationIdentity"
        },
        {
          "type": "object",
          "properties": {
            "contactIds": {
              "description": "List of to contactIds from this cart or order to use for notification by email.",
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "[a-zA-Z0-9-]{1,20}"
              }
            }
          }
        }
      ],
      "x-api-ref": "NotificationRequest"
    },
    "NotificationResult": {
      "type": "object",
      "description": "The status of a notification.\n",
      "allOf": [
        {
          "$ref": "#/definitions/NotificationIdentity"
        },
        {
          "type": "object",
          "required": [
            "status"
          ],
          "properties": {
            "status": {
              "type": "string",
              "description": "The status of the notification. Possible content types are: \n- ``sent``: The requested notification by email was successfully sent.\n- ``created``: The requested document was successfully created at the given Url.\n- ``error``: The requested notification failed, please refer to the message property for a detailed reason.\n",
              "enum": [
                "sent",
                "created",
                "error"
              ]
            },
            "message": {
              "type": "string",
              "description": "This message details the reason for a failure when processing a notification. \n"
            },
            "link": {
              "description": "This link shows the URL to the content that was requested by the notification. \n",
              "$ref": "#/definitions/Url"
            }
          }
        }
      ],
      "x-api-ref": "NotificationResult"
    },
    "NotificationResultListReply": {
      "type": "object",
      "description": "Reply containing a list of notification results",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NotificationResult"
              }
            }
          }
        }
      ],
      "x-api-ref": "NotificationResultListReply"
    },
    "Office": {
      "type": "object",
      "description": "An identifier for a corporate user of a computer reservation system or global distribution system, typically an airline agency, also known as office ID.",
      "properties": {
        "officeId": {
          "description": "Contains the office id value\n",
          "type": "string",
          "pattern": "[a-zA-Z0-9]{9}"
        },
        "location": {
          "description": "Description of a particular point or place in physical space to which the office ID belongs",
          "$ref": "#/definitions/Location"
        }
      },
      "x-api-ref": "Office"
    },
    "OfficeMask": {
      "description": "Representation of an office or a set of offices.",
      "type": "object",
      "properties": {
        "mask": {
          "description": "Expression defining the set of offices. All offices matching this mask  will be considered. Wildcard can be used.\nIt may be one the following:\n- a complete office ID (e.g. LON6X0100)\n- a partial office id (e.g. ***6X0***, LON6X0***, ***6X0100)\n- only wildcards (e.g. *********)\n- wildcards for the corporate code (LON**0100)\n- wildcards for the qualifier code (e.g. LON6X*100)\n- Any kind of wildcards for the Office number (e.g. LON6X010*, LON6X01**, LON6X0***).",
          "type": "string",
          "format": "[A-Z0-9*]{9}"
        },
        "includeFamilyOffices": {
          "description": "The airline can group several offices and define it as a family of offices in Amadeus System (through Amadeus Extended Ownership - EOS).\nThis option allows the airline to apply the permission of an office to all the offices of his family.",
          "type": "boolean"
        }
      },
      "x-api-ref": "OfficeMask"
    },
    "OpeningHours": {
      "type": "object",
      "properties": {
        "dayCode": {
          "type": "integer",
          "description": "Day codes. Examples: 0 for Sunday, 1 for Monday, 2 for Tuesday etc",
          "minimum": 0,
          "maximum": 6
        },
        "timeMode": {
          "type": "string",
          "description": "localTime in requested pick-up location time zone, pickTime in agency pick-up location time zone, dropOffTime in agency drop-off location time zone",
          "enum": [
            "pickUpTime",
            "localTime",
            "dropOffTime"
          ]
        },
        "beginTime": {
          "type": "string",
          "description": "Car location opening time on the format hh:mm e.g. 8:30"
        },
        "endTime": {
          "type": "string",
          "description": "Car location closing time on the format hh:mm e.g. 18:30"
        }
      },
      "x-api-ref": "OpeningHours"
    },
    "OptionalPaymentRequest": {
      "type": "object",
      "description": "A payment request contains: - the payment method to use for the payment - the amount and currency to be paid using that method Supported payment methods are: MilesPayment, PaymentCard, ExternalPayment or VoucherPayment.",
      "properties": {
        "paymentMethod": {
          "description": "PaymentMethod used for this part of the payment",
          "$ref": "#/definitions/PaymentMethod"
        },
        "amount": {
          "description": "Amount to be paid for this part of the payment",
          "$ref": "#/definitions/Amount"
        }
      },
      "x-api-ref": "OptionalPaymentRequest"
    },
    "Order": {
      "type": "object",
      "description": "List of items that are confirmed at the cart checkout. It corresponds to the final phase of a booking",
      "required": [
        "creationDateTime",
        "id"
      ],
      "properties": {
        "id": {
          "description": "Order id (record locator)",
          "type": "string",
          "x-risk-personal-data-field": "PNR_RECORD_LOCATOR"
        },
        "numericId": {
          "description": "Numeric Order id (numeric record locator)",
          "type": "string",
          "pattern": "[0-9]{12}",
          "x-risk-personal-data-field": "PNR_RECORD_LOCATOR"
        },
        "creationPointOfSale": {
          "$ref": "#/definitions/CreationPointOfSale"
        },
        "servicingPointOfSale": {
          "description": "Point of sale to use for subsequent calls to the API.",
          "$ref": "#/definitions/PointOfSale"
        },
        "creationDateTime": {
          "description": "Creation date of the order in GMT (Example: 2018-02-10T20:40:12Z)",
          "type": "string",
          "format": "date-time"
        },
        "lastModificationDateTime": {
          "description": "Last modification date of the order in GMT (Example: 2018-02-10T20:40:12Z)",
          "type": "string",
          "format": "date-time"
        },
        "expirationDateTime": {
          "description": "Expiration date of the order in GMT (Example: 2018-02-10T20:40:12Z). Will be deprecated in V3, please rather use Payment Time Limit / Issuance Time Limit.",
          "type": "string",
          "format": "date-time"
        },
        "paymentTimeLimit": {
          "description": "'This corresponds to the time limit for the payment of an unpaid order (this field is returned only when there is no payment already done for the order).\n If not paid before this time, the order will be canceled.\n The time limit is provided in the timezone of the departure city'",
          "type": "string",
          "format": "date-time",
          "example": "2018-02-10T20:40:12Z"
        },
        "issuanceTimeLimit": {
          "description": "'This corresponds to the time limit for the issuance of travel documents (tickets) associated to this order.\n If travel document(s) are not issued by this time the order will be cancelled.\n The time limit is provided in the timezone of the departure city.'",
          "type": "string",
          "format": "date-time",
          "example": "2018-02-10T20:40:12Z"
        },
        "isGroupBooking": {
          "type": "boolean",
          "description": "Flag indicating if the order is a booking for a group. In such case, the order information is filtered according to a specific passenger."
        },
        "nonAirContent": {
          "type": "boolean",
          "description": "Flag indicating if the order contains some products other than AIR segments (car, hotel, insurance, auxiliary segments other than services)"
        },
        "tags": {
          "type": "array",
          "description": "List of tags available in the PNR header. Only the tags listed in the enumeration are supported\n",
          "items": {
            "type": "string",
            "enum": [
              "domestic",
              "international"
            ]
          }
        },
        "air": {
          "$ref": "#/definitions/OrderAirItem"
        },
        "services": {
          "type": "array",
          "description": "List of services (e.g. baggage, meals...)",
          "items": {
            "$ref": "#/definitions/OrderServiceItem"
          }
        },
        "seats": {
          "type": "array",
          "description": "List of seats (seat selection and associated travelers)",
          "items": {
            "$ref": "#/definitions/OrderSeatItem"
          }
        },
        "miscAncillaries": {
          "type": "array",
          "description": "List of ancillaries other than seats and services (e.g. exchange penalty)",
          "items": {
            "$ref": "#/definitions/OrderMiscellaneousAncillaryItem"
          }
        },
        "travelers": {
          "type": "array",
          "description": "Travelers taking part in the journey",
          "items": {
            "$ref": "#/definitions/Traveler"
          }
        },
        "frequentFlyerCards": {
          "type": "array",
          "description": "Frequent flyer cards used to redeem or accrue miles",
          "items": {
            "$ref": "#/definitions/FrequentFlyerCard"
          }
        },
        "contacts": {
          "type": "array",
          "description": "Emails, phone numbers and addresses",
          "items": {
            "$ref": "#/definitions/Contact"
          }
        },
        "formOfIdentifications": {
          "type": "array",
          "description": "List of form of identifications",
          "items": {
            "$ref": "#/definitions/FormOfIdentificationDetail"
          }
        },
        "travelDocuments": {
          "type": "array",
          "description": "Travel documents (e-tickets and service-related documents)",
          "items": {
            "$ref": "#/definitions/TravelDocument"
          }
        },
        "travelDocumentsWithLimitedAccess": {
          "type": "array",
          "description": "Travel Documents with limited access.  Only few information are available like id, documentType, flightIds, travelerIds, status.  Actions like refund or exchange are not possible on these documents.",
          "items": {
            "$ref": "#/definitions/TravelDocument"
          }
        },
        "remarks": {
          "type": "array",
          "description": "Remarks (RM) stored in the order",
          "items": {
            "$ref": "#/definitions/Remark"
          }
        },
        "otherServiceInformations": {
          "type": "array",
          "description": "Other service information elements (OSI) stored in the order",
          "items": {
            "$ref": "#/definitions/OtherServiceInformation"
          }
        },
        "specialKeywords": {
          "type": "array",
          "description": "Special Keyword elements (SK) stored in the order",
          "items": {
            "$ref": "#/definitions/SpecialKeyword"
          }
        },
        "specialServiceRequests": {
          "type": "array",
          "description": "Special Services Request (SSR) stored in the order",
          "items": {
            "$ref": "#/definitions/SpecialServiceRequest"
          }
        },
        "fareElements": {
          "type": "array",
          "description": "Generic fare elements or fare remarks stored in the order. Only some types are available like the tour code (FT).",
          "items": {
            "$ref": "#/definitions/FareElement"
          }
        },
        "paymentRecords": {
          "type": "array",
          "description": "List of payment records stored in the order",
          "items": {
            "$ref": "#/definitions/PaymentRecord"
          }
        },
        "associateOrderIds": {
          "type": "array",
          "description": "List of orders associated to current order. E.g. The PNR has been split in two, in order to separate some of the passengers to a new reservation.",
          "items": {
            "type": "string"
          },
          "x-risk-personal-data-field": "PNR_RECORD_LOCATOR"
        },
        "orderEligibilities": {
          "$ref": "#/definitions/OrderEligibilities"
        },
        "orderItemEligibilities": {
          "type": "array",
          "description": "Order item eligibilities are generic eligibilities, computed via airline  defined rules.",
          "items": {
            "$ref": "#/definitions/OrderItemEligibility"
          }
        },
        "notifications": {
          "type": "array",
          "description": "List of result of each notification sent for this order.",
          "items": {
            "$ref": "#/definitions/NotificationResult"
          }
        },
        "insurances": {
          "type": "array",
          "description": "List of Insurance (INS) details booked in Order",
          "items": {
            "$ref": "#/definitions/InsuranceItem"
          }
        },
        "hotels": {
          "type": "array",
          "description": "List of Hotel (HHL) details booked in Order",
          "items": {
            "$ref": "#/definitions/HotelItem"
          }
        },
        "cars": {
          "type": "array",
          "description": "List of Car details booked in Order",
          "items": {
            "$ref": "#/definitions/CarItem"
          }
        }
      },
      "x-api-ref": "Order"
    },
    "OrderAirBoundExchangesResponse": {
      "type": "object",
      "description": "Reply containing either:\n* an order with committed changes after flight exchange\n* or an order changes with content of the order under changed\n",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/OrderAirBoundExchangesResponseData"
            },
            "dictionaries": {
              "$ref": "#/definitions/OrderDictionary"
            }
          }
        }
      ],
      "x-api-ref": "OrderAirBoundExchangesResponse"
    },
    "OrderAirBoundExchangesResponseData": {
      "type": "object",
      "description": "Reply containing either:\n* an order with committed changes after flight exchange\n* or an orderChange containing (only) the changes to be committed\n",
      "properties": {
        "orderChange": {
          "$ref": "#/definitions/OrderChange"
        },
        "order": {
          "$ref": "#/definitions/Order"
        }
      },
      "x-api-ref": "OrderAirBoundExchangesResponseData"
    },
    "OrderAirExchangeRequest": {
      "type": "object",
      "description": "Request to perform exchange of flights in an order",
      "properties": {
        "airBoundIds": {
          "type": "array",
          "description": "List of bounds' identifiers corresponding to the new flights to be exchanged in the order.\nThese identifiers are generated while using the entry point POST /search/air-bound-exchanges\n",
          "items": {
            "type": "string"
          }
        },
        "remarks": {
          "type": "array",
          "description": "Remarks (RM) to be inserted in the order",
          "items": {
            "$ref": "#/definitions/Remark"
          }
        },
        "otherServiceInformations": {
          "type": "array",
          "description": "Other service information elements (OSI) to be inserted in the order",
          "items": {
            "$ref": "#/definitions/OtherServiceInformation"
          }
        },
        "specialKeywords": {
          "type": "array",
          "description": "Special Keyword elements (SK) to be inserted in the order",
          "items": {
            "$ref": "#/definitions/SpecialKeyword"
          }
        },
        "specialServiceRequests": {
          "type": "array",
          "description": "Special Services Request(SSR) stored in the order",
          "items": {
            "$ref": "#/definitions/SpecialServiceRequest"
          }
        },
        "regulatoryDetails": {
          "type": "array",
          "description": "List of regulatory details to add for all passenger\n",
          "items": {
            "$ref": "#/definitions/PassengerRegulatoryApisDetail"
          }
        },
        "paymentRequests": {
          "type": "array",
          "description": "List of payment requests to be used to pay the resulting amount to be paid following bound exchange \n",
          "items": {
            "$ref": "#/definitions/PaymentWithAssociationRequest"
          }
        },
        "userNotifications": {
          "type": "array",
          "description": "User-notifications to be sent after the successful payment and/or issuance of the order (driven by airline configuration)",
          "items": {
            "$ref": "#/definitions/UserNotificationRequest"
          }
        }
      },
      "x-api-ref": "OrderAirExchangeRequest"
    },
    "OrderAirItem": {
      "type": "object",
      "description": "Air item containing bounds information",
      "properties": {
        "id": {
          "description": "Identifier of the resource",
          "type": "string"
        },
        "fareFamilyCode": {
          "type": "string",
          "x-dictionary-name": "fareFamilyWithServices",
          "x-field-name": "fareFamily",
          "x-field-type": "FareFamilyWithServicesDictionaryItem"
        },
        "prices": {
          "$ref": "#/definitions/MultiCurrencyAirPricingRecords"
        },
        "travelerIds": {
          "type": "array",
          "description": "Travelers associated to the air item",
          "items": {
            "type": "string"
          }
        },
        "bounds": {
          "description": "Itinerary (bounds)",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Bound"
          }
        },
        "fareInfos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FareInfoOrder"
          }
        },
        "freeCheckedBaggageAllowanceItems": {
          "description": "Free baggage allowance definitions corresponding to the flights in the Order",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FreeCheckedBaggageAllowanceItem"
          }
        },
        "fareDiscounts": {
          "description": "Fare discounts elements stored in the order (FD PNR elements).",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FareDiscount"
          }
        }
      },
      "x-api-ref": "OrderAirItem"
    },
    "OrderAppliedRefundOptionsItem": {
      "description": "Detail of the refund option for an air travel document (aka flight e-ticket).  It contains the flight e-ticket number, its refund status, the amounts that will be refunded and the refund penalty if applicable.  \nThe status at flight e-ticket level can have the following values:\n- refunded\n- pendingManualRefund\n- notRefundable\n\nNote: Only e-tickets with status refundable returns refund amounts and penalty.",
      "type": "object",
      "required": [
        "travelDocumentId",
        "documentType",
        "status"
      ],
      "properties": {
        "travelDocumentId": {
          "description": "Travel Document number (e.g. 220-1638074788)",
          "type": "string",
          "x-risk-personal-data-field": "AIRLINE_TICKET_NUMBER"
        },
        "documentType": {
          "description": "It specifies if the document is the record generated when confirming flights (documentType =  eticket),\nor is used for for travel related services, such as excess baggage charges, miscellaneous charges, penalty fees, residual value, lounge access charges, etc.. (documentType =  service),\nor is used for third party contents, such as hotel",
          "type": "string",
          "enum": [
            "eticket",
            "services",
            "hotel"
          ]
        },
        "hotelId": {
          "description": "Id of the requested hotel",
          "type": "string"
        },
        "travelerIds": {
          "type": "array",
          "description": "Traveler ids the element is associated with",
          "items": {
            "type": "string",
            "pattern": "[a-zA-Z0-9-]{1,20}"
          }
        },
        "serviceIds": {
          "type": "array",
          "description": "Service ids the element is associated with",
          "items": {
            "type": "string",
            "pattern": "[a-zA-Z0-9-]{1,50}"
          }
        },
        "seatIds": {
          "type": "array",
          "description": "Seat ids the element is associated with",
          "items": {
            "type": "string",
            "pattern": "[a-zA-Z0-9-:]{1,50}"
          }
        },
        "status": {
          "description": "Describes the status of the refund option.\n\nFor flights, the refund status can have the following possible values:\n- refunded\n- pendingManualRefund\n- notRefundable\n\nFor hotels, the status is either refundable or notRefundable.",
          "type": "string",
          "enum": [
            "refunded",
            "pendingManualRefund",
            "notRefundable",
            "refundable"
          ]
        },
        "refundType": {
          "description": "Specifies if the refund option provided to the api user is an involuntary refund.\nAn involuntary refund can be proposed by the airline if the order has been disrupted and the airline has contracted the product.",
          "type": "string",
          "enum": [
            "involuntary"
          ]
        },
        "refundAmounts": {
          "description": "Refund amounts for one flight e-ticket",
          "$ref": "#/definitions/OrderRefundAmounts"
        },
        "paidAmount": {
          "description": "Breakdown of the amount paid by the traveller and considered during the calculation of the refund amounts.\nThe breakdown is today limited to base fare and taxes of the flight tickets.",
          "$ref": "#/definitions/OrderPaidAmount"
        },
        "usedAmount": {
          "description": "Amount already used by the traveller.\nFor example, if the traveller flew already his outbound flight, the value of the outbound is considered as used and usually not to be refunded.\nThe breakdown is today limited to base fare and taxes of the flight tickets.",
          "$ref": "#/definitions/OrderUsedAmount"
        },
        "penalty": {
          "description": "Refund penalty amount for one flight e-ticket",
          "$ref": "#/definitions/Amount"
        },
        "paymentDetails": {
          "type": "array",
          "description": "Details on the refunded form of payment. Returned sub-structures are 'paymentMethod', 'amount'.",
          "items": {
            "$ref": "#/definitions/PaymentTransaction"
          }
        },
        "refundNotifications": {
          "type": "array",
          "description": "Details about the different refund notification(s) processed during the cancellation.",
          "items": {
            "$ref": "#/definitions/OrderRefundNotificationData"
          }
        },
        "waiverCode": {
          "type": "string",
          "description": "Waiver code applicable for the given travel-document. All amounts mentioned above are  already considering this waiver."
        }
      },
      "x-api-ref": "OrderAppliedRefundOptionsItem"
    },
    "OrderCancelAndRefundData": {
      "description": "Return the refund conditions per air travel document (aka flight e-ticket) applied to the order:\n - refundOptions: detail of the refund conditions for each flight e-ticket. It contains the flight e-ticket number, \nthe refund status at flight e-ticket level, the amounts that will be refunded and the refund penalty if applicable.\nIt is also used for hotel refund informative flow.\nThe status at flight e-ticket level can have the following values: - refunded - pendingManualRefund - notRefundable - refundable\nThe status at hotel refund informative level can have the following values: - notRefundable - refundable",
      "type": "object",
      "required": [
        "orderId",
        "refundOptions"
      ],
      "properties": {
        "orderId": {
          "description": "Order id (record locator)",
          "type": "string",
          "pattern": "[a-zA-Z0-9]{6}",
          "x-risk-personal-data-field": "PNR_RECORD_LOCATOR"
        },
        "createdOrderId": {
          "description": "Contains the id of the newly created Order after the Order has been split when cancel & refund is performed for a subset of travelers (travelerIds provided in the request) ",
          "type": "string",
          "pattern": "[a-zA-Z0-9]{6}",
          "x-risk-personal-data-field": "PNR_RECORD_LOCATOR"
        },
        "refundOptions": {
          "type": "array",
          "description": "List of refund options for each flight e-ticket",
          "items": {
            "$ref": "#/definitions/OrderAppliedRefundOptionsItem"
          }
        },
        "links": {
          "type": "array",
          "description": "List of links related to the cancel and refund. \n          \nUsed to reference the original order ('rel' value = updatedOrder)and  the new created order ('rel' value = createdOrder) when the cancel and refund is performed for a subset of travelers (travelerIds provided in the request) ",
          "items": {
            "$ref": "#/definitions/HttpRequest"
          }
        }
      },
      "x-api-ref": "OrderCancelAndRefundData"
    },
    "OrderCancelAndRefundDictionary": {
      "type": "object",
      "description": "Order cancel and refund dictionary",
      "properties": {
        "currency": {
          "type": "object",
          "description": "Currencies map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
          "additionalProperties": {
            "$ref": "#/definitions/CurrencyDictionaryItem"
          }
        }
      },
      "x-api-ref": "OrderCancelAndRefundDictionary"
    },
    "OrderCancelAndRefundEligibility": {
      "description": "Eligibility for 'cancelAndRefund' describes the possibility to cancel the booked flights and refund partially/fully the paid amount. \nThe eligibility is computed on flight e-tickets. EMDs can be considered if Amadeus Service Changer has been contracted and activated by the airline.\nInsurance, car, hotel elements are not refunded automatically by the API. A warning will be returned indicating the presence  of these elements in the Order.      \nThe result for the targetAction 'cancelAndRefund' contains:\n * The possibility to cancel the itinerary and get refunded\n * a `refundStatus`: it describes the consolidated status at Order level. Three possible values:\n   * refundable:  at least one flight e-ticket is refundable and the API user will be able to call the refund entry point.\n   * notRefundable\n   * manuallyRefundable: it means some flight e-tickets may be refundable, but it would need to be processed offline by an agent. \n   The API user can call the cancellation entry point to perform the refund, the Order will be queued in the manual refund queue, so an agent takes care of the refund manually (no need for the end user to call customer service).\n * one or several `refundOptions`: detail of the refund eligibility for each flight e-ticket. It contains the e-ticket number, the refund status at e-ticket level, the amounts to refund and the refund penalty if applicable.\n\nThe status at e-ticket level can have the following values:\n * refundable\n * notRefundable\n * manuallyRefundable: the e-ticket cannot be refunded automatically by the API. However, the e-ticket can be refunded manually by an airline agent. \nThis may happen when the e-ticket is not eligible for automatic refund or there was an error during the refund eligibility call to the Ticketing Server.\n * unavailable: this status is returned when there is an error during the computation of the eligibility.\n\nIf the eligibility is returned as false, the API provides a reason code and title regarding the restriction. The possible reasons are:\n| Code      | Title                                                                                          |\n|:---------:|:----------------------------------------------------------------------------------------------:|\n| 001       | ATC Voluntary Refund not allowed.                                                              |\n| 002       | Refund for this PNR has already been requested.                                                |\n| 003       | Paper ticket indicator(PT) present in PNR.                                                     |\n| 004       | TKNE element(s) present but parsing is not allowed.                                            |\n| 006       | No e-tickets eligible for refund were found.                                                   |\n| 007       | A group PNR can not be refunded.                                                               |\n| 008       | At least one of the passengers is not present in PNR.                                          |\n| 009       | Disjoint tickets are configured as not eligible for refund.                                    |\n| 010       | The PNR has been booked with several credit cards.                                             |\n| 011       | Refund of a PNR referencing an companion PNR is not allowed (SPONSOR_PNR).                     |\n| 012       | Refund of a PNR referencing an companion PNR is not allowed (COMPANION_PNR).                   |\n| 013       | Refund of a PNR with at least a passenger boarded is not allowed.                              |\n| 014       | Refund of a PNR with at least a baggage dropped is not allowed.                                |\n| 015       | Order checked-in.                                                                              |\n| 017       | Mode of Payment Miles&Cash IRUv2 not eligible for refund.                                      |\n| 018       | Exchanged PNR are configured as not eligible for refund.                                       |\n| 019       | \\<details about the form of payment not eligible (e.g. 'PaymentCard not allowed for refund')\\> |\n| 022       | Unable to execute ticket offload command: <error details>                                      |\n| RULE-xxx  | \\<message defined in the business rule\\>                                                       |\nIn case the refund is involuntary, the following reason code can be mapped:\n| Code  | Title                                            |\n|-------|--------------------------------------------------|\n| 001     | ATC Refund not allowed                           |\n| 002     | Refund for this PNR has already been requested.  |\n| 009     | Disjoint tickets are configured as not eligible for refund.       |\n| 013    | Refund of a PNR with at least a passenger boarded is not allowed. |\n| 014    | Refund of a PNR with at least a baggage dropped is not allowed.   |\n| RULE-xxx     | Title can be customized by the airline thanks to a business rule. `xxx` is a code customizable by the airline in the business rule.  |\nIf the reason code for non eligibility starts with RULE-, the eligibility is blocked by a business rule defined by the airline. ",
      "type": "object",
      "required": [
        "refundStatus"
      ],
      "properties": {
        "refundStatus": {
          "description": "Describes the consolidated refund status at Order level. Three possible values: refundable, notRefundable and manuallyRefundable.",
          "type": "string",
          "enum": [
            "refundable",
            "notRefundable",
            "manuallyRefundable"
          ]
        },
        "nonEligibilityReasons": {
          "description": "List of reasons why the order cannot be refunded by the API",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NonEligibilityReason"
          }
        },
        "refundOptions": {
          "type": "array",
          "description": "List of refund options for each travel document (e-ticket)",
          "items": {
            "$ref": "#/definitions/OrderRefundOptionsItem"
          }
        }
      },
      "x-api-ref": "OrderCancelAndRefundEligibility"
    },
    "OrderCancelAndRefundEligibilityReply": {
      "type": "object",
      "description": "Reply containing the eligibility refund information of an order.",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/OrderCancelAndRefundEligibility"
            },
            "dictionaries": {
              "$ref": "#/definitions/OrderCancelAndRefundDictionary"
            }
          }
        }
      ],
      "x-api-ref": "OrderCancelAndRefundEligibilityReply"
    },
    "OrderCancelAndRefundReply": {
      "type": "object",
      "description": "Reply containing the refund information of an order.",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/OrderCancelAndRefundData"
            },
            "dictionaries": {
              "$ref": "#/definitions/OrderCancelAndRefundDictionary"
            }
          }
        }
      ],
      "x-api-ref": "OrderCancelAndRefundReply"
    },
    "OrderCancelAndRefundRequest": {
      "type": "object",
      "description": "Request to perform the cancel and refund of an order.",
      "properties": {
        "travelerIds": {
          "type": "array",
          "description": "List of travelers identifier for which the cancel and refund of the order is requested",
          "items": {
            "type": "string",
            "pattern": "[a-zA-Z0-9-]{1,20}"
          }
        },
        "refundOptions": {
          "type": "array",
          "description": "List of refundMethodOption ids to apply. Those ids are returned by /purchase/order-eligibilities, for each eligible ticket. If  no id is provided for a given eligible ticket, the standard  refund applies (refund to original methods of payment).",
          "items": {
            "type": "string",
            "pattern": "[a-zA-Z0-9-]+"
          }
        },
        "refundNotifications": {
          "type": "array",
          "description": "Refund notification(s) to be sent.",
          "items": {
            "$ref": "#/definitions/OrderRefundNotificationRequest"
          }
        }
      },
      "x-api-ref": "OrderCancelAndRefundRequest"
    },
    "OrderCancelEligibility": {
      "description": "This eligibility describes if an order can be canceled online. The order must not have been ticketed and it does  not contain any payment records (even if those payment records are marked as pending  from an external payment). The cancellation will remove all itineraries in the Order as well as all the elements associated to the itinerary  (e.g. seats, services, remarks...).",
      "type": "object",
      "required": [
        "isEligible"
      ],
      "properties": {
        "isEligible": {
          "description": "If true, this order can be cancelled online",
          "type": "boolean",
          "default": false
        }
      },
      "x-api-ref": "OrderCancelEligibility"
    },
    "OrderChange": {
      "type": "object",
      "description": "Order change sub-resource contains the transitional representation of the order under change, i.e. including changes that have been done in the  parent order but not yet committed.\nThis sub-resource has limited life duration and will expire as soon as  the changes are committed and retrofitted in the order.\nThe parent order always contains the latest committed changes.\n      ",
      "allOf": [
        {
          "$ref": "#/definitions/OrderCommon"
        },
        {
          "type": "object",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "string",
              "description": "Identifier of the order change sub-resource",
              "x-risk-personal-data-field": "PNR_RECORD_LOCATOR"
            },
            "orderId": {
              "type": "string",
              "description": "Id of the order being changed",
              "x-risk-personal-data-field": "PNR_RECORD_LOCATOR"
            }
          }
        }
      ],
      "x-api-ref": "OrderChange"
    },
    "OrderChangeConfirmationRequest": {
      "type": "object",
      "description": "Request to perform exchange of flights in an order",
      "properties": {
        "remarks": {
          "type": "array",
          "description": "Remarks (RM) to be inserted in the order",
          "items": {
            "$ref": "#/definitions/Remark"
          }
        },
        "otherServiceInformations": {
          "type": "array",
          "description": "Other service information elements (OSI) to be inserted in the order",
          "items": {
            "$ref": "#/definitions/OtherServiceInformation"
          }
        },
        "specialKeywords": {
          "type": "array",
          "description": "Special Keyword elements (SK) to be inserted in the order",
          "items": {
            "$ref": "#/definitions/SpecialKeyword"
          }
        },
        "specialServiceRequests": {
          "type": "array",
          "description": "Special Services Request(SSR) stored in the order",
          "items": {
            "$ref": "#/definitions/SpecialServiceRequest"
          }
        },
        "userNotifications": {
          "type": "array",
          "description": "User notifications to be sent after the successful payment and/or issuance of the order (driven by airline configuration)",
          "items": {
            "$ref": "#/definitions/UserNotificationRequest"
          }
        }
      },
      "x-api-ref": "OrderChangeConfirmationRequest"
    },
    "OrderChangeCreateRequest": {
      "type": "object",
      "description": "Request to perform an order change creation",
      "allOf": [
        {
          "$ref": "#/definitions/OrderChangeConfirmationRequest"
        },
        {
          "type": "object",
          "properties": {
            "airBoundIds": {
              "type": "array",
              "description": "List of bounds' identifiers corresponding to the new flights to be exchanged in the order.\nThese identifiers are generated while using the entry point POST /search/air-bound-exchanges\n",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ],
      "x-api-ref": "OrderChangeCreateRequest"
    },
    "OrderChangePaymentConfirmRequest": {
      "type": "object",
      "description": "Request to confirm a payment after redirection on an existing order under change.",
      "required": [
        "paymentRequests"
      ],
      "properties": {
        "paymentRequests": {
          "type": "array",
          "description": "A list of payment requests. Each payment request contains a payment method and paymentResumption\ninformation to trigger the confirmation of the payment in the Order.\nOnly AlternativePaymentMethod (to come later) and PaymentCard enrolled for 3D Secure are supported.\n",
          "items": {
            "$ref": "#/definitions/OrderChangePaymentWithAssociationRequest"
          }
        },
        "userNotifications": {
          "type": "array",
          "description": "User-notifications to be sent after the successful payment and/or issuance of the order (driven by airline configuration)",
          "items": {
            "$ref": "#/definitions/UserNotificationRequest"
          }
        }
      },
      "x-api-ref": "OrderChangePaymentConfirmRequest"
    },
    "OrderChangePaymentRequest": {
      "type": "object",
      "description": "Request to perform a payment on an existing order change.",
      "properties": {
        "paymentRequests": {
          "type": "array",
          "description": "A list of payment request. Each payment request contains a payment method, and the amount to be paid using that method.          \n",
          "items": {
            "$ref": "#/definitions/OrderChangePaymentWithAssociationRequest"
          }
        },
        "userNotifications": {
          "type": "array",
          "description": "User-notifications to be sent after the successful payment and/or issuance of the order (driven by airline configuration)",
          "items": {
            "$ref": "#/definitions/UserNotificationRequest"
          }
        }
      },
      "x-api-ref": "OrderChangePaymentRequest"
    },
    "OrderChangePaymentWithAssociationRequest": {
      "type": "object",
      "description": "A payment request contains:\n- the payment method to use for the payment\n- the amount and currency to be paid using that method\nThe payment request will be used to cover any items in the order\nSupported payment methods are: PaymentCard, ExternalPayment (to come later) or AlternativePaymentMethod (to come later).\n",
      "allOf": [
        {
          "$ref": "#/definitions/PaymentRequest"
        },
        {
          "type": "object",
          "properties": {
            "authorization": {
              "description": "Authorization information to be sent in input for redirection flows",
              "$ref": "#/definitions/PaymentAuthorizationInput"
            },
            "payerIdentification": {
              "description": "Payer data to enable fraud detection",
              "$ref": "#/definitions/PayerIdentification"
            }
          }
        }
      ],
      "x-api-ref": "OrderChangePaymentWithAssociationRequest"
    },
    "OrderChangeReply": {
      "type": "object",
      "description": "Reply containing the information of an order change",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/OrderChange"
            },
            "dictionaries": {
              "$ref": "#/definitions/OrderDictionary"
            }
          }
        }
      ],
      "x-api-ref": "OrderChangeReply"
    },
    "OrderCommon": {
      "type": "object",
      "description": "List of common order items",
      "required": [
        "creationDateTime"
      ],
      "properties": {
        "numericId": {
          "description": "Numeric Order id (numeric record locator)",
          "type": "string",
          "pattern": "[0-9]{12}",
          "x-risk-personal-data-field": "PNR_RECORD_LOCATOR"
        },
        "creationPointOfSale": {
          "$ref": "#/definitions/CreationPointOfSale"
        },
        "servicingPointOfSale": {
          "description": "Point of sale to use for subsequent calls to the API.",
          "$ref": "#/definitions/PointOfSale"
        },
        "creationDateTime": {
          "description": "Creation date of the order in GMT (Example: 2018-02-10T20:40:12Z)",
          "type": "string",
          "format": "date-time"
        },
        "lastModificationDateTime": {
          "description": "Last modification date of the order in GMT (Example: 2018-02-10T20:40:12Z)",
          "type": "string",
          "format": "date-time"
        },
        "expirationDateTime": {
          "description": "Expiration date of the order in GMT (Example: 2018-02-10T20:40:12Z)",
          "type": "string",
          "format": "date-time"
        },
        "paymentTimeLimit": {
          "description": "'This corresponds to the time limit for the payment of an unpaid order (this field is returned only when there is no payment already done for the order).\n If not paid before this time, the order will be canceled.\n The time limit is provided in the timezone of the departure city'",
          "type": "string",
          "format": "date-time",
          "example": "2018-02-10T20:40:12Z"
        },
        "issuanceTimeLimit": {
          "description": "'This corresponds to the time limit for the issuance of travel documents (tickets) associated to this order.\n If travel document(s) are not issued by this time the order will be cancelled.\n The time limit is provided in the timezone of the departure city.'",
          "type": "string",
          "format": "date-time",
          "example": "2018-02-10T20:40:12Z"
        },
        "isGroupBooking": {
          "type": "boolean",
          "description": "Flag indicating if the order is a booking for a group. In such case, the order information is filtered according to a specific passenger."
        },
        "nonAirContent": {
          "type": "boolean",
          "description": "Flag indicating if the order contains some products other than AIR segments (car, hotel, insurance, auxiliary segments other than services)"
        },
        "tags": {
          "type": "array",
          "description": "List of tags available in the PNR header. Only the tags listed in the enumeration are supported\n",
          "items": {
            "type": "string",
            "enum": [
              "domestic",
              "international"
            ]
          }
        },
        "air": {
          "$ref": "#/definitions/OrderAirItem"
        },
        "services": {
          "type": "array",
          "description": "List of services (e.g. baggage, meals...)",
          "items": {
            "$ref": "#/definitions/OrderServiceItem"
          }
        },
        "seats": {
          "type": "array",
          "description": "List of seats (seat selection and associated travelers)",
          "items": {
            "$ref": "#/definitions/OrderSeatItem"
          }
        },
        "miscAncillaries": {
          "type": "array",
          "description": "List of ancillaries other than seats and services (e.g. exchange penalty)",
          "items": {
            "$ref": "#/definitions/OrderMiscellaneousAncillaryItem"
          }
        },
        "travelers": {
          "type": "array",
          "description": "Travelers taking part in the journey",
          "items": {
            "$ref": "#/definitions/Traveler"
          }
        },
        "frequentFlyerCards": {
          "type": "array",
          "description": "Frequent flyer cards used to redeem or accrue miles",
          "items": {
            "$ref": "#/definitions/FrequentFlyerCard"
          }
        },
        "contacts": {
          "type": "array",
          "description": "Emails, phone numbers and addresses",
          "items": {
            "$ref": "#/definitions/Contact"
          }
        },
        "formOfIdentifications": {
          "type": "array",
          "description": "List of form of identifications",
          "items": {
            "$ref": "#/definitions/FormOfIdentificationDetail"
          }
        },
        "travelDocuments": {
          "type": "array",
          "description": "Travel documents (e-tickets and service-related documents)",
          "items": {
            "$ref": "#/definitions/TravelDocument"
          }
        },
        "travelDocumentsWithLimitedAccess": {
          "type": "array",
          "description": "Travel Documents with limited access.  Only few information are available like id, documentType, flightIds, travelerIds, status.  Actions like refund or exchange are not possible on these documents.",
          "items": {
            "$ref": "#/definitions/TravelDocument"
          }
        },
        "remarks": {
          "type": "array",
          "description": "Remarks (RM) stored in the order",
          "items": {
            "$ref": "#/definitions/Remark"
          }
        },
        "otherServiceInformations": {
          "type": "array",
          "description": "Other service information elements (OSI) stored in the order",
          "items": {
            "$ref": "#/definitions/OtherServiceInformation"
          }
        },
        "specialKeywords": {
          "type": "array",
          "description": "Special Keyword elements (SK) stored in the order",
          "items": {
            "$ref": "#/definitions/SpecialKeyword"
          }
        },
        "specialServiceRequests": {
          "type": "array",
          "description": "Special Services Request (SSR) stored in the order",
          "items": {
            "$ref": "#/definitions/SpecialServiceRequest"
          }
        },
        "fareElements": {
          "type": "array",
          "description": "Generic fare elements in the PNR.",
          "items": {
            "$ref": "#/definitions/FareElement"
          }
        },
        "paymentRecords": {
          "type": "array",
          "description": "List of payment records stored in the order",
          "items": {
            "$ref": "#/definitions/PaymentRecord"
          }
        },
        "associateOrderIds": {
          "type": "array",
          "description": "List of orders associated to current order. E.g. The PNR has been split in two, in order to separate some of the passengers to a new reservation.",
          "items": {
            "type": "string"
          },
          "x-risk-personal-data-field": "PNR_RECORD_LOCATOR"
        },
        "orderEligibilities": {
          "$ref": "#/definitions/OrderEligibilities"
        },
        "orderItemEligibilities": {
          "type": "array",
          "description": "Order item eligibilities are generic eligibilities, computed via airline  defined rules.",
          "items": {
            "$ref": "#/definitions/OrderItemEligibility"
          }
        },
        "notifications": {
          "type": "array",
          "description": "List of result of each notification sent for this order.",
          "items": {
            "$ref": "#/definitions/NotificationResult"
          }
        },
        "insurances": {
          "type": "array",
          "description": "List of Insurance (INS) details booked in Order",
          "items": {
            "$ref": "#/definitions/InsuranceItem"
          }
        },
        "cars": {
          "type": "array",
          "description": "List of Car details booked in Order",
          "items": {
            "$ref": "#/definitions/CarItem"
          }
        }
      },
      "x-api-ref": "OrderCommon"
    },
    "OrderCommonRequest": {
      "type": "object",
      "description": "Request to perform common/standard operation on an order.",
      "properties": {
        "remarks": {
          "type": "array",
          "description": "Remarks (RM) to be inserted in the order",
          "items": {
            "$ref": "#/definitions/Remark"
          }
        },
        "otherServiceInformations": {
          "type": "array",
          "description": "Other service information elements (OSI) to be inserted in the order",
          "items": {
            "$ref": "#/definitions/OtherServiceInformation"
          }
        },
        "specialKeywords": {
          "type": "array",
          "description": "Special Keyword elements (SK) to be inserted in the order",
          "items": {
            "$ref": "#/definitions/SpecialKeyword"
          }
        },
        "specialServiceRequests": {
          "type": "array",
          "description": "Special Services Request(SSR) stored in the order",
          "items": {
            "$ref": "#/definitions/SpecialServiceRequest"
          }
        }
      },
      "x-api-ref": "OrderCommonRequest"
    },
    "OrderDictionary": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/FlightDictionary"
        },
        {
          "type": "object",
          "properties": {
            "insuranceProvider": {
              "type": "object",
              "description": "Reference to InsuranceProvider dictionary",
              "additionalProperties": {
                "$ref": "#/definitions/InsuranceProviderDictionaryItem"
              }
            },
            "fareFamily": {
              "type": "object",
              "description": "Fare families map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "$ref": "#/definitions/FareFamilyDictionaryItem"
              }
            },
            "fareFamilyWithServices": {
              "type": "object",
              "description": "Fare families with services map. For more details please see [Maps in dictionary documentation] (https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "$ref": "#/definitions/FareFamilyWithServicesDictionaryItem"
              }
            },
            "service": {
              "type": "object",
              "description": "Services map. For more details please see [Maps in dictionary documentation] (https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "$ref": "#/definitions/ServiceDictionaryItem"
              }
            },
            "tax": {
              "type": "object",
              "description": "Taxes map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "type": "string"
              }
            },
            "surcharge": {
              "type": "object",
              "description": "Surcharges map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "type": "string"
              }
            },
            "currency": {
              "type": "object",
              "description": "Currencies map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "$ref": "#/definitions/CurrencyDictionaryItem"
              }
            },
            "seatCharacteristic": {
              "type": "object",
              "description": "Seat characteristics map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "$ref": "#/definitions/SeatCharacteristicDictionaryItem"
              }
            },
            "specialServiceRequest": {
              "type": "object",
              "description": "Special service requests map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "$ref": "#/definitions/SpecialServiceRequestDictionaryItem"
              }
            },
            "bookingStatus": {
              "type": "object",
              "description": "Status map for flights, services, seats and special service requests. For more details please see [Maps in dictionary documentation] (https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "$ref": "#/definitions/BookingStatusDictionaryItem"
              }
            },
            "meal": {
              "type": "object",
              "description": "Status map for meal codes. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "type": "string"
              }
            },
            "waivers": {
              "type": "object",
              "description": "When a flight change is encouraged due to an anticipated disruption, you will will be allowed  to change the flight within the given conditions and the penalty for that flight change is then waived. If a waiver is offered, the conditions for the flight change are described here. [documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "$ref": "#/definitions/DynamicWaiverDictionaryItem"
              }
            },
            "discount": {
              "type": "object",
              "description": "Details about the discounts. The reference currency is the one defined at Price level.\n",
              "additionalProperties": {
                "$ref": "#/definitions/DiscountDictionaryItem"
              }
            },
            "installmentPlan": {
              "type": "object",
              "description": "Indicates the details of the payment using installments: - Number of installments - Amount and currency for the first and following installments - Amount and currency of the interest Only available for PaymentCard.\n",
              "additionalProperties": {
                "$ref": "#/definitions/InstallmentPlanData"
              }
            },
            "hotel": {
              "type": "object",
              "description": "Deprecated. Details about the hotel booked in the order.For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "$ref": "#/definitions/Hotel"
              }
            },
            "hotelDetails": {
              "type": "object",
              "description": "Details about the hotel booked in the order.For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "$ref": "#/definitions/Hotel"
              }
            },
            "carDictionary": {
              "description": "Details about the car booked in the order.For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)            ",
              "$ref": "#/definitions/CarDictionary"
            }
          }
        }
      ],
      "x-api-ref": "OrderDictionary"
    },
    "OrderEligibilities": {
      "type": "object",
      "description": "Eligibilities for modifications and cancellation of this order.",
      "required": [
        "change",
        "cancel"
      ],
      "properties": {
        "acknowledge": {
          "description": "Indicates if a bound can be acknowledged by the API user.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AcknowledgeOrderEligibility"
          }
        },
        "cancel": {
          "description": "Indicates if the order can be cancelled.",
          "$ref": "#/definitions/OrderCancelEligibility"
        },
        "cancelAndRefund": {
          "description": "Indicates if the order can be cancelled and refunded.",
          "$ref": "#/definitions/CancelAndRefundEligibility"
        },
        "change": {
          "description": "Indicates if a bound can be exchanged voluntary by the traveler",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FlightChangeEligibility"
          }
        },
        "flightReaccommodation": {
          "description": "Indicates if a bound can be changed for free or acknowledged after a disruption.",
          "$ref": "#/definitions/FlightReaccommodationEligibility"
        }
      },
      "x-api-ref": "OrderEligibilities"
    },
    "OrderEligibilitiesReply": {
      "type": "object",
      "description": "Reply containing the eligibility information of an order",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/OrderEligibilityInformation"
            },
            "dictionaries": {
              "$ref": "#/definitions/OrderEligibilityDictionary"
            }
          }
        }
      ],
      "x-api-ref": "OrderEligibilitiesReply"
    },
    "OrderEligibilityDictionary": {
      "type": "object",
      "description": "Order eligibilities dictionary",
      "properties": {
        "currency": {
          "type": "object",
          "description": "Currencies map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
          "additionalProperties": {
            "$ref": "#/definitions/CurrencyDictionaryItem"
          }
        }
      },
      "x-api-ref": "OrderEligibilityDictionary"
    },
    "OrderEligibilityInformation": {
      "type": "object",
      "description": "Eligibility for 'cancelAndRefund' is returned. It describes the possibility to cancel  the air itinerary and receive a refund of a part or the full amount paid.",
      "required": [
        "orderId"
      ],
      "properties": {
        "orderId": {
          "description": "Order id (record locator)",
          "type": "string",
          "x-risk-personal-data-field": "PNR_RECORD_LOCATOR"
        },
        "cancelAndRefund": {
          "description": "Details of the cancellation and refund eligibility",
          "$ref": "#/definitions/OrderCancelAndRefundEligibility"
        }
      },
      "x-api-ref": "OrderEligibilityInformation"
    },
    "OrderIncludes": {
      "type": "object",
      "description": "Additional data for this order will be included in the response.  The \"include\" query parameter triggers this additional data display.\n",
      "properties": {
        "baggagePolicies": {
          "$ref": "#/definitions/BaggagePolicies"
        }
      },
      "x-api-ref": "OrderIncludes"
    },
    "OrderItemEligibility": {
      "type": "object",
      "description": "Order item eligibility computed via airline specific rules for an order. Which is generic in nature & can be defined by airline.",
      "required": [
        "eligibilityName",
        "isEligible"
      ],
      "properties": {
        "eligibilityName": {
          "description": "Name of the generic eligibility which specifies particular functionality of an order",
          "type": "string",
          "pattern": "[a-zA-Z0-9_-]{1,50}"
        },
        "isEligible": {
          "type": "boolean",
          "default": false,
          "description": "Returns true if generic eligibility is eligible\n"
        },
        "flightIds": {
          "type": "array",
          "description": "A list of flights associated to this generic eligibility",
          "items": {
            "type": "string",
            "pattern": "[a-zA-Z0-9-]{1,20}"
          }
        },
        "travelerIds": {
          "type": "array",
          "description": "A list of travelers associated to this generic eligibility",
          "items": {
            "type": "string",
            "pattern": "[a-zA-Z0-9-]{1,20}"
          }
        },
        "nonEligibilityReasons": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NonEligibilityReason"
          }
        }
      },
      "x-api-ref": "OrderItemEligibility"
    },
    "OrderMiscellaneousAncillaryItem": {
      "type": "object",
      "description": "This object contains a list of detailed information for each miscellaneaous anciallary item\n",
      "properties": {
        "id": {
          "type": "string",
          "description": "Ancillary item id"
        },
        "travelerId": {
          "type": "string",
          "description": "Traveler who benefits of this ancillary. The traveler id refer to the traveler dictionary.\n"
        },
        "type": {
          "type": "string",
          "description": "Type of the ancillary",
          "enum": [
            "penalty",
            "refundBalance"
          ]
        },
        "price": {
          "description": "Price for the ancillary item",
          "$ref": "#/definitions/MultiCurrencyPrice"
        }
      },
      "x-api-ref": "OrderMiscellaneousAncillaryItem"
    },
    "OrderNonRefundableAmount": {
      "description": "Detail of non refundable amount for one flight ticket considered during the calculation of the refund amounts.\nIt contains the total amount of non refundable taxes and the breakdown per taxes.  (base fare does not appear in this structure as if some part is non refundable it will be either in usedAmount or in penalty)",
      "type": "object",
      "properties": {
        "taxes": {
          "description": "Non refundable taxes breakdown ",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tax"
          }
        },
        "totalTaxes": {
          "description": "Total amount of non refundable Taxes",
          "$ref": "#/definitions/Amount"
        }
      },
      "x-api-ref": "OrderNonRefundableAmount"
    },
    "OrderPaidAmount": {
      "description": "Breakdown of the amount paid by the traveller and considered during the calculation of the refund amounts.\nThe breakdown is today limited to base fare and taxes of the flight tickets.",
      "type": "object",
      "properties": {
        "base": {
          "description": "Base fare paid for the travel document",
          "$ref": "#/definitions/Amount"
        },
        "taxes": {
          "description": "Taxes breakdown",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tax"
          }
        }
      },
      "x-api-ref": "OrderPaidAmount"
    },
    "OrderPaymentConfirmRequest": {
      "type": "object",
      "description": "Request to confirm a payment after redirection on an existing order.",
      "required": [
        "paymentRequests"
      ],
      "properties": {
        "paymentRequests": {
          "type": "array",
          "description": "A list of payment requests. Each payment request contains a payment method and paymentResumption\ninformation to trigger the confirmation of the payment in the Order.\nOnly AlternativePaymentMethod and PaymentCard enrolled for 3D Secure are supported.\n",
          "items": {
            "$ref": "#/definitions/PaymentWithAssociationRequest"
          }
        },
        "userNotifications": {
          "type": "array",
          "description": "User-notifications to be sent after the successful payment and/or issuance of the order (driven by airline configuration)",
          "items": {
            "$ref": "#/definitions/UserNotificationRequest"
          }
        }
      },
      "x-api-ref": "OrderPaymentConfirmRequest"
    },
    "OrderPaymentReplacementRequest": {
      "type": "object",
      "description": "Request to replace one or more payment method which are not in approved status with a different one.",
      "required": [
        "paymentRequests"
      ],
      "properties": {
        "paymentRequests": {
          "type": "array",
          "description": "A list of payment requests. Each payment request contains a payment method and list of paymentMethodsToReplace\nto trigger the replacement of the payment methods in the Order.\nOnly Asynchronous CustomPayment to be replaced are supported.\n",
          "items": {
            "$ref": "#/definitions/PaymentWithoutAssociationRequest"
          }
        }
      },
      "x-api-ref": "OrderPaymentReplacementRequest"
    },
    "OrderPaymentRequest": {
      "type": "object",
      "description": "Request to perform a payment on an existing order.",
      "allOf": [
        {
          "$ref": "#/definitions/OrderCommonRequest"
        },
        {
          "type": "object",
          "properties": {
            "paymentRequests": {
              "type": "array",
              "description": "A list of payment request. Each payment request contains a payment method, and the amount to be paid using that method.\nFor example, to pay using both monetary currency and miles, the payment is split into a partial payment for the miles\namount and a second partial payment is used to represent the amount to be paid using Credit card.\nIf you decide to benefit from validation of the amounts, amounts need to be provided for each payment request.\n",
              "items": {
                "$ref": "#/definitions/PaymentWithAssociationRequest"
              }
            },
            "notifications": {
              "type": "array",
              "description": "Notifications to be processed after creating travel documents for this order.",
              "items": {
                "$ref": "#/definitions/NotificationRequest"
              }
            },
            "userNotifications": {
              "type": "array",
              "description": "User-notifications to be sent after the successful payment and/or issuance of the order (driven by airline configuration)",
              "items": {
                "$ref": "#/definitions/UserNotificationRequest"
              }
            }
          }
        }
      ],
      "x-api-ref": "OrderPaymentRequest"
    },
    "OrderPreview": {
      "type": "object",
      "description": "Essential information that can characterize an order.",
      "properties": {
        "id": {
          "description": "Order id (record locator)",
          "type": "string",
          "x-risk-personal-data-field": "PNR_RECORD_LOCATOR"
        },
        "isGroupBooking": {
          "type": "boolean",
          "description": "Flag indicating if the order is a booking for a group. In such case traveler information is not displayed."
        },
        "creationDateTime": {
          "description": "Creation date of the order in GMT (Example: 2018-02-10T20:40:12Z)",
          "type": "string",
          "format": "date-time"
        },
        "flights": {
          "type": "array",
          "description": "Flights present in the order. A valid flight has one of the mentioned statusCode.\nPast-dated flights are returned but are not considered as valid. Following flight types are not returned: non-dated open flights, informative flights.",
          "items": {
            "$ref": "#/definitions/LightFlight"
          }
        },
        "travelers": {
          "type": "array",
          "description": "Travelers taking part in the flights of the order",
          "items": {
            "$ref": "#/definitions/Traveler"
          }
        }
      },
      "x-api-ref": "OrderPreview"
    },
    "OrderPreviewsListReply": {
      "type": "object",
      "description": "Reply containing a list of order previews",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "type": "array",
              "description": "List of orders matching the search criteria. An order will be filtered out if it doesn't have at least one valid flights. See OrderPreview definition for more details about valid flights.",
              "items": {
                "$ref": "#/definitions/OrderPreview"
              }
            },
            "dictionaries": {
              "$ref": "#/definitions/FlightDictionary"
            }
          }
        }
      ],
      "x-api-ref": "OrderPreviewsListReply"
    },
    "OrderRefundAmounts": {
      "description": "Detailed amounts to be refunded for one flight ticket. It contains the total amount to be refunded and  the breakdown for tax and base fare refund amounts.",
      "type": "object",
      "required": [
        "base",
        "totalTaxes",
        "total"
      ],
      "properties": {
        "base": {
          "description": "Base fare refund amount",
          "$ref": "#/definitions/Amount"
        },
        "taxes": {
          "description": "Taxes breakdown",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tax"
          }
        },
        "totalTaxes": {
          "description": "Total tax refund amount. Always set to 0 for Hotel informative refund.",
          "$ref": "#/definitions/Amount"
        },
        "total": {
          "description": "Total refund amount",
          "$ref": "#/definitions/Amount"
        }
      },
      "x-api-ref": "OrderRefundAmounts"
    },
    "OrderRefundEventLog": {
      "type": "object",
      "description": "Represents one event and its details.",
      "properties": {
        "triggerEventName": {
          "description": "Nature of the event",
          "type": "string",
          "enum": [
            "sent"
          ]
        }
      },
      "x-api-ref": "OrderRefundEventLog"
    },
    "OrderRefundMethodOption": {
      "description": "A refund option describes on which form of payment the refund amounts can be recredited. The default option is the re-credit of the initial form of payment used to pay the document.",
      "type": "object",
      "required": [
        "id",
        "paymentDetails"
      ],
      "properties": {
        "id": {
          "description": "Identifier of this refund option.",
          "type": "string"
        },
        "paymentDetails": {
          "type": "array",
          "description": "The different form of payment involved in this refund option.",
          "items": {
            "$ref": "#/definitions/PaymentRequest"
          }
        }
      },
      "x-api-ref": "OrderRefundMethodOption"
    },
    "OrderRefundNotificationData": {
      "type": "object",
      "description": "Details about the processed refund notification.",
      "properties": {
        "contactIds": {
          "type": "array",
          "description": "List of contactIds considered for this notification.",
          "items": {
            "type": "string"
          }
        },
        "submission": {
          "$ref": "#/definitions/OrderRefundEventLog",
          "description": "Details about the emission of the notification."
        }
      },
      "x-api-ref": "OrderRefundNotificationData"
    },
    "OrderRefundNotificationRequest": {
      "description": "The refund notification request sends a refund notice to the provided  contactIds from the order, associated to the requested /travel-documents. \nToday, only Email contactIds and e-ticket travel-documents are  supported.",
      "type": "object",
      "required": [
        "contactIds",
        "travelDocumentId"
      ],
      "properties": {
        "contactIds": {
          "type": "array",
          "description": "List of contactIds from the order to which a refund notice will be sent.",
          "items": {
            "type": "string",
            "pattern": "[a-zA-Z0-9-]{1,20}"
          }
        },
        "travelDocumentId": {
          "type": "string",
          "pattern": "[0-9]{1,20}",
          "description": "The travel-document from which the refund notice will be generated.  Today, only travel-documents of type e-ticket are supported."
        }
      },
      "x-api-ref": "OrderRefundNotificationRequest"
    },
    "OrderRefundOptionsItem": {
      "description": "Detail of the refund eligibility for each travel document (i.e. flight ticket). It contains the e-ticket number, the refund status at e-ticket level,  the amounts that will be refunded and the refund penalty if applicable.\n\nThe status at e-ticket level can have the following values:\n- refundable\n- notRefundable\n- manuallyRefundable: the tickets cannot be refunded by the API and needs to be refunded offline by an agent(or airline robotic application). This can happen when the  e-ticket is not eligible for automatic refund or when there was an error during the eligibility call.\n- unavailable: this status is returned either when there is an error during the computation of the eligibility.",
      "type": "object",
      "required": [
        "travelDocumentId",
        "documentType",
        "status"
      ],
      "properties": {
        "travelDocumentId": {
          "description": "Travel Document number (e.g. 220-1638074788)",
          "type": "string",
          "x-risk-personal-data-field": "AIRLINE_TICKET_NUMBER"
        },
        "documentType": {
          "description": "It specifies if the document is the record generated when confirming flights (documentType =  e-ticket),\nor is used for for travel related services, such as excess baggage charges, miscellaneous charges, penalty fees, residual value, lounge access charges, etc.. (documentType =  service)\nCould be also used for hotel refund (documentType =  hotel)",
          "type": "string",
          "enum": [
            "eticket",
            "services",
            "hotel"
          ]
        },
        "hotelId": {
          "description": "Id of the requested hotel",
          "type": "string"
        },
        "travelerIds": {
          "type": "array",
          "description": "Traveler ids the element is associated with",
          "items": {
            "type": "string",
            "pattern": "[a-zA-Z0-9-]{1,20}"
          }
        },
        "serviceIds": {
          "type": "array",
          "description": "Service ids the element is associated with",
          "items": {
            "type": "string",
            "pattern": "[a-zA-Z0-9-]{1,50}"
          }
        },
        "seatIds": {
          "type": "array",
          "description": "Seat ids the element is associated with",
          "items": {
            "type": "string",
            "pattern": "[a-zA-Z0-9-:]{1,50}"
          }
        },
        "status": {
          "description": "Describes the refund status of the travel document. Three possible values: refundable, notRefundable and unavailable.",
          "type": "string",
          "enum": [
            "refundable",
            "notRefundable",
            "manuallyRefundable",
            "unavailable"
          ]
        },
        "refundType": {
          "description": "Specifies if the refund option provided to the api user is an involuntary refund.\nAn involuntary refund can be proposed by the airline if the order has been disrupted and the airline has contracted the product.",
          "type": "string",
          "enum": [
            "involuntary"
          ]
        },
        "refundAmounts": {
          "description": "Detailed amounts of the refund that the traveler will receive once the operation completed",
          "$ref": "#/definitions/OrderRefundAmounts"
        },
        "paidAmount": {
          "description": "Breakdown of the amount paid by the traveller and considered during the calculation of the refund amounts.\nThe breakdown is today limited to base fare and taxes of the flight tickets.",
          "$ref": "#/definitions/OrderPaidAmount"
        },
        "usedAmount": {
          "description": "Amount already used by the traveller.\nFor example, if the traveller flew already his outbound flight, the value of the outbound is considered as used and usually not to be refunded.\nThe breakdown is today limited to base fare and taxes of the flight tickets.",
          "$ref": "#/definitions/OrderUsedAmount"
        },
        "nonRefundableAmount": {
          "description": "Amount non refundable.\nIt contains the total amount of non refundable taxes and the breakdown per taxes of the flight.",
          "$ref": "#/definitions/OrderNonRefundableAmount"
        },
        "penalty": {
          "description": "Penalty to be subtracted (from the full amount paid for the referenced travel document) once the refund operation completed",
          "$ref": "#/definitions/Amount"
        },
        "refundMethodOptions": {
          "type": "array",
          "description": "PaymentMethod options on which refund can be requested.",
          "items": {
            "$ref": "#/definitions/OrderRefundMethodOption"
          }
        },
        "waiverCode": {
          "type": "string",
          "description": "Waiver code applicable for the given travel-document. All amounts mentioned above are  already considering this waiver."
        }
      },
      "x-api-ref": "OrderRefundOptionsItem"
    },
    "OrderReply": {
      "type": "object",
      "description": "Reply containing the information of an order",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/Order"
            },
            "included": {
              "$ref": "#/definitions/OrderIncludes"
            },
            "dictionaries": {
              "$ref": "#/definitions/OrderDictionary"
            }
          }
        }
      ],
      "x-api-ref": "OrderReply"
    },
    "OrderRepricingRequest": {
      "type": "object",
      "description": "Object used to input the new pricing options to be used to reprice an order\n",
      "properties": {
        "fareDiscounts": {
          "type": "array",
          "description": "Fare discount (FD) pricing options.\nEach traveler can have up to 3 fare discounts.\nA fare discount is made on several attributes, which differ from one fare discount type to another.\nAs of now, only fare discount of type DCP are supported, using following attributes (all but flight selection are mandatory):\n* code: DCP\n* coupon number\n* traveler selection\n* flight selection\n",
          "items": {
            "$ref": "#/definitions/FareDiscount"
          }
        },
        "promotion": {
          "description": "Promotion code and related airline code. When a Promotion is injected and is applied, then the price will be discounted accordingly and the applied promotion will appear in the Discount dictionary associated. When the promotion code provided is empty, any promocode previously entered and present in  the offer will be ignored during the repricing.\n",
          "$ref": "#/definitions/Promotion"
        }
      },
      "x-api-ref": "OrderRepricingRequest"
    },
    "OrderSeatItem": {
      "type": "object",
      "description": "This object contains the information regarding the seats selection for a\nsingle traveler or a group of travelers\n",
      "allOf": [
        {
          "$ref": "#/definitions/SeatItemCommon"
        },
        {
          "type": "object",
          "properties": {
            "prices": {
              "$ref": "#/definitions/MultiCurrencyAirPricingRecords"
            }
          }
        }
      ],
      "x-api-ref": "OrderSeatItem"
    },
    "OrderSeatReply": {
      "type": "object",
      "description": "Reply containing a seat object.\n",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/OrderSeatItem"
            },
            "links": {
              "type": "array",
              "description": "List of links related to the RM/OSI/SK.They can refer to the RM/OSI/SK  associated to order. \n Also, they can refer to the redirection url to be used to retrieve the RM/OSI/SK added to order ",
              "items": {
                "$ref": "#/definitions/HttpRequest"
              }
            },
            "dictionaries": {
              "$ref": "#/definitions/DictionaryCommon"
            }
          }
        }
      ],
      "x-api-ref": "OrderSeatReply"
    },
    "OrderSeatsReply": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "type": "array",
              "description": "List of Seats",
              "items": {
                "$ref": "#/definitions/OrderSeatItem"
              }
            },
            "links": {
              "type": "array",
              "description": "List of links related to the RM/OSI/SK.They can refer to the RM/OSI/SK  associated to order. \n Also, they can refer to the redirection url to be used to retrieve the RM/OSI/SK added to order",
              "items": {
                "$ref": "#/definitions/HttpRequest"
              }
            },
            "dictionaries": {
              "$ref": "#/definitions/DictionaryCommon"
            }
          }
        }
      ],
      "x-api-ref": "OrderSeatsReply"
    },
    "OrderServiceItem": {
      "type": "object",
      "description": "This object contains a list of detailed information for each service item\nretrieved from Services catalogue\n",
      "allOf": [
        {
          "$ref": "#/definitions/ServiceItemCommon"
        },
        {
          "type": "object",
          "properties": {
            "travelerId": {
              "type": "string",
              "description": "Traveler who benefits of this service. The traveler id refer to the traveler dictionary.\n"
            },
            "isExempted": {
              "type": "boolean",
              "description": "Display recommendation ; true if the service is exempted"
            },
            "isChargeable": {
              "type": "boolean",
              "description": "Display recommendation ; true if the service is chargeable"
            },
            "prices": {
              "description": "Price for the service item",
              "$ref": "#/definitions/MultiCurrencyAirPricingRecords"
            },
            "details": {
              "description": "Detailed information about the service usage (i.e. quantity per flight)",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServiceDetail"
              }
            },
            "packDetails": {
              "description": "Pack details information",
              "$ref": "#/definitions/ServicePackDetails"
            },
            "packServiceId": {
              "type": "string",
              "description": "Service ID of the master pack"
            }
          }
        }
      ],
      "x-api-ref": "OrderServiceItem"
    },
    "OrderServiceReply": {
      "type": "object",
      "description": "Reply containing a service object.\n",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/OrderServiceItem"
            },
            "links": {
              "type": "array",
              "description": "List of links related to the RM/OSI/SK.They can refer to the RM/OSI/SK  associated to order. \n Also, they can refer to the redirection url to be used to retrieve the RM/OSI/SK added to order",
              "items": {
                "$ref": "#/definitions/HttpRequest"
              }
            },
            "dictionaries": {
              "$ref": "#/definitions/DictionaryCommon"
            }
          }
        }
      ],
      "x-api-ref": "OrderServiceReply"
    },
    "OrderServicesReply": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OrderServiceItem"
              }
            },
            "links": {
              "type": "array",
              "description": "List of links related to the RM/OSI/SK.They can refer to the RM/OSI/SK  associated to order. \n Also, they can refer to the redirection url to be used to retrieve the RM/OSI/SK added to order",
              "items": {
                "$ref": "#/definitions/HttpRequest"
              }
            },
            "dictionaries": {
              "$ref": "#/definitions/DictionaryCommon"
            }
          }
        }
      ],
      "x-api-ref": "OrderServicesReply"
    },
    "OrdersListReply": {
      "type": "object",
      "description": "Reply containing a list of orders",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Order"
              }
            },
            "dictionaries": {
              "$ref": "#/definitions/OrderDictionary"
            }
          }
        }
      ],
      "x-api-ref": "OrdersListReply"
    },
    "OrderSplitData": {
      "type": "object",
      "description": "Essential information that can characterize an order.",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "Order id (record locator)",
          "type": "string",
          "x-risk-personal-data-field": "PNR_RECORD_LOCATOR"
        },
        "travelers": {
          "type": "array",
          "description": "Essential information about travelers taking part in the order",
          "items": {
            "$ref": "#/definitions/TravelerBase"
          }
        }
      },
      "x-api-ref": "OrderSplitData"
    },
    "OrdersReply": {
      "type": "object",
      "description": "Reply containing the information of multiple orders",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Order"
              }
            },
            "included": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OrderIncludes"
              }
            },
            "dictionaries": {
              "$ref": "#/definitions/OrderDictionary"
            }
          }
        }
      ],
      "x-api-ref": "OrdersReply"
    },
    "OrderUsedAmount": {
      "description": "Amount already used by the traveller.\n    \nFor example, if the traveller flew already his outbound flight, the value of the outbound is considered as used and usually not to be refunded.\n    \nThe breakdown is today limited to base fare and taxes of the flight tickets.",
      "type": "object",
      "properties": {
        "base": {
          "description": "Base fare already used.",
          "$ref": "#/definitions/Amount"
        },
        "taxes": {
          "description": "Taxes breakdown",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tax"
          }
        }
      },
      "x-api-ref": "OrderUsedAmount"
    },
    "OriginalTravelDocument": {
      "type": "object",
      "description": "Travel documents generated at issuance time.",
      "properties": {
        "documentType": {
          "description": "It specifies if the document is the record generated when confirming flights (documentType =  eticket),\nor is used for for travel related services, such as excess baggage charges, miscellaneous charges, penalty fees, residual value, lounge access charges, etc.. (documentType =  service), or for third party contents (documentType = insurance or hotel)\n",
          "type": "string",
          "enum": [
            "eticket",
            "services",
            "insurance",
            "hotel"
          ]
        },
        "documentNumber": {
          "description": "Travel Document number (e.g. 2201638074788)",
          "type": "string"
        },
        "creation": {
          "$ref": "#/definitions/EventLog"
        }
      },
      "x-api-ref": "OriginalTravelDocument"
    },
    "OriginalTrip": {
      "type": "object",
      "required": [
        "bounds"
      ],
      "properties": {
        "prices": {
          "description": "Prices of the original trip in the Order",
          "$ref": "#/definitions/AirPricingRecords"
        },
        "bounds": {
          "type": "array",
          "description": "Each bound corresponds to a group of flights. A one way trip contains one single bound. A round trip or open jaw trip contains two bounds (outbound and inbound)",
          "items": {
            "$ref": "#/definitions/Bound"
          }
        }
      },
      "x-api-ref": "OriginalTrip"
    },
    "OtherServiceInformation": {
      "type": "object",
      "description": "Free text information added to an order and associated to an airline code (OSI)",
      "allOf": [
        {
          "$ref": "#/definitions/ItemCommon"
        },
        {
          "type": "object",
          "required": [
            "freetext",
            "airlineCode"
          ],
          "properties": {
            "tid": {
              "description": "Temporary id that can be used to associate requested and returned OSIs. Valid only for the time of the transaction",
              "type": "string",
              "pattern": "[a-zA-Z0-9_]{1,20}"
            },
            "airlineCode": {
              "description": "Two letter airline code defined for the OSI message. IATA airline code (http://www.iata.org/publications/Pages/code-search.aspx). You can use YY airline code to associate the OSI to all airlines.",
              "type": "string",
              "pattern": "[A-Z0-9]{2}[A-Z]*"
            },
            "freetext": {
              "description": "Free-flow text of the OSI",
              "type": "string",
              "pattern": ".{1,68}"
            },
            "travelerIds": {
              "type": "array",
              "description": "A list of travelers associated to this Remark. If not specified, the remark applies to all travelers",
              "items": {
                "type": "string",
                "pattern": "[a-zA-Z0-9-]{1,20}"
              }
            }
          }
        }
      ],
      "x-api-ref": "OtherServiceInformation"
    },
    "OtherServiceInformationReply": {
      "type": "object",
      "description": "Reply containing an OSI element object.\n",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/OtherServiceInformation"
            },
            "dictionaries": {
              "type": "object"
            }
          }
        }
      ],
      "x-api-ref": "OtherServiceInformationReply"
    },
    "OtherServiceInformationsListReply": {
      "type": "object",
      "description": "Reply containing a list of OSI element.\n",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "type": "array",
              "description": "List of OSI",
              "items": {
                "$ref": "#/definitions/OtherServiceInformation"
              }
            },
            "dictionaries": {
              "type": "object"
            }
          }
        }
      ],
      "x-api-ref": "OtherServiceInformationsListReply"
    },
    "PassengerRegulatoryApisDetail": {
      "type": "object",
      "description": "Object used to manipulate (add, read, update) regulatory details (APIS data) for a passenger.\n",
      "required": [
        "regulatoryDocuments",
        "travelerIds"
      ],
      "properties": {
        "travelerIds": {
          "type": "array",
          "description": "A list of travelers associated to this generic service. If not specified, the generic service applies to all travelers",
          "items": {
            "type": "string",
            "pattern": "[a-zA-Z0-9-]{1,20}",
            "minItems": 1
          }
        },
        "regulatoryDocuments": {
          "type": "array",
          "description": "Regulatory details associated to the passenger",
          "items": {
            "$ref": "#/definitions/RegulatoryApisDetail"
          }
        }
      },
      "x-api-ref": "PassengerRegulatoryApisDetail"
    },
    "PassengerRegulatoryApisDetailListReply": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PassengerRegulatoryApisDetail"
              }
            }
          }
        }
      ],
      "x-api-ref": "PassengerRegulatoryApisDetailListReply"
    },
    "PatchTraveler": {
      "type": "object",
      "description": "Modifiable elements of the traveler in an order",
      "properties": {
        "id": {
          "type": "string",
          "description": "traveler id",
          "pattern": "[a-zA-Z0-9-]{1,20}"
        },
        "names": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Name"
          }
        },
        "dateOfBirth": {
          "description": "Date of birth (date in ISO 8601: http://www.w3.org/TR/NOTE-datetime)",
          "type": "string",
          "format": "date",
          "example": "2002-07-25",
          "x-risk-personal-data-field": "DATE_OF_BIRTH"
        },
        "age": {
          "description": "Traveler age, in years",
          "type": "integer",
          "minimum": 0,
          "maximum": 150,
          "example": 36,
          "x-risk-personal-data-field": "DATE_OF_BIRTH"
        }
      },
      "x-api-ref": "PatchTraveler"
    },
    "PayerIdentification": {
      "type": "object",
      "description": "Device, individual or corporation data aiming to identify the payer to detect frauds.",
      "properties": {
        "name": {
          "description": "Name of the payer",
          "$ref": "#/definitions/PayerIdentificationName"
        },
        "dateOfBirth": {
          "description": "Date of birth (date in ISO 8601: http://www.w3.org/TR/NOTE-datetime)",
          "type": "string",
          "format": "date",
          "example": "2002-07-25",
          "x-risk-personal-data-field": "DATE_OF_BIRTH"
        },
        "IPAddress": {
          "description": "Payer IP address",
          "type": "string",
          "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
          "example": "46.235.153.60",
          "x-risk-personal-data-field": "ADDRESS"
        },
        "merchantUrl": {
          "description": "Merchant Url to help 3DSv2 provider identify the payer. Only used in 3DSv2",
          "type": "string",
          "pattern": "[a-zA-Z0-9-._~%:/?#\\[\\]@!$&\\'()*+,;=]+"
        },
        "channel": {
          "description": "Use desktop, mobile or tablet",
          "type": "string",
          "enum": [
            "desktop",
            "mobile",
            "tablet"
          ],
          "default": "desktop"
        },
        "browser": {
          "description": "Details of the payer's browser like acceptHeader or userAgent.",
          "$ref": "#/definitions/BrowserInformation"
        },
        "deviceFingerPrint": {
          "description": "Device Finger Print. The format depends on the fraud detection system used. As an example: Base64(ScreenResolution;OS;Browser) ",
          "type": "string",
          "x-risk-personal-data-field": "BROWSER_VISITOR_ID"
        },
        "contacts": {
          "type": "array",
          "description": "Contacts information of the payer - email or address. For the verification of the payer address, only address with 'billing' purpose is considered",
          "items": {
            "$ref": "#/definitions/Contact"
          }
        },
        "documents": {
          "description": "Documents information of the payer",
          "$ref": "#/definitions/PayerIdentificationDocuments"
        },
        "supplementaryFraudData": {
          "description": "Supplementary fraud data can be sent during the payment process",
          "$ref": "#/definitions/DocumentEnvelope"
        }
      },
      "x-api-ref": "PayerIdentification"
    },
    "PayerIdentificationDocuments": {
      "type": "object",
      "description": "Object used to accept Payer's documents",
      "properties": {
        "regulatoryDocuments": {
          "type": "array",
          "description": "Regulatory documents for the payer",
          "items": {
            "$ref": "#/definitions/RegulatoryFoidDocument"
          }
        },
        "frequentFlyerCard": {
          "description": "Frequent Flyer Card number for the payer",
          "$ref": "#/definitions/FrequentFlyerCard"
        }
      },
      "x-api-ref": "PayerIdentificationDocuments"
    },
    "PayerIdentificationName": {
      "type": "object",
      "description": "Payer identity name information",
      "properties": {
        "firstName": {
          "description": "Payer first name.",
          "type": "string",
          "pattern": "^[A-Za-z\\u00C0-\\u1FFF\\u3040-\\uD7AF][A-Za-z\\u00C0-\\u1FFF\\u3040-\\uD7AF\\u2019 \\-.']{0,69}$",
          "x-risk-personal-data-field": "PASSENGER_NAME"
        },
        "middleName": {
          "description": "DEPRECATED Payer middle name.",
          "type": "string",
          "pattern": "^[A-Za-z \\-.]{0,30}$",
          "example": "Ignatius",
          "x-risk-personal-data-field": "PASSENGER_NAME"
        },
        "lastName": {
          "description": "Payer last name. ",
          "type": "string",
          "pattern": "^[A-Za-z\\u00C0-\\u1FFF\\u3040-\\uD7AF][A-Za-z\\u00C0-\\u1FFF\\u3040-\\uD7AF\\u2019 \\-.']{0,69}$",
          "example": "Holmes",
          "x-risk-personal-data-field": "PASSENGER_NAME"
        },
        "title": {
          "description": "DEPRECATED Payer title",
          "type": "string",
          "pattern": "[a-zA-Z -]{1,20}",
          "x-risk-personal-data-field": "PASSENGER_TITLE"
        },
        "nameType": {
          "description": "DEPRECATED Type of the name provided\n",
          "type": "string",
          "enum": [
            "universal",
            "native",
            "romanized"
          ],
          "default": "universal"
        },
        "isPreferred": {
          "description": "DEPRECATED flag indicating if the current name is the preferred name.\n",
          "type": "boolean"
        }
      },
      "x-api-ref": "PayerIdentificationName"
    },
    "Payment3DSAuthentication": {
      "type": "object",
      "description": "This structure aims at receiving 3DS data.\n",
      "properties": {
        "deviceChannel": {
          "type": "string",
          "description": "Booking type, can have 3 different values: \"Online\" value needs to be sent for online channels\n  For instance: website is considered as Online.\n\"Offline\" value needs to be sent for offline channels\n  For instance: ARD is considered as offline.\n\"Exempted\" value needs to be sent when transaction is to exempted for PSD2.\n",
          "enum": [
            "ONLINE",
            "OFFLINE",
            "EXEMPTED"
          ]
        },
        "xid": {
          "type": "string",
          "description": "3DS Transaction Identifier Mandatory when 3DS V1 data need to be sent to external provider to process payment\n"
        },
        "cavv": {
          "type": "string",
          "description": "CAVV - Cardholder Authentication Verification Value (VISA) When 3DS V1/V2 data need to be sent to external provider to process payment:  Either authentificationValueAVV or authentificationValueCAVV need to be sent in input.\n"
        },
        "avv": {
          "type": "string",
          "description": "AVV - Accountholder Authentification Value (MasterCard) When 3DS V1/V2 data need to be sent to external provider to process payment:  Either authentificationValueAVV or authentificationValueCAVV need to be sent in input.    \n"
        },
        "paresStatus": {
          "type": "string",
          "description": "Authentication Response status (pAResStatus): Y: Authentication successful N: Authentication failed A: Attempts processing performed U: Authentication could not be performed\n",
          "enum": [
            "Y",
            "N",
            "A",
            "U"
          ]
        },
        "veresStatus": {
          "type": "string",
          "description": "Verify Enrollment Response status (vEResStatus) Y: Cardholder is enrolled to use 3D Secure N: Cardholder is not enrolled to use 3D Secure U: Unable to Authenticate\n",
          "enum": [
            "Y",
            "N",
            "U"
          ]
        },
        "eci": {
          "type": "string",
          "description": "Electronic Commerce Indicator (eci) Mandatory when 3DS V1/V2 data need to be sent to external provider to process payment\n"
        },
        "transStatus": {
          "type": "string",
          "description": "Transaction Status\n  Y: Payer authenticated\n  N: Payer not authenticated\n  U: Authentication could not be performed by 3DS server\n  A: Authentication attempted (not authenticated but proof of attempted authentication provided)\n  C: Challenge required (using CReq/CRes)\n  D: Challenge required - Decoupled authentication confirmed\n  R: Authentication rejected\n  I: Informational - requestor challenge preference acknowledged   \n",
          "enum": [
            "Y",
            "N",
            "U",
            "A",
            "C",
            "D",
            "R",
            "I"
          ]
        },
        "version": {
          "type": "string",
          "description": "Version of the 3DS"
        },
        "serverTransactionId": {
          "type": "string",
          "description": "Directory Server transaction ID"
        }
      },
      "x-api-ref": "Payment3DSAuthentication"
    },
    "PaymentAuthorization": {
      "type": "object",
      "description": "An Authorization is usually the first transaction performed during the acceptance stage of a payment (usually towards the end of the checkout process), i.e. an agreement on some money to be exchanged, at once or later, between two parties, the individual and the payee (usually Merchant). When successful, it usually results in the amount at stake being blocked for a limited period of time on the payer's account. \n",
      "properties": {
        "approvalCode": {
          "description": "Approval code issued during the payment",
          "type": "string"
        },
        "transactionDateTime": {
          "description": "Payment transaction date and time in GMT (Example: 2017-02-10T20:40:12Z)",
          "type": "string",
          "format": "date-time"
        },
        "authorizationDateTime": {
          "description": "Payment authorization date and time in GMT (Example: 2017-02-10T20:40:12Z)",
          "type": "string",
          "format": "date-time"
        }
      },
      "x-api-ref": "PaymentAuthorization"
    },
    "PaymentAuthorizationInput": {
      "type": "object",
      "description": "Authorization information for payment performed on third party systems. Integration or interaction with those\nthird party systems may require a redirection to their website or application.\n",
      "properties": {
        "approvalCode": {
          "description": "Manual approval code issued by an external Payment Service Provider (PSP) for a PaymentCard payment. This is used only when the airline has selected an external Payment Service Provider (i.e. not Amadeus Payment Platform). The approval code will be stored in a Payment Record in the order.\n",
          "type": "string",
          "pattern": "[a-zA-Z0-9]+"
        },
        "paymentRedirectionContext": {
          "description": "List of API user callback urls to be sent in input at the creation of the payment records the payment method requires redirection (e.g. AlternativePaymentMethod or PaymentCard enrolled for 3D Secure).\n",
          "type": "object",
          "$ref": "#/definitions/PaymentRedirectionContext"
        },
        "paymentResumption": {
          "type": "object",
          "description": "Resumption information needed to trigger the payment authorization after the redirection. Payment confirmation data received from the Payment Service Provider (PSP) or the Access Control Server (ACS) has to be sent in input in order to confirm the payment records in the Order.\n",
          "$ref": "#/definitions/PaymentResumption"
        },
        "payment3DSAuthentication": {
          "type": "object",
          "description": "This structure aims at receiving 3DS data.\n",
          "$ref": "#/definitions/Payment3DSAuthentication"
        }
      },
      "x-api-ref": "PaymentAuthorizationInput"
    },
    "PaymentCard": {
      "type": "object",
      "description": "Card information supporting standard Credit/Debit cards and tokenized versions.\n",
      "allOf": [
        {
          "$ref": "#/definitions/PaymentMethod"
        },
        {
          "type": "object",
          "properties": {
            "vendorCode": {
              "type": "string",
              "description": "Card type, e.g. VI for visa, CA for mastercard, AX for amex.",
              "pattern": "[a-zA-Z]{2}"
            },
            "cardNumber": {
              "type": "string",
              "pattern": "^[0-9X]{6}[a-zA-Z0-9]{1,10}[0-9]{4}$",
              "x-risk-personal-data-field": "CREDIT_CARD_HOLDER_NAME"
            },
            "expiryDate": {
              "type": "string",
              "description": "Credit card expiry date, e.g. 0237 for February 2037",
              "pattern": "^(0[1-9]|1[0-2])[0-9]{2}$"
            },
            "holderName": {
              "type": "string",
              "pattern": "^\\s*$|^[A-Za-z\\u00C0-\\u1FFF\\u3040-\\uD7AF][A-Za-z\\u00C0-\\u1FFF\\u3040-\\uD7AF\\u2019 \\-.']{0,69}$",
              "x-risk-personal-data-field": "CREDIT_CARD_HOLDER_NAME"
            },
            "cvv": {
              "description": "Card Verification Value number, as indicated on the card. Only for query (not returned in replies)",
              "type": "string",
              "pattern": "[a-zA-Z0-9]{3,4}",
              "x-risk-personal-data-field": "CREDIT_CARD_HOLDER_NAME"
            },
            "fees": {
              "readOnly": true,
              "description": "Fees that will apply to the payment card if the user proceeds with the payment.\nThe information regarding fees is only available when calling the entry points: POST payment-methods.\n",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Fee"
              }
            }
          }
        }
      ],
      "x-api-ref": "PaymentCard"
    },
    "PaymentCurrencyConversionDictionary": {
      "type": "object",
      "properties": {
        "currency": {
          "type": "object",
          "description": "Currencies map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
          "additionalProperties": {
            "$ref": "#/definitions/CurrencyDictionaryItem"
          }
        },
        "airline": {
          "type": "object",
          "description": "Airlines map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "x-api-ref": "PaymentCurrencyConversionDictionary"
    },
    "PaymentCurrencyConversionProposal": {
      "type": "object",
      "description": "Contain all the information for monetary conversion",
      "required": [
        "paymentCurrencyConversionProposalId"
      ],
      "properties": {
        "paymentCurrencyConversionProposalId": {
          "description": "Conversion Proposal id",
          "type": "string"
        },
        "conversionDetails": {
          "$ref": "#/definitions/PaymentCurrencyConversionProposalAmount"
        },
        "merchantProvider": {
          "$ref": "#/definitions/PaymentCurrencyConversionProposalMerchantProvider"
        },
        "expirationDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Represents the validity date and time of the proposal in ISO8601[https://www.w3.org/TR/NOTE-datetime]. Example: 2010-08-14T13:00:00\n"
        },
        "marginPercentage": {
          "type": "number",
          "format": "float",
          "minimum": 0,
          "maximum": 100,
          "description": "Applicable margin percentage of the proposal applied by the provider (e.g. 3.5 = 3.5%)"
        }
      },
      "x-api-ref": "PaymentCurrencyConversionProposal"
    },
    "PaymentCurrencyConversionProposalAmount": {
      "type": "object",
      "description": "Contain all the information for the monetary amount",
      "required": [
        "convertedAmount"
      ],
      "properties": {
        "convertedAmount": {
          "description": "Amount value after the conversion. The decimal places are defined at currency level. e.g. \"EUR 100.85\" will be represented as `10085`, with the currency `decimalPlaces` = 2.\n",
          "$ref": "#/definitions/Amount"
        },
        "conversionRate": {
          "description": "Exchange rate including the provider margin",
          "type": "number",
          "format": "float"
        },
        "originalAmount": {
          "description": "Local amount of the airline. The amount value expressed as numerical information. The decimal places are defined at currency level. e.g. \"EUR 100.85\" will be represented as `10085`, with the currency `decimalPlaces` = 2.",
          "$ref": "#/definitions/Amount"
        }
      },
      "x-api-ref": "PaymentCurrencyConversionProposalAmount"
    },
    "PaymentCurrencyConversionProposalListReply": {
      "description": "Validate payment methods reply structure",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PaymentCurrencyConversionProposal"
              }
            },
            "dictionaries": {
              "$ref": "#/definitions/PaymentCurrencyConversionDictionary"
            }
          }
        }
      ],
      "x-api-ref": "PaymentCurrencyConversionProposalListReply"
    },
    "PaymentCurrencyConversionProposalListRequest": {
      "type": "object",
      "description": "Request to get dynamic currency conversion Proposals.",
      "properties": {
        "paymentCard": {
          "description": "Card number to use for having DCC Proposals. The currency returned is the one associated to the credit card.  If not provided, only MCP Proposals can be provided.",
          "$ref": "#/definitions/PaymentCard"
        },
        "monetaryAmount": {
          "description": "Amount to be converted. The amount value expressed as numerical information. The decimal places are defined at currency level. e.g. \"EUR 100.85\" will be represented as `10085`, with the currency `decimalPlaces` = 2.",
          "$ref": "#/definitions/Amount"
        }
      },
      "x-api-ref": "PaymentCurrencyConversionProposalListRequest"
    },
    "PaymentCurrencyConversionProposalMerchantProvider": {
      "type": "object",
      "description": "Contain all the information for monetary conversion",
      "required": [
        "merchantType"
      ],
      "properties": {
        "merchantType": {
          "description": "Merchant type, can be either Dynamic Currency Conversion (DCC) or Multi Currency Processing (MCP)",
          "type": "string",
          "enum": [
            "DCC",
            "MCP"
          ]
        },
        "code": {
          "description": "Code of the company providing the proposal",
          "type": "string"
        },
        "name": {
          "description": "Name of the company providing the proposal",
          "type": "string"
        }
      },
      "x-api-ref": "PaymentCurrencyConversionProposalMerchantProvider"
    },
    "PaymentMethod": {
      "type": "object",
      "description": "Payment method that can be used to pay for an order.\nTo see the structure of the different payment methods, please check [Payment Methods documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/payment_methods.html#/PaymentMethods/get_)\n",
      "discriminator": "paymentType",
      "required": [
        "paymentType"
      ],
      "properties": {
        "id": {
          "type": "string",
          "pattern": "[a-zA-Z0-9-_./*]{1,40}",
          "description": "Id of the payment method."
        },
        "tid": {
          "type": "string",
          "pattern": "[a-zA-Z0-9-._~%:/?#\\[\\]@!$&*+,=]+",
          "description": "temporary Id of the payment method."
        },
        "paymentType": {
          "type": "string",
          "description": "Payment type for that payment method e.g. Payment Card, External Payment.\nTo see the structure of the different payment methods, please check [Payment Methods documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/payment_methods.html#/PaymentMethods/get_)\n",
          "enum": [
            "PaymentCard",
            "ExternalPayment",
            "MilesPayment",
            "AlternativePaymentMethod",
            "VoucherPayment",
            "CustomPayment",
            "PaymentReferenceId",
            "CheckoutFormPayment"
          ]
        },
        "eligibleConditions": {
          "type": "array",
          "description": "eligibleConditions defines if this payment method can be used for current booking when some conidtions are defined\n",
          "items": {
            "$ref": "#/definitions/EligibleCondition"
          }
        }
      },
      "x-api-ref": "PaymentMethod"
    },
    "PaymentMethodsListReply": {
      "type": "object",
      "description": "Reply containing a list of payment methods",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PaymentMethod"
              }
            }
          }
        }
      ],
      "x-api-ref": "PaymentMethodsListReply"
    },
    "PaymentPolicy": {
      "type": "object",
      "description": "Accepted payment methods, several type of form of payment are possible for a guarantee",
      "properties": {
        "creditCards": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "[A-Z]{2}",
            "description": "The vendor code of the credit card\nExamples:\n  - VI for Visa\n  - AX for American Express\n  - MC for MasterCard\n"
          }
        },
        "method": {
          "type": "string",
          "description": "The payment method (CREDIT_CARD, TRAVEL_AGENT_ID, CORPORATE_ID, CHECK, HOTEL_GUEST_ID, MISC_CHARGE_ORDER, ADVANCE_DEPOSIT, COMPANY_ADDRESS)\nTravel Agent = The credit card has to be the one of the Travel Agent\n"
        }
      },
      "x-api-ref": "PaymentPolicy"
    },
    "PaymentRecord": {
      "type": "object",
      "description": "A Payment record contains the payment transaction(s) that has been made to pay the order.\nIt includes details such as the amount covered by the payment as well as the payment method used to proceed with the payment.\nA Payment Record can be associated to flights, travelers, seats and services.\n",
      "required": [
        "paymentTransactions",
        "id"
      ],
      "properties": {
        "id": {
          "description": "Id of the Payment Record",
          "type": "string",
          "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
        },
        "paymentTransactions": {
          "type": "array",
          "description": "A list of payment transaction made on that record.",
          "items": {
            "$ref": "#/definitions/PaymentTransaction"
          }
        },
        "travelerIds": {
          "type": "array",
          "description": "A list of travelers associated to this payment record. If not specified, the payment record applies to all travelers",
          "items": {
            "type": "string",
            "pattern": "[a-zA-Z0-9-]{1,20}"
          }
        },
        "flightIds": {
          "type": "array",
          "description": "A list of flights associated to this payment record. If not specified, the payment record applies to all flights",
          "items": {
            "type": "string",
            "pattern": "[a-zA-Z0-9-]{1,20}"
          }
        },
        "serviceItemIds": {
          "type": "array",
          "description": "A list of Services associated to this payment record.",
          "items": {
            "type": "string",
            "pattern": "[a-zA-Z0-9-:]{1,50}"
          }
        },
        "seatItemIds": {
          "type": "array",
          "description": "A list of Seats associated to this payment record.",
          "items": {
            "type": "string",
            "pattern": "[a-zA-Z0-9-:]{1,50}"
          }
        },
        "insuranceIds": {
          "type": "array",
          "description": "A list of Insurances associated to this payment record.",
          "items": {
            "type": "string"
          }
        },
        "hotelIds": {
          "type": "array",
          "description": "A list of Hotels associated to this payment record.",
          "items": {
            "type": "string"
          }
        }
      },
      "x-api-ref": "PaymentRecord"
    },
    "PaymentRecordDictionary": {
      "type": "object",
      "properties": {
        "currency": {
          "type": "object",
          "description": "Currencies map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
          "additionalProperties": {
            "$ref": "#/definitions/CurrencyDictionaryItem"
          }
        },
        "installmentPlan": {
          "type": "object",
          "description": "Indicates the details of the payment using installments:  - Number of installments - Amount and currency for the first and following installments - Amount and currency of the interest Only available for PaymentCard.\n",
          "additionalProperties": {
            "$ref": "#/definitions/InstallmentPlanData"
          }
        }
      },
      "x-api-ref": "PaymentRecordDictionary"
    },
    "PaymentRecordsData": {
      "type": "object",
      "description": "Reply containing a list of payment records",
      "properties": {
        "splitOrder": {
          "$ref": "#/definitions/SplitData"
        },
        "paymentRecords": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PaymentRecord"
          }
        },
        "notifications": {
          "type": "array",
          "description": "List of result of each notification sent for this order.",
          "items": {
            "$ref": "#/definitions/NotificationResult"
          }
        },
        "links": {
          "type": "array",
          "description": "List of links related to the payment records. They can refer to  the travel documents generated if the Order was ticketed.  Also, they can refer to the redirection url to be used in case the selected payment method requires redirection. Valid 'rel' value for AlternativePaymentMethod is 'pspRedirectionUrl'  where 'psp' refers to Payment Service Provider.  Valid 'rel' value for 3D Secure is 'acsRedirectionUrl'  where 'acs' refers to Access Control Server.",
          "items": {
            "$ref": "#/definitions/HttpRequest"
          }
        }
      },
      "x-api-ref": "PaymentRecordsData"
    },
    "PaymentRecordsReply": {
      "type": "object",
      "description": "Reply containing a list of payment records",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "properties": {
            "data": {
              "$ref": "#/definitions/PaymentRecordsData"
            },
            "dictionaries": {
              "$ref": "#/definitions/PaymentRecordDictionary"
            }
          }
        }
      ],
      "x-api-ref": "PaymentRecordsReply"
    },
    "PaymentRedirectionContext": {
      "type": "object",
      "description": "List of call-back urls to be used when performing a payment authorization with redirection.\n",
      "properties": {
        "encrypted3DSToken": {
          "type": "string",
          "pattern": "[a-zA-Z0-9+./\\r\\n=]+",
          "description": "Only returned for 3DSv2 in endpoint POST/purchase/payment-methods. Payment encrypted token to be used by the 3DS provider  (e.g. Json Web Token - JWT - for Cardinal). This field must be used in Cardinal songbird.js - cardinal.setup(encrypted3DSToken) - to  generate a session id (partner3DSSessionId)."
        },
        "partner3DSSessionId": {
          "type": "string",
          "description": "partner3DSSessionId must be sent in input for POST/purchase/orders/{orderId}/payment-records  to perform the payment with PaymentCard and 3DSv2. This field is generated in Cardinal songbird.js  - cardinal.setup(encrypted3DSToken)."
        },
        "links": {
          "type": "array",
          "description": "Valid rel values are: 'successCallbackURL', 'failCallbackURL' and 'keepAliveCallbackURL' for AlternativePaymentMethod,\nand 'termURL' for PaymentCard enrolled for 3D Secure.\n",
          "items": {
            "$ref": "#/definitions/HttpRequest"
          }
        }
      },
      "x-api-ref": "PaymentRedirectionContext"
    },
    "PaymentRequest": {
      "type": "object",
      "description": "A payment request contains:\n- the payment method to use for the payment\n- the amount and currency to be paid using that method\n\nSupported payment methods are: MilesPayment, PaymentCard, ExternalPayment, VoucherPayment or AlternativePaymentMethod.\n",
      "required": [
        "paymentMethod"
      ],
      "properties": {
        "paymentMethod": {
          "description": "PaymentMethod used for this part of the payment",
          "$ref": "#/definitions/PaymentMethod"
        },
        "amount": {
          "description": "Amount to be paid for this part of the payment",
          "$ref": "#/definitions/Amount"
        }
      },
      "x-api-ref": "PaymentRequest"
    },
    "PaymentResumption": {
      "type": "object",
      "description": "Input data to resume payment after redirection.\nIn case of AlternativePaymentMethod, the API user has to gather the payment  confirmation data received from the PSP and build an HTTP request to confirm payment. The API user has to provide the following information in the HTTP request:\n- Confirmation callback url (of API user) in 'href' field. - Http method to be used (commonly POST or GET) - Payment confirmation data received from the PSP. If http method is 'POST' then this data must be sent in the payload as an array of HttpPayload of 'name' and 'value'. If http method is 'GET', then this data must be sent as query query parameters (e.g. 'http://confCallbackUrl.com?buyer_id=2088102141653014&is_success=T').\nIn case of PaymentCard enrolled for 3D Secure, Payer Authentication Response (PARes if we are on V1) or 3DS Challenge Response (CReq if we are in V2)  must be provided in input.  This information is received from the Access Control Server (ACS) during the redirection.\n",
      "properties": {
        "payerAuthenticationResponse": {
          "type": "string",
          "description": "Payer Authentication Response (PARes). This is the payment confirmation  data received from the Access Control Server in the payment with 3D Secure V1\n"
        },
        "challenge3DSResponse": {
          "type": "string",
          "description": "3DS Challenge Response. This is the payment confirmation data received  from the 3DS Provider (e.g. CyberSource) in the payment with 3D Secure V2\n"
        },
        "link": {
          "type": "object",
          "description": "Http request with payment confirmation data coming from Payment Service Provider (PSP) during the redirection for the AlternativePaymentMethod.\n",
          "$ref": "#/definitions/HttpRequest"
        }
      },
      "x-api-ref": "PaymentResumption"
    },
    "PaymentThirdPartyItems": {
      "type": "object",
      "description": "List of third party items that would be included in the payment or authorization process.\n",
      "properties": {
        "insuranceOfferIds": {
          "type": "array",
          "description": "Insurance offer ID to be paid or authorized",
          "items": {
            "type": "string",
            "pattern": "[A-Za-z0-9=\\-\\/]{1,250}"
          }
        }
      },
      "x-api-ref": "PaymentThirdPartyItems"
    },
    "PaymentTransaction": {
      "type": "object",
      "description": "Form of Payment used to pay flights and / or services",
      "allOf": [
        {
          "$ref": "#/definitions/PaymentRequest"
        },
        {
          "type": "object",
          "properties": {
            "payment3DSVersion": {
              "description": "3DS version used in the payment transaction. Returned only when a 3DS Integrator like Cardinal is used.",
              "type": "string"
            },
            "authorization": {
              "$ref": "#/definitions/PaymentAuthorization"
            },
            "selectedCurrencyConversionProposal": {
              "description": "Details of the selected currency conversion proposal used for the payment transaction",
              "$ref": "#/definitions/PaymentCurrencyConversionProposal"
            },
            "asynchronousPaymentData": {
              "description": "Only available for asynchronous AlternativePaymentMethod. Indicates the necessary asynchronous payment information:  - Reference id of the asynchronous payment transaction - Http request to target the Payment Service Provider (PSP)\n",
              "type": "object",
              "$ref": "#/definitions/AsynchronousPaymentData"
            },
            "installmentPlanCode": {
              "description": "Installment plan code - look up installment plan in the dictionary",
              "type": "string",
              "pattern": "[A-Z0-9]{3,4}",
              "x-dictionary-name": "installmentPlan",
              "x-field-name": "installmentPlan",
              "x-field-type": "InstallmentPlanData"
            },
            "requiredAtAirport": {
              "type": "boolean",
              "description": "Request this card to be presented at the airport counter."
            },
            "additionalPaymentIndicators": {
              "$ref": "#/definitions/AdditionalPaymentIndicators",
              "description": "Specific payment indicators used at Payment time."
            }
          }
        }
      ],
      "x-api-ref": "PaymentTransaction"
    },
    "PaymentWithAssociationRequest": {
      "type": "object",
      "description": "A payment request contains: - the payment method to use for the payment - the amount and currency to be paid using that method - the items to be covered by this payment request\nThe items to be covered by the payment request is optional. Several options are available for the API user: - The API user can provide a specific payment request for seat and services, by providing their ids. - If this is not provided, the payment request will be used to cover any items in the order\nNote that the payment of a specific seat and/or services should cover its full amount i.e. payment of 1 single service with multiple services is not supported.\nSupported payment methods are: MilesPayment, PaymentCard, ExternalPayment or AlternativePaymentMethod.\n",
      "allOf": [
        {
          "$ref": "#/definitions/PaymentRequest"
        },
        {
          "type": "object",
          "properties": {
            "numberOfInstallments": {
              "type": "number",
              "format": "integer",
              "description": "Indicates the number of installments selected to be used for the payment. It is only available for payment with PaymentCard.\n"
            },
            "requiredAtAirport": {
              "type": "boolean",
              "description": "Request this card to be presented at the airport counter."
            },
            "additionalPaymentIndicators": {
              "$ref": "#/definitions/AdditionalPaymentIndicators",
              "description": "Specific payment indicators used at Payment time."
            },
            "serviceItemIds": {
              "type": "array",
              "description": "A list of Services to be paid",
              "items": {
                "type": "string",
                "pattern": "[a-zA-Z0-9-:]{1,50}"
              }
            },
            "seatItemIds": {
              "type": "array",
              "description": "A list of Seats to be paid",
              "items": {
                "type": "string",
                "pattern": "[a-zA-Z0-9-:]{1,50}"
              }
            },
            "insuranceIds": {
              "type": "array",
              "description": "A list of Insurances associated to this payment record.",
              "items": {
                "type": "string"
              }
            },
            "hotelIds": {
              "type": "array",
              "description": "A list of Hotels associated to this payment record.",
              "items": {
                "type": "string"
              }
            },
            "currencyConversionProposalIds": {
              "type": "array",
              "description": "ID of the currency conversion Proposal to be used for the payment",
              "items": {
                "type": "string",
                "pattern": "[a-zA-Z0-9-]+"
              }
            },
            "thirdPartyItems": {
              "type": "object",
              "description": "List of third party items (like external insurance providers) that would be included in the payment process or authorization.\n",
              "$ref": "#/definitions/PaymentThirdPartyItems"
            },
            "authorization": {
              "description": "Authorization information to be sent in input for redirection flows",
              "$ref": "#/definitions/PaymentAuthorizationInput"
            },
            "payerIdentification": {
              "description": "Payer data to enable fraud detection",
              "$ref": "#/definitions/PayerIdentification"
            },
            "travelerIds": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "[a-zA-Z0-9-]{1,20}"
              },
              "description": "List of travelers associated to this payment request. To split payment by traveler, the given payment method will be used to pay for all flights, seats and services of the given traveler."
            }
          }
        }
      ],
      "x-api-ref": "PaymentWithAssociationRequest"
    },
    "PaymentWithoutAssociationRequest": {
      "type": "object",
      "description": "A payment request contains: - the payment method to use for the payment - the amount and currency to be paid using that method - the items to be replaced in the payment request\nThe items to be covered by the payment request are not present cause they are already identified by the payment method to be replaced.\nSupported payment methods to replace are: Asynchronous CustomPayment\n",
      "allOf": [
        {
          "$ref": "#/definitions/PaymentRequest"
        },
        {
          "type": "object",
          "properties": {
            "paymentMethodsToReplace": {
              "type": "array",
              "description": "ID of the payment methods to be replaced",
              "items": {
                "type": "string",
                "pattern": "[a-zA-Z0-9-]+"
              }
            },
            "numberOfInstallments": {
              "type": "number",
              "format": "integer",
              "description": "Indicates the number of installments selected to be used for the payment. It is only available for payment with PaymentCard.\n"
            },
            "requiredAtAirport": {
              "type": "boolean",
              "description": "Request this card to be presented at the airport counter."
            },
            "currencyConversionProposalIds": {
              "type": "array",
              "description": "ID of the currency conversion Proposal to be used for the payment",
              "items": {
                "type": "string",
                "pattern": "[a-zA-Z0-9-]+"
              }
            },
            "authorization": {
              "description": "Authorization information to be sent in input for redirection flows",
              "$ref": "#/definitions/PaymentAuthorizationInput"
            },
            "payerIdentification": {
              "description": "Payer data to enable fraud detection",
              "$ref": "#/definitions/PayerIdentification"
            }
          }
        }
      ],
      "x-api-ref": "PaymentWithoutAssociationRequest"
    },
    "Penalty": {
      "type": "object",
      "description": "Description of the penalty applied for a mini-rule\n",
      "required": [
        "code",
        "price"
      ],
      "properties": {
        "code": {
          "description": "Penalty code\n  BDT - Maximum Reissue\\Refund penalty fee for entire ticket\n  BDC - Maximum Revalidation penalty fee for entire ticket ",
          "type": "string",
          "enum": [
            "BDT",
            "BDC"
          ]
        },
        "description": {
          "description": "Penalty code description",
          "type": "string"
        },
        "price": {
          "$ref": "#/definitions/Price"
        }
      },
      "x-api-ref": "Penalty"
    },
    "Period": {
      "description": "Extended definition of an ElementaryPeriod: the simple dateTime range  (start/end) expresses the default period, on which exceptional/excluded  date times can apply.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ElementaryPeriod"
        },
        {
          "type": "object",
          "properties": {
            "excludedPeriods": {
              "type": "array",
              "description": "Specific dateTime range(s) not included in this Period definition.",
              "items": {
                "$ref": "#/definitions/ElementaryPeriod"
              }
            }
          }
        }
      ],
      "x-api-ref": "Period"
    },
    "PersonalDetails": {
      "type": "object",
      "description": "Hold the information relative to a traveler regarding himself or his travel",
      "properties": {
        "purposeOfVisit": {
          "type": "string",
          "description": "Reason for the traveler to request the entry to the destination country",
          "enum": [
            "business",
            "immigration",
            "studies",
            "tourist",
            "work"
          ]
        },
        "birthDate": {
          "type": "string",
          "description": "Date of birth (date in ISO 8601, e.g. 1980-07-25: YYYY-MM-DD)",
          "format": "date",
          "example": "1980-07-25",
          "x-risk-personal-data-field": "DATE_OF_BIRTH"
        },
        "birthPlace": {
          "type": "string",
          "description": "Birth place",
          "x-risk-personal-data-field": "ADDRESS"
        },
        "name": {
          "description": "Name of the traveler",
          "$ref": "#/definitions/Name"
        },
        "gender": {
          "type": "string",
          "description": "Gender of the passenger. The value 'unspecified' must be used for non-binary gender. The value 'unknown' must be used for undisclosed gender.",
          "enum": [
            "male",
            "female",
            "unspecified",
            "unknown"
          ],
          "x-risk-personal-data-field": "PASSENGER_TYPE"
        },
        "nationalityCode": {
          "type": "string",
          "description": "Code of the nationality appearing on the document expressed using ISO 3166-1 alpha 3 format",
          "pattern": "[a-zA-Z0-9]{3}",
          "x-dictionary-name": "country",
          "x-field-name": "nationality",
          "x-field-type": "string",
          "x-risk-personal-data-field": "CITIZENSHIP"
        },
        "countryOfResidenceCode": {
          "type": "string",
          "description": "Code of the country of the residence of the traveler expressed using ISO 3166-1 format",
          "pattern": "[a-zA-Z0-9]{2}",
          "x-dictionary-name": "country",
          "x-field-name": "countryOfResidence",
          "x-field-type": "string",
          "x-risk-personal-data-field": "ADDRESS"
        }
      },
      "x-api-ref": "PersonalDetails"
    },
    "Phone": {
      "type": "object",
      "description": "Phone information. Derived from Contact object by polymorphism",
      "allOf": [
        {
          "$ref": "#/definitions/Contact"
        },
        {
          "type": "object",
          "properties": {
            "deviceType": {
              "description": "Phone device type",
              "enum": [
                "mobile",
                "landline",
                "fax"
              ],
              "type": "string",
              "default": "landline"
            },
            "purpose": {
              "description": "Contact purpose",
              "type": "string",
              "enum": [
                "standard",
                "notification",
                "emergency",
                "information"
              ],
              "default": "standard"
            },
            "countryPhoneExtension": {
              "description": "Country code phone extension (e.g. +49 for Germany)",
              "type": "string",
              "pattern": "([+]?)([0-9]{1,7})",
              "x-risk-personal-data-field": "PHONE_NUMBER"
            },
            "areaCode": {
              "description": "Phone area code.",
              "type": "string",
              "pattern": "[0-9]{1,4}",
              "x-risk-personal-data-field": "PHONE_NUMBER"
            },
            "number": {
              "description": "Phone number including Work extension (when applicable)",
              "type": "string",
              "pattern": "[0-9]{1,15}(x[0-9]{1,8})?",
              "x-risk-personal-data-field": "PHONE_NUMBER"
            },
            "countryCode": {
              "type": "string",
              "description": "ISO 3166-1 country code. Used to specify the country of the person to be called in case of emergency",
              "pattern": "[a-zA-Z0-9]{2}",
              "x-dictionary-name": "country",
              "x-field-name": "country",
              "x-field-type": "string",
              "x-risk-personal-data-field": "ADDRESS"
            },
            "lang": {
              "description": "Code of the preferred language to be used, e.g. en-GB for English-United Kingdom. [For more details](http://www.lingoes.net/en/translator/langcode.htm)",
              "type": "string",
              "pattern": "[a-zA-Z0-9-]{2,5}"
            },
            "cityCode": {
              "description": "Code of the city (e.g. LON for London) associated to the Phone contact. Information available only at Cart and Order management time.",
              "type": "string",
              "pattern": "[a-zA-Z]{2,3}",
              "x-risk-personal-data-field": "ADDRESS"
            },
            "freeFlowText": {
              "description": "Freetext of the contact, based on actual API user rights.",
              "type": "string",
              "pattern": "[\\u0020-\\u007E]{1,90}"
            }
          },
          "required": [
            "purpose",
            "number"
          ]
        }
      ],
      "x-api-ref": "Phone"
    },
    "PhoneBase": {
      "type": "object",
      "description": "Base element to hold phone information.",
      "properties": {
        "countryPhoneExtension": {
          "description": "Country code phone extension (e.g. +49 for Germany)",
          "type": "string",
          "pattern": "([+]?)([0-9]{1,7})",
          "x-risk-personal-data-field": "PHONE_NUMBER"
        },
        "areaCode": {
          "description": "Phone area code. Not implemented yet",
          "type": "string",
          "pattern": "[0-9]{1,4}",
          "x-risk-personal-data-field": "PHONE_NUMBER"
        },
        "number": {
          "description": "Phone number",
          "type": "string",
          "pattern": "[0-9]{1,15}",
          "x-risk-personal-data-field": "PHONE_NUMBER"
        },
        "countryCode": {
          "type": "string",
          "description": "ISO 3166-1 country code. Used to specify the country of the person to be called in case of emergency",
          "pattern": "[a-zA-Z0-9]{2}",
          "x-dictionary-name": "country",
          "x-field-name": "country",
          "x-field-type": "string",
          "x-risk-personal-data-field": "ADDRESS"
        }
      },
      "required": [
        "number"
      ],
      "x-api-ref": "PhoneBase"
    },
    "PointOfSale": {
      "type": "object",
      "description": "Point of sale id and country code.\n",
      "allOf": [
        {
          "$ref": "#/definitions/PointOfSaleCommon"
        },
        {
          "type": "object",
          "required": [
            "countryCode",
            "pointOfSaleId"
          ],
          "properties": {
            "countryCode": {
              "type": "string",
              "description": "ISO 3166-1 country code. Used to specify the country associated to the PointOfSale.",
              "pattern": "[a-zA-Z0-9]{2}",
              "x-dictionary-name": "country",
              "x-field-name": "country",
              "x-field-type": "string",
              "x-risk-personal-data-field": "ADDRESS"
            }
          }
        }
      ],
      "x-api-ref": "PointOfSale"
    },
    "PointOfSaleCommon": {
      "type": "object",
      "description": "Point of sale id\n",
      "required": [
        "pointOfSaleId"
      ],
      "properties": {
        "pointOfSaleId": {
          "description": "Unique Identifier for the PointOfSale e.g. 'HEL1A08MO'",
          "type": "string"
        }
      },
      "x-api-ref": "PointOfSaleCommon"
    },
    "PolicyDetails": {
      "type": "object",
      "properties": {
        "guarantee": {
          "$ref": "#/definitions/GuaranteePolicy"
        },
        "deposit": {
          "$ref": "#/definitions/GuaranteePolicy"
        },
        "prepay": {
          "$ref": "#/definitions/GuaranteePolicy"
        },
        "holdTime": {
          "$ref": "#/definitions/GuaranteePolicy"
        },
        "cancellations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CancellationPolicy"
          }
        },
        "checkInOut": {
          "$ref": "#/definitions/CheckInOutPolicy"
        }
      },
      "x-api-ref": "PolicyDetails"
    },
    "PostOrderCarRequest": {
      "type": "object",
      "description": "Input to add cars to an order",
      "required": [
        "carRequests"
      ],
      "properties": {
        "carRequests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CarOffersSelectionRequest"
          }
        },
        "paymentRequests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PaymentWithAssociationRequest"
          }
        }
      },
      "x-api-ref": "PostOrderCarRequest"
    },
    "PostOrderInsuranceRequest": {
      "type": "object",
      "required": [
        "insurances"
      ],
      "properties": {
        "insurances": {
          "type": "array",
          "description": "List of insurances",
          "items": {
            "$ref": "#/definitions/InsuranceItemRequest"
          },
          "maxItems": 1
        },
        "paymentRequests": {
          "type": "array",
          "description": "A list of payment request",
          "items": {
            "$ref": "#/definitions/PaymentWithAssociationRequest"
          },
          "maxItems": 1
        }
      },
      "x-api-ref": "PostOrderInsuranceRequest"
    },
    "PostOrderRequest": {
      "type": "object",
      "description": "Input to create an order from a cart",
      "properties": {
        "numericId": {
          "description": "Preferred numeric id that the traveler can use to retrieve the order later on",
          "type": "string",
          "pattern": "([0-9]{7,11})|([0-9]{13,16})",
          "x-risk-personal-data-field": "PNR_RECORD_LOCATOR"
        },
        "remarks": {
          "type": "array",
          "description": "Remarks (RM) to be inserted in the order",
          "items": {
            "$ref": "#/definitions/Remark"
          }
        },
        "otherServiceInformations": {
          "type": "array",
          "description": "Other service information elements (OSI) to be inserted in the order",
          "items": {
            "$ref": "#/definitions/OtherServiceInformation"
          }
        },
        "specialKeywords": {
          "type": "array",
          "description": "Special Keyword elements (SK) to be inserted in the order",
          "items": {
            "$ref": "#/definitions/SpecialKeyword"
          }
        },
        "specialServiceRequests": {
          "type": "array",
          "description": "Special Services Request(SSR) stored in the order",
          "items": {
            "$ref": "#/definitions/SpecialServiceRequest"
          }
        },
        "formOfIdentifications": {
          "type": "array",
          "description": "Form of identification requests for travelers. Several FOIDs can be entered for each traveler.",
          "items": {
            "$ref": "#/definitions/FormOfIdentificationDetail"
          }
        },
        "paymentRequests": {
          "type": "array",
          "description": "A list of payment request. Each payment request contains a payment method, and the amount to be paid using that method.\nFor example, to pay using both monetary currency and miles, the payment is split into a partial payment for the miles\namount and a second partial payment is used to represent the amount to be paid using Credit card.\nIf you decide to benefit from validation of the amounts, amounts need to be provided for each payment request.\n",
          "items": {
            "$ref": "#/definitions/PaymentWithAssociationRequest"
          }
        },
        "notifications": {
          "type": "array",
          "description": "Notifications to be processed after issuance of this order.",
          "items": {
            "$ref": "#/definitions/NotificationRequest"
          }
        },
        "minutesBeforeExpiration": {
          "type": "integer",
          "description": "Number of minutes requested to keep the order on hold before expiration. The order expires if the associated payment not performed within this delay.\nIf both minutesBeforeExpiration and expirationDateTime are provided in the input, minutesBeforeExpiration is ignored and expirationDateTime is considered for the order expiry date.\n",
          "minimum": 6
        },
        "expirationDateTime": {
          "description": "Date and time with the following format \"yyyy-MM-dd'T'HH:mm:ssZ\" (e.g. 2018-02-10T20:40:00+02:00).The order expires if the associated payment not performed within this date.",
          "type": "string",
          "format": "date-time",
          "example": "2018-02-10T20:40:00+02:00"
        }
      },
      "x-api-ref": "PostOrderRequest"
    },
    "PostOrderSeatRequest": {
      "type": "object",
      "description": "Input to add seats to an order",
      "properties": {
        "remarks": {
          "type": "array",
          "description": "Remarks (RM) to be inserted in the order",
          "items": {
            "$ref": "#/definitions/Remark"
          }
        },
        "otherServiceInformations": {
          "type": "array",
          "description": "Other service information elements (OSI) to be inserted in the order",
          "items": {
            "$ref": "#/definitions/OtherServiceInformation"
          }
        },
        "specialKeywords": {
          "type": "array",
          "description": "Special Keyword elements (SK) to be inserted in the order",
          "items": {
            "$ref": "#/definitions/SpecialKeyword"
          }
        },
        "seats": {
          "type": "array",
          "description": "List of seats (chargeable or free)",
          "items": {
            "$ref": "#/definitions/SeatItemRequest"
          }
        },
        "paymentRequests": {
          "type": "array",
          "description": "A list of payment request. Each payment request contains a payment method, and the amount to be paid using that method.\nFor example, to pay using both monetary currency and miles, the payment is split into a partial payment for the miles\namount and a second partial payment is used to represent the amount to be paid using Credit card.\nIf you decide to benefit from validation of the amounts, amounts need to be provided for each payment request.\n",
          "items": {
            "$ref": "#/definitions/PaymentWithAssociationRequest"
          }
        },
        "milesRedemptionDetails": {
          "description": "Information to be provided in order to price the seats in miles.\n\nProvide either a frequent flyer card ID or a frequent flyer card number along with its company code.\n",
          "$ref": "#/definitions/ServiceMilesRedemptionRequest"
        }
      },
      "x-api-ref": "PostOrderSeatRequest"
    },
    "PostOrderServiceRequest": {
      "type": "object",
      "description": "Input to add services to an order",
      "properties": {
        "remarks": {
          "type": "array",
          "description": "Remarks (RM) to be inserted in the order",
          "items": {
            "$ref": "#/definitions/Remark"
          }
        },
        "otherServiceInformations": {
          "type": "array",
          "description": "Other service information elements (OSI) to be inserted in the order",
          "items": {
            "$ref": "#/definitions/OtherServiceInformation"
          }
        },
        "specialKeywords": {
          "type": "array",
          "description": "Special Keyword elements (SK) to be inserted in the order",
          "items": {
            "$ref": "#/definitions/SpecialKeyword"
          }
        },
        "services": {
          "type": "array",
          "description": "List of services (chargeable or free)",
          "items": {
            "$ref": "#/definitions/ServiceItemRequest"
          }
        },
        "paymentRequests": {
          "type": "array",
          "description": "A list of payment request. Each payment request contains a payment method, and the amount to be paid using that method.\nFor example, to pay using both monetary currency and miles, the payment is split into a partial payment for the miles\namount and a second partial payment is used to represent the amount to be paid using Credit card.\nIf you decide to benefit from validation of the amounts, amounts need to be provided for each payment request.\n",
          "items": {
            "$ref": "#/definitions/PaymentWithAssociationRequest"
          }
        },
        "milesRedemptionDetails": {
          "description": "Information to be provided in order to price the services in miles.\n\nProvide either a frequent flyer card ID or a frequent flyer card number along with its company code.\n",
          "$ref": "#/definitions/ServiceMilesRedemptionRequest"
        }
      },
      "x-api-ref": "PostOrderServiceRequest"
    },
    "PowerAmenity": {
      "type": "object",
      "description": "Details of Power Amenity\n",
      "properties": {
        "powerType": {
          "description": "Type of power outlet. NONE indicates it is not available for the specific cabin.\n",
          "type": "string",
          "enum": [
            "PLUG",
            "ADAPTOR",
            "NO_POWER_AVAILABLE",
            "USB_PORT",
            "NONE"
          ]
        },
        "isChargeable": {
          "description": "Defines if the power amenity is chargeable",
          "type": "boolean"
        }
      },
      "x-api-ref": "PowerAmenity"
    },
    "PreviousSelectedBound": {
      "type": "object",
      "description": "Details of selected bound",
      "required": [
        "priceDifference"
      ],
      "properties": {
        "priceDifference": {
          "$ref": "#/definitions/VariationAmount",
          "description": "Difference in price for selected bound in previous step. For example: -30 or 20."
        },
        "unitPriceDifferences": {
          "type": "array",
          "description": "Price difference per passenger compared to the selected bound in previous step.",
          "items": {
            "$ref": "#/definitions/UnitPriceDifference"
          }
        },
        "milesConversionPriceDifference": {
          "description": "Contains price difference information about converted miles and non converted cash when the Award converter or the Miles&Cash slider is used",
          "type": "object",
          "$ref": "#/definitions/MilesConversion"
        }
      },
      "x-api-ref": "PreviousSelectedBound"
    },
    "Price": {
      "type": "object",
      "required": [
        "total",
        "currencyCode",
        "totalTaxes"
      ],
      "description": "Price breakdowns expressed as exhaustive amounts",
      "properties": {
        "base": {
          "description": "Base price. It includes some surcharges, but no taxes nor fees",
          "type": "integer",
          "format": "int64",
          "minimum": 0
        },
        "baseDetails": {
          "description": "Details about the price base. These details are not impacting the total computation.",
          "$ref": "#/definitions/PriceBaseDetails"
        },
        "total": {
          "description": "Total price, including base fare, taxes, surcharges and fees (excluding credit or debit card fees)",
          "type": "integer",
          "format": "int64",
          "minimum": 0
        },
        "currencyCode": {
          "description": "ISO currency [code](http://www.iso.org/iso/home/standards/currency_codes.htm). It allows accessing the currency dictionary, containing any information related to the currency: in particular `decimalPlaces`  can be used to determine the amount actual value and display. Example: the numerical amount `1955` associated to the `EUR` currency code (`decimalPlaces: 2`) corresponds to: `19,55 Euro`. For points (or miles) the code associated is `MIL`, for compensation/upgrade credits `ECR`.",
          "type": "string",
          "pattern": "[A-Z]{3}",
          "x-dictionary-name": "currency",
          "x-field-name": "currency",
          "x-field-type": "CurrencyDictionaryItem"
        },
        "taxes": {
          "description": "Taxes breakdown",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tax"
          }
        },
        "totalTaxes": {
          "description": "Sum of all taxes (including surcharges)",
          "type": "integer",
          "format": "int64",
          "minimum": 0
        },
        "surcharges": {
          "description": "Surcharges breakdown.The Surcharge details will be unavailable in the shopping response",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Surcharge"
          }
        },
        "totalSurcharges": {
          "description": "Sum of all surcharges. The Surcharge details will be unavailable in the shopping response",
          "type": "integer",
          "format": "int64",
          "minimum": 0
        },
        "fees": {
          "description": "Fees breakdown",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Fee"
          }
        },
        "totalFees": {
          "description": "Sum of all fees (max amount is not included)",
          "type": "integer",
          "format": "int64",
          "minimum": 0
        },
        "discount": {
          "description": "Details about the discount when it is applied",
          "$ref": "#/definitions/Discount"
        },
        "conditions": {
          "$ref": "#/definitions/PricingConditions",
          "description": "Conditions for the price validity"
        }
      },
      "x-api-ref": "Price"
    },
    "PriceBaseDetails": {
      "type": "object",
      "description": "Details about the price base. These details are not impacting the total computation.",
      "properties": {
        "surcharges": {
          "description": "List of surcharges.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Surcharge"
          }
        }
      },
      "x-api-ref": "PriceBaseDetails"
    },
    "PriceVariation": {
      "title": "Price variation",
      "description": "it gathers the information about a single rate variation",
      "type": "object",
      "properties": {
        "startDate": {
          "description": "Begin date of the rate change\nFormat: YYYY-MM-DD\n",
          "type": "string",
          "format": "date"
        },
        "endDate": {
          "description": "End date of the rate change\nFormat: YYYY-MM-DD\n",
          "type": "string",
          "format": "date"
        },
        "base": {
          "description": "Amount of the rate change period before tax",
          "$ref": "#/definitions/Amount"
        },
        "total": {
          "description": "Amount of the rate change period after tax",
          "$ref": "#/definitions/Amount"
        }
      },
      "required": [
        "startDate",
        "endDate"
      ],
      "x-api-ref": "PriceVariation"
    },
    "PriceVariations": {
      "type": "object",
      "description": "it shows the rate changes during the stay and the average daily rate",
      "properties": {
        "average": {
          "$ref": "#/definitions/BaseTotalAmount"
        },
        "changes": {
          "description": "A collection of rate changes",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PriceVariation"
          }
        }
      },
      "x-api-ref": "PriceVariations"
    },
    "PricingConditions": {
      "type": "object",
      "description": "Conditions for the price validity",
      "properties": {
        "itemOccurrence": {
          "$ref": "#/definitions/ItemOccurrence",
          "description": "Range of item occurrence for which the current prices apply"
        }
      },
      "x-api-ref": "PricingConditions"
    },
    "PromocodeEligibleCondition": {
      "type": "object",
      "description": "PromocodeEligileCondition defines the eligible condition regarding to the promocode. It's attached with one payment method, it defines if this payment method can be used to pay the booking or not when the condition is matched      ",
      "allOf": [
        {
          "$ref": "#/definitions/EligibleCondition"
        },
        {
          "type": "object",
          "properties": {
            "binRanges": {
              "description": "For a CC, this defines the binRange can be used or not for this booking if the promocode is present",
              "type": "array",
              "items": {
                "$ref": "#/definitions/BinRange"
              }
            }
          }
        }
      ],
      "x-api-ref": "PromocodeEligibleCondition"
    },
    "Promotion": {
      "type": "object",
      "description": "This object contains a list of detailed information associated to a promotion",
      "properties": {
        "code": {
          "description": "Value of the promotion",
          "type": "string",
          "pattern": "^[a-zA-Z0-9\\-\\_]{2,15}$|^$"
        },
        "airlineCode": {
          "description": "Code of the airline which is owner of the promotionCode.\nNote: If promotionCode provided in input and if no promotionAirlineCode provided in input, then airline used for the promocode computation is the one of the calling UI.",
          "type": "string",
          "pattern": "[A-Z0-9]{2,3}"
        }
      },
      "required": [
        "code"
      ],
      "x-api-ref": "Promotion"
    },
    "Provider": {
      "type": "object",
      "required": [
        "providerCode",
        "isAirlineMerchant"
      ],
      "description": "Provider object for teaser recommandation",
      "properties": {
        "providerCode": {
          "description": "Provider code",
          "type": "string"
        },
        "isAirlineMerchant": {
          "description": "Flag to indicate if the provider merchant. This field is Deprecated, and a false value will be returned by default.",
          "type": "boolean"
        }
      },
      "x-api-ref": "Provider"
    },
    "RateFamily": {
      "description": "it contains the rate code family grouping various rate plan codes belonging to the same family and it indicates the type of the rate",
      "properties": {
        "code": {
          "description": "The estimated rate family (PRO,FAM,GOV)",
          "type": "string",
          "pattern": "[A-Z0-9]{3}"
        },
        "type": {
          "description": "The type of the rate (public=P, negotiated=N, conditional=C)",
          "type": "string",
          "pattern": "[PNC]"
        }
      },
      "x-api-ref": "RateFamily"
    },
    "Rating": {
      "type": "object",
      "properties": {
        "globalScore": {
          "type": "number",
          "format": "float",
          "description": "Overall numeric score returned by provider based on customers feedback regarding the service received. The breakdown of this rating is provided in `categories` according to different criteria.\n",
          "example": "7.0"
        },
        "globalScoreText": {
          "type": "string",
          "description": "The text associated to the globalScore.\nFor example, with a  `globalScore` of '5.0', a potential value for this attribute could be: 'Acceptable'.\nPlease note that the text description is defined by car providers, therefore the relation between `globalScore` and  `globalScoreText` might not be in line.\n",
          "example": "\"Fine\"\n\"Acceptable\"\n\"Very good\"\n"
        },
        "criteria": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RatingCriterion"
          },
          "description": "A list of ratings collected for the service received in a provider location. Each rating will contain the valoration for a particular category (i.e. cleanliness)\n"
        }
      },
      "x-api-ref": "Rating"
    },
    "RatingCriterion": {
      "type": "object",
      "description": "A rating stucture used to convey feedback (score) for each criteria\nExample: criterion with code 'cleanliness' and score '10'\n",
      "properties": {
        "code": {
          "type": "string",
          "description": "Code identifying the rating criterion. It defines a property in which the customer feedback is measured.",
          "example": "cleanliness"
        },
        "score": {
          "type": "string",
          "description": "The actual assessment of the customer. This could be a numeric value score (i.e. '7.7') or a nominal value (i.e. 'Very good'). In case of numeric value, it will be in a 0-to-10 rating scale.\n"
        }
      },
      "x-api-ref": "RatingCriterion"
    },
    "RawAirOfferCondition": {
      "type": "object",
      "description": "Full fare conditions applicable to the requested passengers  and flights being part of the itinerary.\n",
      "properties": {
        "travelerIds": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "[a-zA-Z0-9-]{1,20}"
          }
        },
        "flightIds": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "[a-zA-Z0-9-]{1,20}"
          }
        },
        "category": {
          "description": "ATPCO category of the condition (e.g. Advance Purchase, Change conditions, Stopover ...)\n",
          "type": "string",
          "enum": [
            "advancePurchase",
            "minimumStay",
            "maximumStay",
            "change",
            "refund",
            "salesRestrictions",
            "flightApplication",
            "childDiscounts",
            "tourConductor",
            "agentsDiscounts",
            "otherDiscounts",
            "stopovers",
            "transfers",
            "endorsement",
            "combinability",
            "higherIntermediatePoints",
            "miscellaneous",
            "seasonality",
            "blackouts",
            "dayTime",
            "travelRestrictions",
            "penalties",
            "surcharges",
            "eligibility",
            "voluntaryRefunds",
            "reservationsAndTicketing",
            "accompaniedTravel",
            "groups",
            "tours",
            "fareByRule",
            "visitAnotherCountry",
            "negotiatedFares",
            "ruleApplication",
            "other"
          ],
          "x-dictionary-name": "airOfferConditionCategory",
          "x-field-name": "airOfferConditionCategory",
          "x-field-type": "string"
        },
        "rawDescription": {
          "type": "string",
          "description": "Raw description corresponding to the fare conditions of given fare category"
        }
      },
      "x-api-ref": "RawAirOfferCondition"
    },
    "RawAirOfferConditionsReply": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RawAirOfferCondition"
              }
            },
            "dictionaries": {
              "$ref": "#/definitions/AirOfferConditionDictionary"
            }
          }
        }
      ],
      "x-api-ref": "RawAirOfferConditionsReply"
    },
    "ReasonForIssuance": {
      "type": "object",
      "description": "Reason for issuance code and sub code (RFIC & RFISC)",
      "properties": {
        "code": {
          "description": "Reason for issuance code (RFIC)",
          "type": "string",
          "example": "C"
        },
        "subCode": {
          "description": "Reason for issuance sub code (RFISC)",
          "type": "string",
          "example": "0GO"
        }
      },
      "x-api-ref": "ReasonForIssuance"
    },
    "RecoveredServiceItem": {
      "type": "object",
      "description": "This object contains the identifier of the recovered service after a disruption or a  self reaccommodation",
      "properties": {
        "serviceId": {
          "description": "Id of the recovered service",
          "type": "string"
        }
      },
      "x-api-ref": "RecoveredServiceItem"
    },
    "RegulatoryAddress": {
      "type": "object",
      "description": "Hold an address that will be provided to authorities",
      "required": [
        "type"
      ],
      "properties": {
        "lines": {
          "description": "Line 1 = Street address, Line 2 = Apartment, suite, unit, building, floor, etc",
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "[a-zA-Z0-9 ]{1,70}"
          },
          "maxItems": 2,
          "minItems": 1,
          "x-risk-personal-data-field": "ADDRESS"
        },
        "zipCode": {
          "description": "Post office code number",
          "type": "string",
          "pattern": "[a-zA-Z0-9 ]{1,20}",
          "x-risk-personal-data-field": "ADDRESS"
        },
        "countryCode": {
          "type": "string",
          "description": "ISO 3166-1(alpha-2,3) country code",
          "pattern": "[a-zA-Z0-9]{2,3}",
          "x-dictionary-name": "country",
          "x-field-name": "country",
          "x-field-type": "string",
          "x-risk-personal-data-field": "ADDRESS"
        },
        "cityName": {
          "type": "string",
          "description": "Localized name of the city",
          "pattern": "[a-zA-Z -]{1,35}",
          "x-risk-personal-data-field": "ADDRESS"
        },
        "stateCode": {
          "description": "State code (upto 3 character standard IATA state code)",
          "type": "string",
          "pattern": "[a-zA-Z0-9]{1,3}",
          "x-risk-personal-data-field": "ADDRESS"
        },
        "postalBox": {
          "description": "Postal Office Box",
          "type": "string",
          "pattern": "[a-zA-Z0-9]{1,10}",
          "x-risk-personal-data-field": "ADDRESS"
        },
        "text": {
          "type": "string",
          "description": "Field containing a full unformatted address. Only applicable when the fields lines, postalCode, countryCode, cityName are not filled.        "
        },
        "type": {
          "type": "string",
          "description": "Type of regulatory address",
          "enum": [
            "homeAddress",
            "destinationAddress"
          ]
        }
      },
      "x-api-ref": "RegulatoryAddress"
    },
    "RegulatoryApisDetail": {
      "type": "object",
      "discriminator": "regulatoryApisType",
      "description": "Object used to manipulate (add, read, update) regulatory details (APIS data).\nFor each operation only one type of `RegulatoryApisDetail` could be used: `regulatoryDocument` or `RegulatoryAddress`\nTo see the structure of the different types of APIS Regulatory details, please see [APIS documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/apis.html#/RegulatoryApisType/get_)\n",
      "required": [
        "regulatoryApisType"
      ],
      "properties": {
        "id": {
          "description": "Regulatory request ID",
          "pattern": "[a-zA-Z0-9-]{1,20}",
          "type": "string"
        },
        "tid": {
          "description": "Temporary id that can be used to associate requested and returned regulatory request. It is only valid the time of the transaction.",
          "type": "string",
          "pattern": "[a-zA-Z0-9_]{1,20}"
        },
        "flightIds": {
          "type": "array",
          "description": "Segment(s) associated to this regulatory request. If not provided, the request applies to all the segments of the itinerary",
          "items": {
            "type": "string",
            "pattern": "[a-zA-Z0-9-]{1,20}",
            "minItems": 1
          }
        },
        "airlineCode": {
          "description": "Two letter IATA code (http://www.iata.org/publications/Pages/code-search.aspx) associated to the marketing airline for which the regulatory document is used. Not applicable for the request, returned in the order response only.",
          "type": "string",
          "pattern": "[A-Z0-9]{2}[A-Z]*"
        },
        "regulatoryApisType": {
          "type": "string",
          "description": "type of APIS regulatory detail. To see the structure of the different types of APIS type, please see [APIS documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/apis.html#/RegulatoryApisType/get_)",
          "enum": [
            "ApisDetailRegulatoryDocument",
            "ApisDetailAddress",
            "ApisDetailFromReference"
          ]
        }
      },
      "x-api-ref": "RegulatoryApisDetail"
    },
    "RegulatoryApisDetailListReply": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RegulatoryApisDetail"
              }
            }
          }
        }
      ],
      "x-api-ref": "RegulatoryApisDetailListReply"
    },
    "RegulatoryApisDocument": {
      "type": "object",
      "description": "Regulatory document (passport, visa, etc.) to be used for specifying Advance Passenger Information details",
      "allOf": [
        {
          "$ref": "#/definitions/RegulatoryDocument"
        },
        {
          "type": "object",
          "required": [
            "documentType"
          ],
          "properties": {
            "documentType": {
              "description": "Type of the document : passport, visa, identityCard, workPermit...",
              "type": "string",
              "enum": [
                "passport",
                "passportCard",
                "identityCard",
                "crewMemberCertificate",
                "borderCrossingCard",
                "militaryIdentityCard",
                "reEntryPermit",
                "naturalisationCardUS",
                "approvedIdentityDocument",
                "visa",
                "residentAlienCard",
                "permanentResidentCard",
                "redressNumber",
                "knownTravellerNumber",
                "nexusCard"
              ]
            }
          }
        }
      ],
      "x-api-ref": "RegulatoryApisDocument"
    },
    "RegulatoryDetail": {
      "type": "object",
      "description": "Detail which are of border control value when entering another country or overall security.\nIt can be a travel documents (passport, visa), an address (destination address, home address), a phone number (emergency contact), personal details (gender, date of birth, purpose of visit)\nThe different possibilities are exclusive. A regulatoryDetail will contain only one of his child (document, address, phoneNumber, personalDetails)\n",
      "properties": {
        "id": {
          "type": "string",
          "description": "Regulatory Detail unique id"
        },
        "document": {
          "$ref": "#/definitions/ExtendedRegulatoryDocument"
        },
        "address": {
          "$ref": "#/definitions/RegulatoryAddress"
        },
        "phoneNumber": {
          "$ref": "#/definitions/RegulatoryPhoneNumber"
        },
        "personalDetails": {
          "$ref": "#/definitions/PersonalDetails"
        }
      },
      "x-api-ref": "RegulatoryDetail"
    },
    "RegulatoryDetailsAddRequest": {
      "type": "object",
      "description": "Provide the list of regulatory details to be added as well as those to be declined",
      "required": [
        "detailsToAdd",
        "detailsToDecline"
      ],
      "properties": {
        "detailsToAdd": {
          "description": "List of regulatory details to add to the traveler for his journey",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RegulatoryDetail"
          }
        },
        "detailsToDecline": {
          "description": "List of regulatory details to be declined for the traveler for his journey (see RegulatoryType for the list of possibilities)",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-api-ref": "RegulatoryDetailsAddRequest"
    },
    "RegulatoryDetailsCategoryRequirement": {
      "type": "object",
      "description": "It provides the details categories (i.e. Identity document, greenCard, etc.) to be fulfilled and which details could be used for each category (i.e. Passport could be used as Identity document)",
      "required": [
        "detailsCategory",
        "detailsChoices",
        "isOptional"
      ],
      "properties": {
        "detailsCategory": {
          "description": "Type of the details category : Identity document, Visa document, ResidentCard document...",
          "type": "string",
          "enum": [
            "personalDetails",
            "greenCard",
            "identityDocument",
            "countryEntryDocument",
            "destinationAddress",
            "emergencyContact",
            "homeAddress",
            "permanentResidentCard",
            "additionalSecurityInfo"
          ]
        },
        "detailsChoices": {
          "description": "List of details that would fullfill the regulatory need for this category (only one is required)",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RegulatoryDetailsRequirements"
          }
        },
        "isOptional": {
          "description": "Indicate if the category has to be fullfilled or if it is an optional category that can be skipped by the traveler",
          "type": "boolean"
        }
      },
      "x-api-ref": "RegulatoryDetailsCategoryRequirement"
    },
    "RegulatoryDetailsListReply": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RegulatoryDetailsReplyData"
              }
            },
            "dictionaries": {
              "$ref": "#/definitions/JourneyElementDictionary"
            }
          }
        }
      ],
      "x-api-ref": "RegulatoryDetailsListReply"
    },
    "RegulatoryDetailsReply": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/RegulatoryDetailsReplyData"
            },
            "dictionaries": {
              "$ref": "#/definitions/CountryDictionary"
            }
          }
        }
      ],
      "x-api-ref": "RegulatoryDetailsReply"
    },
    "RegulatoryDetailsReplyData": {
      "type": "object",
      "description": "Reply data following a regulatory details call. It contains the list of stored details associated with the resource of the query.\nIf there was some regulatory details declined by the traveler, the list of details is provided.\nIf the authorities  are requesting more details, it will provide the list of missing requirements.\nFinally, the status cleared will indicate if everything is cleared for the authorities to be allowed to board the plane.\n",
      "required": [
        "statusCleared"
      ],
      "properties": {
        "travelerId": {
          "type": "string",
          "description": "Traveler Id of the regulatory details",
          "pattern": "[a-zA-Z0-9-]{1,20}",
          "x-dictionary-name": "traveler",
          "x-field-name": "traveler",
          "x-field-type": "Traveler"
        },
        "statusCleared": {
          "description": "Indicate if the passenger is cleared to board in regard only to the regulatory requirements for his journey.",
          "type": "boolean"
        },
        "storedDetails": {
          "description": "List of regulatory details already provided for the traveler for his journey",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RegulatoryDetail"
          }
        },
        "declinedDetails": {
          "description": "List of regulatory details that have be declined by the traveler for his journey",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "personalDetails",
              "countryOfResidence",
              "passport",
              "identityCard",
              "airAttendanceLicense",
              "birthCertificate",
              "borderCrossingCard",
              "drivingLicense",
              "flightMechanicalLicense",
              "foreignNationalRegistration",
              "loyalAttorneyIdentification",
              "militaryIdentityCard",
              "operationalDispatcherLicense",
              "pilotLicense",
              "reEntryPermit",
              "naturalisationCardUS",
              "workPermit",
              "visa",
              "residentAlienCard",
              "permanentResidentCard",
              "destinationAddress",
              "homeAddress",
              "emergencyContact",
              "redressNumber",
              "knownTravelerNumber",
              "homeReentryPermit",
              "chinaTravelPermit",
              "chinaTravelPermitHongKongMacao",
              "chinaExitAndEntryPermit",
              "residentTravelPermit",
              "residentTravelPermitToFromTaiwanAndChina",
              "residentTravelPermitToFromHongKongMacao",
              "residentTravelPermitToHongKongMacao",
              "taiwanExitAndEntryPermit",
              "nexusCard"
            ]
          }
        },
        "missingDetails": {
          "description": "List of regulatory details that need to be fullfilled for the passenger to be allowed to board the plane",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RegulatoryDetailsCategoryRequirement"
          }
        }
      },
      "x-api-ref": "RegulatoryDetailsReplyData"
    },
    "RegulatoryDetailsRequirements": {
      "type": "object",
      "description": "It specifies the mandatory information to be provided for a specific RegulatoryDetail type",
      "allOf": [
        {
          "$ref": "#/definitions/RegulatoryType"
        },
        {
          "type": "object",
          "required": [
            "canBeDeclined",
            "detailsType",
            "requiredDetailsFields"
          ],
          "properties": {
            "detailsType": {
              "description": "Type of the regulatory details to be filled",
              "type": "string",
              "enum": [
                "document",
                "personalDetails",
                "address",
                "phone"
              ]
            },
            "requiredDetailsFields": {
              "description": "List of the fields required for those details",
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "name",
                  "birthDate",
                  "birthPlace",
                  "gender",
                  "number",
                  "nationalityCountryCode",
                  "expiryDate",
                  "effectiveDate",
                  "issuanceDate",
                  "issuanceLocation",
                  "issuanceCountry",
                  "purposeOfVisit",
                  "lines",
                  "zipCode",
                  "cityName",
                  "stateCode",
                  "countryPhoneExtension",
                  "countryOfResidence"
                ]
              }
            },
            "canBeDeclined": {
              "description": "Indicate if the regulatory details can be declined by the traveler.",
              "type": "boolean"
            },
            "regulatoryCountryCode": {
              "description": "Indicate for which regulatory country the requirement is for Code of the country in ISO 3166-1 alpha 3 format.",
              "pattern": "[a-zA-Z0-9]{3}",
              "type": "string",
              "x-risk-personal-data-field": "ADDRESS"
            }
          }
        }
      ],
      "x-api-ref": "RegulatoryDetailsRequirements"
    },
    "RegulatoryDocument": {
      "type": "object",
      "description": "Regulatory document (passport, visa, etc.) necessary for the travel",
      "properties": {
        "number": {
          "type": "string",
          "description": "Document number (as it appears on the document)",
          "example": "QFU514563221J",
          "x-risk-personal-data-field": "NATIONAL_DOCUMENT_NUMBER"
        },
        "effectiveDate": {
          "type": "string",
          "description": "Date at which the document starts to be valid (date in ISO 8601, e.g. 2002-07-25: YYYY-MM-DD)",
          "format": "date",
          "example": "2002-07-26"
        },
        "issuanceDate": {
          "type": "string",
          "description": "Date at which the document has been issued (date in ISO 8601, e.g. 2002-07-25: YYYY-MM-DD)",
          "format": "date",
          "example": "2002-07-25"
        },
        "expiryDate": {
          "type": "string",
          "description": "Date after which the document is not valid anymore (date in ISO 8601, e.g. 2002-07-25: YYYY-MM-DD) Mandatory for documentType 'visa'",
          "format": "date",
          "example": "2042-07-24"
        },
        "issuanceLocation": {
          "type": "string",
          "description": "A more precise information concerning the place where the document has been issued, when available.\nIt may be a country, a state, a city or any other type of location. e.g. New-York\n",
          "x-risk-personal-data-field": "ADDRESS"
        },
        "issuanceCountryCode": {
          "type": "string",
          "description": "Document issuance country (2-letters) code using ISO 3166-1 alpha 2 & 3 format Mandatory for documentType 'visa', 'knownTravellerNumber' and 'redressNumber'",
          "pattern": "[a-zA-Z0-9]{2,3}",
          "x-dictionary-name": "country",
          "x-field-name": "issuanceCountry",
          "x-field-type": "string",
          "x-risk-personal-data-field": "ADDRESS"
        },
        "name": {
          "description": "Document holder name",
          "$ref": "#/definitions/NameRegulatory"
        },
        "nationalityCode": {
          "type": "string",
          "description": "Code of the nationality appearing on the document expressed using ISO 3166-1 alpha 2 & 3 format",
          "pattern": "[a-zA-Z0-9]{2,3}",
          "x-dictionary-name": "country",
          "x-field-name": "nationality",
          "x-field-type": "string",
          "x-risk-personal-data-field": "CITIZENSHIP"
        },
        "gender": {
          "type": "string",
          "description": "Gender of the passenger. The value 'unspecified' must be used for non-binary gender. The value 'unknown' must be used for undisclosed gender.",
          "enum": [
            "male",
            "female",
            "unspecified",
            "unknown"
          ],
          "x-risk-personal-data-field": "PASSENGER_TYPE"
        },
        "birthDate": {
          "type": "string",
          "description": "Date of birth (date in ISO 8601, e.g. 1980-07-25: YYYY-MM-DD)",
          "format": "date",
          "example": "1980-07-25",
          "x-risk-personal-data-field": "DATE_OF_BIRTH"
        },
        "birthPlace": {
          "type": "string",
          "description": "Birth place as indicated on the document",
          "x-risk-personal-data-field": "ADDRESS"
        },
        "remarks": {
          "type": "array",
          "description": "Any kind of special conditions/remarks that can be found on the document. E.g. \"Valid during 1 month after arrival in the country\", \"Not valid to go to United states\"",
          "items": {
            "type": "string"
          },
          "x-risk-personal-data-field": "REMARKS"
        }
      },
      "x-api-ref": "RegulatoryDocument"
    },
    "RegulatoryDocumentCommon": {
      "type": "object",
      "description": "Regulatory document (passport, visa, etc.) necessary for the travel",
      "properties": {
        "number": {
          "type": "string",
          "description": "Document number (as it appears on the document)",
          "example": "QFU514563221J",
          "x-risk-personal-data-field": "NATIONAL_DOCUMENT_NUMBER"
        },
        "effectiveDate": {
          "type": "string",
          "description": "Date at which the document starts to be valid (date in ISO 8601, e.g. 2002-07-25: YYYY-MM-DD)",
          "format": "date",
          "example": "2002-07-26"
        },
        "issuanceDate": {
          "type": "string",
          "description": "Date at which the document has been issued (date in ISO 8601, e.g. 2002-07-25: YYYY-MM-DD)",
          "format": "date",
          "example": "2002-07-25"
        },
        "expiryDate": {
          "type": "string",
          "description": "Date after which the document is not valid anymore (date in ISO 8601, e.g. 2002-07-25: YYYY-MM-DD) Mandatory for documentType 'visa'",
          "format": "date",
          "example": "2042-07-24"
        },
        "issuanceLocation": {
          "type": "string",
          "description": "A more precise information concerning the place where the document has been issued, when available.\nIt may be a country, a state, a city or any other type of location. e.g. New-York\n",
          "x-risk-personal-data-field": "ADDRESS"
        },
        "issuanceCountryCode": {
          "type": "string",
          "description": "Document issuance country (2-letters) code using ISO 3166-1 alpha 2 & 3 format Mandatory for documentType 'visa', 'knownTravellerNumber' and 'redressNumber'",
          "pattern": "[a-zA-Z0-9]{2,3}",
          "x-dictionary-name": "country",
          "x-field-name": "issuanceCountry",
          "x-field-type": "string",
          "x-risk-personal-data-field": "ADDRESS"
        },
        "name": {
          "description": "Document holder name",
          "$ref": "#/definitions/Name"
        },
        "nationalityCode": {
          "type": "string",
          "description": "Code of the nationality appearing on the document expressed using ISO 3166-1 alpha 2 & 3 format",
          "pattern": "[a-zA-Z0-9]{2,3}",
          "x-dictionary-name": "country",
          "x-field-name": "nationality",
          "x-field-type": "string",
          "x-risk-personal-data-field": "CITIZENSHIP"
        },
        "gender": {
          "type": "string",
          "description": "Gender of the passenger. The value 'unspecified' must be used for non-binary gender. The value 'unknown' must be used for undisclosed gender.",
          "enum": [
            "male",
            "female",
            "unspecified",
            "unknown"
          ],
          "x-risk-personal-data-field": "PASSENGER_TYPE"
        },
        "birthDate": {
          "type": "string",
          "description": "Date of birth (date in ISO 8601, e.g. 1980-07-25: YYYY-MM-DD)",
          "format": "date",
          "example": "1980-07-25",
          "x-risk-personal-data-field": "DATE_OF_BIRTH"
        },
        "birthPlace": {
          "type": "string",
          "description": "Birth place as indicated on the document",
          "x-risk-personal-data-field": "ADDRESS"
        },
        "remarks": {
          "type": "array",
          "description": "Any kind of special conditions/remarks that can be found on the document. E.g. \"Valid during 1 month after arrival in the country\", \"Not valid to go to United states\"",
          "items": {
            "type": "string"
          },
          "x-risk-personal-data-field": "REMARKS"
        }
      },
      "x-api-ref": "RegulatoryDocumentCommon"
    },
    "RegulatoryFoidDocument": {
      "type": "object",
      "description": "Regulatory document (passport, identity card, etc.) necessary for specifying form of identification details",
      "allOf": [
        {
          "$ref": "#/definitions/RegulatoryDocumentCommon"
        },
        {
          "type": "object",
          "required": [
            "documentType"
          ],
          "properties": {
            "documentType": {
              "description": "Type of the document : passport, identityCard...",
              "type": "string",
              "enum": [
                "passport",
                "identityCard",
                "localIdentityCard",
                "drivingLicense",
                "socialSecurity"
              ]
            }
          }
        }
      ],
      "x-api-ref": "RegulatoryFoidDocument"
    },
    "RegulatoryPhoneNumber": {
      "description": "Hold a phone number and name that will be provided to authorities",
      "allOf": [
        {
          "$ref": "#/definitions/PhoneBase"
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "description": "Name of the phone owner for the regulatory phone number",
              "$ref": "#/definitions/Name"
            },
            "purpose": {
              "type": "string",
              "description": "Type of regulatory phone number",
              "enum": [
                "emergencyContact"
              ]
            }
          }
        }
      ],
      "x-api-ref": "RegulatoryPhoneNumber"
    },
    "RegulatoryType": {
      "description": "Type of the regulatory information : personalDetails, passport, visa, identityCard, EmergencyContact...",
      "type": "object",
      "required": [
        "regulatoryType"
      ],
      "properties": {
        "regulatoryType": {
          "type": "string",
          "enum": [
            "personalDetails",
            "countryOfResidence",
            "passport",
            "identityCard",
            "airAttendanceLicense",
            "birthCertificate",
            "borderCrossingCard",
            "drivingLicense",
            "flightMechanicalLicense",
            "foreignNationalRegistration",
            "loyalAttorneyIdentification",
            "militaryIdentityCard",
            "operationalDispatcherLicense",
            "pilotLicense",
            "reEntryPermit",
            "naturalisationCardUS",
            "workPermit",
            "visa",
            "residentAlienCard",
            "permanentResidentCard",
            "destinationAddress",
            "homeAddress",
            "emergencyContact",
            "redressNumber",
            "knownTravelerNumber",
            "homeReentryPermit",
            "chinaTravelPermit",
            "chinaTravelPermitHongKongMacao",
            "chinaExitAndEntryPermit",
            "residentTravelPermit",
            "residentTravelPermitToFromTaiwanAndChina",
            "residentTravelPermitToFromHongKongMacao",
            "residentTravelPermitToHongKongMacao",
            "taiwanExitAndEntryPermit",
            "nexusCard"
          ]
        }
      },
      "x-api-ref": "RegulatoryType"
    },
    "Remark": {
      "type": "object",
      "description": "Remark that can be added to an order.\nThere are three types of remarks:\n- GeneralRemark (RM)\n- CorporateRemark (RX)\n- ConfidentialRemark (RC)\nRemark is a polymorphic object, meaning that it contains only the basic structure from which derive the three types of Remark.\nTo see the structure of the different remarks, please see [Remarks documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/remarks.html#/RemarkType/get_)\n",
      "discriminator": "remarkType",
      "allOf": [
        {
          "$ref": "#/definitions/ItemCommon"
        },
        {
          "type": "object",
          "discriminator": "remarkType",
          "required": [
            "remarkType"
          ],
          "properties": {
            "tid": {
              "description": "Temporary id that can be used to associate requested and returned remarks. Valid only for the time of the transaction",
              "type": "string",
              "pattern": "[a-zA-Z0-9_]{1,20}"
            },
            "remarkType": {
              "type": "string",
              "description": "Type of the Remark i.e. General Remark (RM), Corporate Remark (RX), Confidential Remark (RC).\nTo see the structure of the different remarks, please see [Remarks documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/remarks.html#/RemarkType/get_)\n",
              "enum": [
                "GeneralRemark",
                "CorporateRemark",
                "ConfidentialRemark"
              ],
              "default": "GeneralRemark"
            },
            "travelerIds": {
              "type": "array",
              "description": "A list of travelers associated to this Remark. If not specified, the remark applies to all travelers",
              "items": {
                "type": "string",
                "pattern": "[a-zA-Z0-9-]{1,20}"
              }
            }
          }
        }
      ],
      "x-api-ref": "Remark"
    },
    "RemarkReply": {
      "type": "object",
      "description": "Reply containing a remark object (general, corporate or confidential).\nEach type of contact derive from object Remark by polymorphism\n",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/Remark"
            },
            "dictionaries": {
              "type": "object"
            }
          }
        }
      ],
      "x-api-ref": "RemarkReply"
    },
    "RemarksListReply": {
      "type": "object",
      "description": "Reply containing a list of remarks (general, corporate or confidential).\nEach type of remark derive from object Remark by polymorphism\n",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "type": "array",
              "description": "List of remarks",
              "items": {
                "$ref": "#/definitions/Remark"
              }
            },
            "dictionaries": {
              "type": "object"
            }
          }
        }
      ],
      "x-api-ref": "RemarksListReply"
    },
    "ResourceReference": {
      "type": "object",
      "description": "Link to a resource",
      "properties": {
        "href": {
          "type": "string",
          "description": "The URL to the resource"
        },
        "methods": {
          "description": "The list of methods that are available on the resource (selected among POST, PUT, PATCH, GET, DELETE)",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-api-ref": "ResourceReference"
    },
    "RetrieveVoucherReply": {
      "type": "object",
      "description": "Detail of the voucher item corresponding to the voucherId and list of groupIds provided in input",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "properties": {
            "data": {
              "$ref": "#/definitions/Voucher"
            },
            "dictionaries": {
              "$ref": "#/definitions/VoucherDictionary"
            }
          }
        }
      ],
      "x-api-ref": "RetrieveVoucherReply"
    },
    "RichMedia": {
      "type": "object",
      "description": "This object contains a list of information associated to a rich media",
      "properties": {
        "mediaId": {
          "description": "Reference to the rich media to be used for describing a service/seat",
          "type": "string"
        },
        "travelerId": {
          "type": "string",
          "description": "Identifier of the traveler for which a media id is applicable.",
          "items": {
            "type": "string"
          }
        },
        "flightIds": {
          "description": "Identifiers of the flights for which a media id is applicable.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "airlineCode": {
          "type": "string",
          "description": "Airline code of the airline owner of the media id."
        }
      },
      "x-api-ref": "RichMedia"
    },
    "RoomDetails": {
      "type": "object",
      "properties": {
        "type": {
          "description": "Room type code, identifier of the room based on 3 characters. \nThe first character identifies the room type category. \nThe second numeric character identifies the number of beds. \nThe third character identifies the bed type. \nThere is a special case where ROH is returned, this value stands for Run Of House.\n",
          "type": "string",
          "pattern": "[A-Z0-9]{3}"
        },
        "typeEstimated": {
          "$ref": "#/definitions/EstimatedRoomType"
        },
        "description": {
          "$ref": "#/definitions/TextWithLanguageType"
        }
      },
      "x-api-ref": "RoomDetails"
    },
    "SearchCustomerInsights": {
      "type": "object",
      "description": "Object used to define customers insights input for a search",
      "allOf": [
        {
          "$ref": "#/definitions/Individual"
        },
        {
          "type": "object",
          "required": [
            "tid"
          ],
          "properties": {
            "frequentFlyerCards": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SearchFrequentFlyer"
              }
            },
            "tid": {
              "type": "string",
              "description": "Temporary id that can be used to associate requested and returned travelers. It is only valid the time of the transaction."
            }
          }
        }
      ],
      "x-api-ref": "SearchCustomerInsights"
    },
    "SearchFrequentFlyer": {
      "type": "object",
      "description": "Frequent flyer card information required for seatMap request",
      "required": [
        "companyCode",
        "cardNumber"
      ],
      "properties": {
        "companyCode": {
          "description": "Code of the company emitting the card",
          "type": "string",
          "pattern": "[A-Z0-9]{2,3}",
          "example": "6X"
        },
        "cardNumber": {
          "description": "Card number",
          "type": "string",
          "pattern": "[a-zA-Z0-9]{2,20}",
          "example": "992003172079000",
          "x-risk-personal-data-field": "FREQUENT_FLYER_NUMBER"
        }
      },
      "x-api-ref": "SearchFrequentFlyer"
    },
    "SearchTraveler": {
      "type": "object",
      "description": "Object used to define common traveler input for a search",
      "required": [
        "passengerTypeCode"
      ],
      "properties": {
        "passengerTypeCode": {
          "type": "string",
          "description": "Corresponds to a Passenger Type Code such as: ADT,B15,C15,CHD,CMA,CMP,HOF,INF,INS,OFW,SPS,STU,YCD,YTH 'INF' corresponds to an infant without seat automatically associated to the first eligible traveler provided in the list\n",
          "pattern": "[a-zA-Z0-9]{2,3}",
          "example": "ADT",
          "x-risk-personal-data-field": "PASSENGER_TYPE"
        },
        "frequentFlyerCards": {
          "type": "array",
          "description": "Frequent flyer accounts information",
          "items": {
            "$ref": "#/definitions/SearchFrequentFlyer"
          }
        }
      },
      "x-api-ref": "SearchTraveler"
    },
    "SeatCharacteristic": {
      "type": "object",
      "description": "Functional characteristic of the seat. It refers to the seat characteristics dictionary",
      "properties": {
        "code": {
          "type": "string",
          "description": "Seat characteristic code. Eg: \"CH\" for \"Chargeable seat\"",
          "pattern": "[a-zA-Z0-9]{1,5}"
        }
      },
      "x-api-ref": "SeatCharacteristic"
    },
    "SeatCharacteristicDictionaryItem": {
      "description": "Seat characteristics dictionary. Allows mapping a service characteristic to its name. Example: CH = Chargeable Seat, W = Window Seat, A = Aisle Seat, Q = Seat in a quiet zone, E = Exit Row Seat, ...",
      "type": "object",
      "required": [
        "code",
        "name"
      ],
      "properties": {
        "code": {
          "description": "seat characteristic code. Eg: \"CH\" for \"Chargeable seat\"",
          "type": "string"
        },
        "name": {
          "description": "seat characteristic code name. Eg: \"Chargeable seat\"",
          "type": "string"
        }
      },
      "x-api-ref": "SeatCharacteristicDictionaryItem"
    },
    "SeatFamilyItem": {
      "type": "object",
      "description": "This object contains the information regarding the seats family selection for a single traveler or a group of travelers. Different seats belong to the same seat family when they have the same seat characteristics.",
      "properties": {
        "seatFamilyId": {
          "description": "Seat family id to be used for the interaction with cart",
          "type": "string"
        },
        "flightIds": {
          "type": "array",
          "description": "List of flight ids which the seat family is linked to.",
          "items": {
            "type": "string"
          }
        },
        "seatCharacteristicsCodes": {
          "description": "List of seat characteristics codes associated to the family.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "travelerIds": {
          "type": "array",
          "description": "Travelers associated to this service.\nThe traveler id refers to the traveler dictionary.\n",
          "items": {
            "type": "string"
          }
        },
        "media": {
          "type": "array",
          "description": "List of media associated to the seat family",
          "items": {
            "$ref": "#/definitions/RichMedia"
          }
        },
        "prices": {
          "$ref": "#/definitions/AirPricingRecords"
        },
        "packServiceIds": {
          "type": "array",
          "description": "List of service IDs of the master pack services",
          "items": {
            "type": "string"
          }
        }
      },
      "x-api-ref": "SeatFamilyItem"
    },
    "SeatItem": {
      "type": "object",
      "description": "This object contains the information regarding the seats selection for a\nsingle traveler or a group of travelers\n",
      "allOf": [
        {
          "$ref": "#/definitions/SeatItemCommon"
        },
        {
          "type": "object",
          "properties": {
            "prices": {
              "$ref": "#/definitions/AirPricingRecords"
            }
          }
        }
      ],
      "x-api-ref": "SeatItem"
    },
    "SeatItemCommon": {
      "type": "object",
      "description": "This object contains the information regarding the seats selection for a single traveler or a group of travelers",
      "properties": {
        "id": {
          "description": "Seat id to be used for the interaction with cart",
          "type": "string"
        },
        "tid": {
          "description": "temporary id that can be used to associate requested and returned seats. It is only valid the time of the transaction.",
          "type": "string",
          "pattern": "[a-zA-Z0-9_]{1,20}"
        },
        "flightId": {
          "description": "Flight to which the seat selection is attached to",
          "type": "string"
        },
        "seatSelections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SeatRecord"
          },
          "minItems": 1
        },
        "statusCode": {
          "type": "string",
          "description": "Operational status. HK = confirmed, HL = waitlist, TK = schedule change confirmed, schedule change waitlist, UN = unable to confirm not operating, UC = unable to confirm, HX = have cancelled, NO = no action taken. Status code is not returned at shopping time",
          "x-dictionary-name": "bookingStatus",
          "x-field-name": "status",
          "x-field-type": "BookingStatusDictionaryItem"
        }
      },
      "x-api-ref": "SeatItemCommon"
    },
    "SeatItemRequest": {
      "type": "object",
      "description": "Object used to specify the seat(s) selection that will be part of the add or update request",
      "required": [
        "flightId",
        "seatSelections"
      ],
      "properties": {
        "tid": {
          "description": "Temporary id that can be used to associate requested and returned seats. It is only valid the time of the transaction",
          "type": "string",
          "pattern": "[a-zA-Z0-9_]{1,20}"
        },
        "flightId": {
          "type": "string",
          "description": "Flight to which the seat selection is associated to",
          "pattern": "[a-zA-Z0-9-]{1,20}"
        },
        "seatSelections": {
          "type": "array",
          "description": "It allows to define the list of seat selections for a group of travelers",
          "items": {
            "$ref": "#/definitions/SeatSelection"
          },
          "minItems": 1
        },
        "promotion": {
          "description": "Promotion code and related airline code.  When a Promotion is injected and is applied, then the price will be discounted accordingly and the applied promotion will appear in the Discount dictionary associated.\n",
          "$ref": "#/definitions/Promotion"
        }
      },
      "x-api-ref": "SeatItemRequest"
    },
    "SeatmapAdvancedSearchRequest": {
      "type": "object",
      "description": "Inputs needed to perform an advanced seatmap search",
      "required": [
        "flights"
      ],
      "properties": {
        "flights": {
          "type": "array",
          "description": "All flights being part of the itinerary",
          "items": {
            "$ref": "#/definitions/FlightRequest"
          }
        },
        "travelers": {
          "type": "array",
          "description": "All travelers being part of the itinerary",
          "items": {
            "$ref": "#/definitions/SeatmapAdvancedSearchTraveler"
          }
        },
        "promotion": {
          "description": "Promotion code and related airline code.  When a Promotion is injected and is applied, then the price will be discounted accordingly and the applied promotion will appear in the Discount dictionary associated.\n",
          "$ref": "#/definitions/Promotion"
        },
        "showMilesPrice": {
          "description": "Enables the award converter feature that converts a currency fare paid in cash into a fare paid in cash and miles.",
          "type": "boolean",
          "default": false
        }
      },
      "x-api-ref": "SeatmapAdvancedSearchRequest"
    },
    "SeatmapAdvancedSearchTraveler": {
      "type": "object",
      "description": "Object used to define a traveler in input of advanced seatmap",
      "allOf": [
        {
          "$ref": "#/definitions/SearchTraveler"
        },
        {
          "type": "object",
          "required": [
            "isRequestedTraveler"
          ],
          "properties": {
            "tid": {
              "description": "temporary id used to map travelers in the request with travelers in the response. only valid the time of the transaction",
              "type": "string",
              "example": "PAX1",
              "pattern": "[a-zA-Z0-9_]{1,20}"
            },
            "firstName": {
              "description": "Individual first name. If the person has middle names, both first and middle name should be added here (e.g. Arthur Ignatius)",
              "type": "string",
              "example": "Arthur Ignatius",
              "pattern": "^[A-Za-z\\u0080-\\u00FF][A-Za-z\\u0080-\\u00FF -.]{1,69}$",
              "x-risk-personal-data-field": "PASSENGER_NAME"
            },
            "lastName": {
              "type": "string",
              "example": "Holmes",
              "pattern": "^[A-Za-z\\u0080-\\u00FF][A-Za-z\\u0080-\\u00FF -.]{1,69}$",
              "x-risk-personal-data-field": "PASSENGER_NAME"
            },
            "title": {
              "description": "Individual title (MR Mister ...)",
              "type": "string",
              "example": "Dr",
              "pattern": "[a-zA-Z -]{1,20}",
              "x-risk-personal-data-field": "PASSENGER_TITLE"
            },
            "isRequestedTraveler": {
              "type": "boolean",
              "description": "Defines if the seatmap should be computed for this traveler."
            }
          }
        }
      ],
      "x-api-ref": "SeatmapAdvancedSearchTraveler"
    },
    "SeatmapBlock": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "nbrRemainingExtraOxygenMasks": {
          "description": "Number of extra oxygen masks remaining for this block on this flight at this date in Inventory. This number must be revised with current PNR or trip to get final number of extra oxygen masks",
          "type": "integer"
        }
      },
      "x-api-ref": "SeatmapBlock"
    },
    "SeatmapCommonData": {
      "type": "object",
      "required": [
        "flight",
        "seatmaps"
      ],
      "properties": {
        "flight": {
          "$ref": "#/definitions/SeatmapFlightInfo"
        },
        "seatmaps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SeatmapDescription"
          }
        }
      },
      "x-api-ref": "SeatmapCommonData"
    },
    "SeatmapCoordinates": {
      "type": "object",
      "properties": {
        "x": {
          "type": "number",
          "format": "double"
        },
        "y": {
          "type": "number",
          "format": "double"
        },
        "z": {
          "type": "number",
          "format": "double",
          "description": "X coordinate (height)"
        },
        "zRotation": {
          "type": "number",
          "format": "double"
        }
      },
      "x-api-ref": "SeatmapCoordinates"
    },
    "SeatmapCoordinatesUnit": {
      "type": "object",
      "properties": {
        "translationUnit": {
          "description": "Translation unit: e.g. CM for centimeters, IN for inches",
          "type": "string"
        },
        "rotationUnit": {
          "description": "Rotation unit",
          "type": "string",
          "enum": [
            "radian",
            "degree"
          ]
        }
      },
      "x-api-ref": "SeatmapCoordinatesUnit"
    },
    "SeatmapDeck": {
      "type": "object",
      "properties": {
        "deckType": {
          "description": "A deck is a level on an aircraft. The deck location of the cabin (current possible values are upper or main) The main deck, where passengers are seated on a passenger flight. Upper deck is above the main deck where more passengers are seated.",
          "type": "string",
          "enum": [
            "upper",
            "main"
          ]
        },
        "deckDimensions": {
          "$ref": "#/definitions/SeatmapDeckDimensions"
        },
        "blocks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SeatmapBlock"
          }
        },
        "firstAvailableSeat": {
          "$ref": "#/definitions/SeatmapFirstAvailableSeat"
        },
        "cheapestSeat": {
          "description": "Information regarding the cheapest available seat on a given deck (cabin dependent)",
          "$ref": "#/definitions/SeatmapSeatProperties"
        },
        "facilities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SeatmapFacility"
          }
        },
        "seats": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SeatmapSeatProperties"
          }
        }
      },
      "x-api-ref": "SeatmapDeck"
    },
    "SeatmapDeckDimensions": {
      "type": "object",
      "description": "Deck dimensions are used as a reference to display the entire aircraft or to the section associated to the requested cabin (or set of cabins)",
      "properties": {
        "width": {
          "description": "Width (y-axis) of the deck.The value of the width is considered for display of y coordinate. y coordinate takes the value from 0 to the value of width.",
          "type": "integer"
        },
        "length": {
          "description": "Length (x-axis) of the deck.The value of the length is considered for display of x coordinate. x coordinate takes the value from 0 to the value of length.",
          "type": "integer"
        },
        "startWingsX": {
          "description": "Start x coordinate of the wings.The wings display starts relatively to the length.",
          "type": "number",
          "format": "integer"
        },
        "endWingsX": {
          "description": "End x coordinate of the wings.The wings display ends relatively to the length.",
          "type": "number",
          "format": "integer"
        },
        "exitRowsX": {
          "description": "X coordinate of the exit rows.The exit rows are displayed relatively to the length.",
          "type": "array",
          "items": {
            "type": "number",
            "format": "integer"
          }
        }
      },
      "x-api-ref": "SeatmapDeckDimensions"
    },
    "SeatmapDescription": {
      "type": "object",
      "properties": {
        "computedCoordinates": {
          "description": "Specify if information was provided by the airline (false), or if generic data are used based on the equipement (true)",
          "type": "boolean"
        },
        "decks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SeatmapDeck"
          }
        },
        "coordinates": {
          "$ref": "#/definitions/SeatmapCoordinatesUnit"
        }
      },
      "x-api-ref": "SeatmapDescription"
    },
    "SeatmapDictionary": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/SeatMapDictionaryCommon"
        },
        {
          "type": "object",
          "properties": {
            "tax": {
              "type": "object",
              "description": "Taxes map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "type": "string"
              }
            },
            "currency": {
              "type": "object",
              "description": "Currencies map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "$ref": "#/definitions/CurrencyDictionaryItem"
              }
            },
            "facility": {
              "type": "object",
              "description": "On board facilities map. E.g: bulkhead, closet, exit door, galley, lavatory... For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "type": "string"
              }
            },
            "seatCharacteristic": {
              "type": "object",
              "description": "Seat characteristics map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "$ref": "#/definitions/SeatCharacteristicDictionaryItem"
              }
            },
            "discount": {
              "type": "object",
              "description": "Discount information in seatmap. It contains airline code as well as the reason for discount",
              "additionalProperties": {
                "$ref": "#/definitions/DiscountDictionaryItem"
              }
            },
            "anonymousTraveler": {
              "type": "object",
              "description": "Basic information about an anonymous traveler such as the passenger type code and the frequent flyer card(s). Frequent flyer cards applies only for a particular case: a seatmap request based on a cart already containing frequent flyer card(s) but not yet traveler(s). For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "$ref": "#/definitions/AnonymousTraveler"
              }
            }
          }
        }
      ],
      "x-api-ref": "SeatmapDictionary"
    },
    "SeatMapDictionaryCommon": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CountryDictionary"
        },
        {
          "type": "object",
          "properties": {
            "airline": {
              "type": "object",
              "description": "Airlines map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "type": "string"
              }
            },
            "aircraft": {
              "type": "object",
              "description": "Aircrafts map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/iswagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "type": "string"
              }
            },
            "location": {
              "type": "object",
              "description": "Locations map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "$ref": "#/definitions/LocationDictionaryItem"
              }
            }
          }
        }
      ],
      "x-api-ref": "SeatMapDictionaryCommon"
    },
    "SeatmapEligibility": {
      "type": "object",
      "description": "Define the eligibility for display of SeatMap",
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "description": "Status indicating if seatmap is eligible to be displayed",
          "type": "string",
          "enum": [
            "eligible",
            "ineligible"
          ]
        },
        "reasons": {
          "description": "Reasons for the eligibility status provided if status is ineligible.",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "passengerOnStandby",
              "customerEligibilityRule",
              "flightEligibilityRule",
              "IATCIflight"
            ]
          }
        }
      },
      "x-api-ref": "SeatmapEligibility"
    },
    "SeatmapFacility": {
      "type": "object",
      "properties": {
        "code": {
          "description": "Facility code, as described in the facility dictionary",
          "type": "string"
        },
        "facilityType": {
          "description": "Facility type, as described in the facility dictionary",
          "type": "string"
        },
        "column": {
          "type": "string"
        },
        "row": {
          "type": "string"
        },
        "position": {
          "type": "string",
          "description": "Position is either front, rear or seat (in case the facility takes the place of a seat)",
          "enum": [
            "front",
            "rear",
            "seat"
          ]
        },
        "coordinates": {
          "$ref": "#/definitions/SeatmapCoordinates"
        }
      },
      "x-api-ref": "SeatmapFacility"
    },
    "SeatmapFirstAvailableSeat": {
      "type": "object",
      "description": "Information regarding the first available seat on a given deck (cabin dependent)",
      "properties": {
        "seatNumber": {
          "type": "string",
          "description": "Concatenation of the row id and the column id, for example 12B"
        },
        "x": {
          "type": "number",
          "format": "double",
          "description": "X coordinate of the seat"
        }
      },
      "x-api-ref": "SeatmapFirstAvailableSeat"
    },
    "SeatmapFlightInfo": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/FlightCommon"
        },
        {
          "type": "object",
          "properties": {
            "departure": {
              "$ref": "#/definitions/FlightBasicEndPoint"
            },
            "arrival": {
              "$ref": "#/definitions/FlightBasicEndPoint"
            },
            "aircraftCode": {
              "description": "IATA aircraft code (http://www.flugzeuginfo.net/table_accodes_iata_en.php)",
              "type": "string",
              "pattern": "[a-zA-Z0-9]{1,3}",
              "x-dictionary-name": "aircraft",
              "x-field-name": "aircraft",
              "x-field-type": "string"
            },
            "aircraftConfigurationVersion": {
              "description": "Physical configuration, also called ACV code (aircraft type + fitted configuration)",
              "type": "string",
              "pattern": "[A-Z0-9]{3}",
              "example": "2C1"
            },
            "cabin": {
              "description": "Cabin used to build availibity and price. Either taken from the Cart, from the Order or determined from booking class",
              "type": "string"
            }
          }
        }
      ],
      "x-api-ref": "SeatmapFlightInfo"
    },
    "SeatmapReply": {
      "description": "Seatmap representation of a flight. Characteristics and occupation",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/SeatmapCommonData"
            },
            "dictionaries": {
              "$ref": "#/definitions/SeatmapDictionary"
            }
          }
        }
      ],
      "x-api-ref": "SeatmapReply"
    },
    "SeatmapSeatProperties": {
      "type": "object",
      "properties": {
        "cabin": {
          "description": "Cabin of the seat, in single letter format e.g. \"Y\"",
          "type": "string"
        },
        "seatNumber": {
          "description": "Concatenation of the row id and the column id, for example 12B",
          "type": "string"
        },
        "seatCharacteristicsCodes": {
          "description": "List of seat characteristics (the value is a value that can be retrieved in the seat characteristic dictionary). List of seat characteristics at seat level will be returned when no specific travelers are specified for the seatmap computation, otherwise the characteristics will be specified for each traveler.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "isInfantOnSeat": {
          "description": "Check if an infant is seating on this seat, whether it is an infant associated to a traveler (PTC INF) or an infant alone (PTC INS). If the system detects there is no infant, value is false. If information is unknown, the node is not present (isInfantOnSeat not returned or null)",
          "type": "boolean"
        },
        "isInfantAloneOnSeat": {
          "description": "This field indicates if the seat is occupied by an infant alone (PTC INS).  If information is unknown, the node is not present (isInfantAloneOnSeat not returned or null)",
          "type": "boolean"
        },
        "seatAvailabilityStatus": {
          "description": "Availability status based on seat occupation and traveler information. Most permissive availability is computed for multiple travelers Availability status at seat level will be returned when no specific travelers are specified for the seatmap computation, otherwise the availability will be specified for each traveler.",
          "type": "string",
          "enum": [
            "available",
            "blocked",
            "occupied"
          ]
        },
        "reasonForRestrictionCodes": {
          "description": "List of reason for restriction of seat. When calling the seatmap some seats can be unavailable for the user to be selected. Most of the time a seat is already taken, but some other time the seat selection is restricted by the airline.  For example, a seat can be available to be selected only if the user is a frequent flyer. Example on possible values:\n  - TARG: Target zone\n  - MASK: Unavailable seat\n  - CHSP: Chargeable seat\n  - ASRE: Chargeable seat\n  - SPTR: Chargeable seat\n  - PROT: Protected seat\n  - BLCS: Promotes seats reserved for the passenger's airline\n  - GRRS: Group\n  - ZONL: Legal suitability rule\n  - ZONM: Mandatory suitabulity rule\n  - THEO: Theoretical\n  - RSTG: Reseating\n  - EXST: Extra seat\n  - CBBG: Cabin beggage\n  - INFA: Infant seat\n  - BLCS: Codeshare seat\n  - ACCR: Quota Chargeable\n  - RDEL: Delivered\n  - SMCU: Booking Class\n  - SFRC: Reaccomodation\n  - ASE1: Adjacency\n  - AFA1: Adjacency\n  - ASP1: Adjacency\n  - THR1: Through seat\n  - ZONR: Releasable suitability rule\n  - COUR: Courtesy\n  - SPRQ: Request seat",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "travelers": {
          "description": "Traveler's seat information and price",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SeatmapTravelerSeatInfo"
          }
        },
        "blockId": {
          "description": "Please refer to block section, with number of oxygen seats",
          "type": "string"
        },
        "seatType": {
          "description": "Provides details about the nature of the seat equipment, based on the airline filing (i.e. physical seatmap)",
          "type": "string"
        },
        "coordinates": {
          "$ref": "#/definitions/SeatmapCoordinates"
        }
      },
      "x-api-ref": "SeatmapSeatProperties"
    },
    "SeatmapSeatPropertiesReply": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/SeatmapSeatProperties"
            }
          }
        }
      ],
      "x-api-ref": "SeatmapSeatPropertiesReply"
    },
    "SeatmapTravelerSeatInfo": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Traveler id (anonymous or known). In case of a stand-alone seatmap transaction or a seatmap transaction based on a cart that does not contain travelers, travelers id is defined in anonymousTraveler dictionary. Otherwise traveler id is defined in Cart or Order",
          "type": "string",
          "pattern": "[a-zA-Z0-9-]{1,20}"
        },
        "tid": {
          "description": "Temporary id used to map travelers in the response with the travelers in the request. Only valid the time of the transaction",
          "type": "string",
          "example": "PAX1",
          "pattern": "[a-zA-Z0-9_]{1,20}"
        },
        "seatCharacteristicsCodes": {
          "description": "List of seat characteristics for the current traveler (the characteristic's descriptions can be retrieved in the seat characteristic dictionary)",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "seatAvailabilityStatus": {
          "description": "Seat availability for this specific traveler. Allows better seat choice per traveler",
          "type": "string",
          "enum": [
            "available",
            "blocked",
            "occupied"
          ]
        },
        "reasonForRestrictionCodes": {
          "description": "List of reason for restriction of seat. When calling the seatmap some seats can be unavailable for the user to be selected. Most of the time a seat is already taken, but some other time the seat selection is restricted by the airline.  For example, a seat can be available to be selected only if the user is a frequent flyer. Example on possible values:\n  - TARG: Target zone\n  - MASK: Unavailable seat\n  - CHSP: Chargeable seat\n  - ASRE: Chargeable seat\n  - SPTR: Chargeable seat\n  - PROT: Protected seat\n  - BLCS: Promotes seats reserved for the passenger's airline\n  - GRRS: Group\n  - ZONL: Legal suitability rule\n  - ZONM: Mandatory suitabulity rule\n  - THEO: Theoretical\n  - RSTG: Reseating\n  - EXST: Extra seat\n  - CBBG: Cabin beggage\n  - INFA: Infant seat\n  - BLCS: Codeshare seat\n  - ACCR: Quota Chargeable\n  - RDEL: Delivered\n  - SMCU: Booking Class\n  - SFRC: Reaccomodation\n  - ASE1: Adjacency\n  - AFA1: Adjacency\n  - ASP1: Adjacency\n  - THR1: Through seat\n  - ZONR: Releasable suitability rule\n  - COUR: Courtesy\n  - SPRQ: Request seat",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "prices": {
          "description": "Price for a given seat",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Price"
          }
        },
        "milesConversion": {
          "description": "Miles equivalents of the seat prices",
          "type": "object",
          "$ref": "#/definitions/MilesConversion"
        },
        "media": {
          "type": "array",
          "description": "List of media associated to the seat",
          "items": {
            "$ref": "#/definitions/RichMedia"
          }
        },
        "isExempted": {
          "type": "boolean",
          "description": "If true, the seat is exempted"
        },
        "packServiceIds": {
          "type": "array",
          "description": "List of service IDs of the master pack services",
          "items": {
            "type": "string"
          }
        },
        "selectedPackServiceId": {
          "type": "string",
          "description": "Id of the cart/Order selected master service pack"
        }
      },
      "x-api-ref": "SeatmapTravelerSeatInfo"
    },
    "SeatRecord": {
      "type": "object",
      "description": "Confirmed seat selection for a single traveler",
      "properties": {
        "seatNumber": {
          "type": "string",
          "description": "Concatenation of the row id and the column id, for example 12B"
        },
        "travelerId": {
          "type": "string",
          "description": "Traveler id associated to the seat"
        },
        "flightId": {
          "description": "Flight to which the seat is attached to",
          "type": "string"
        },
        "seatCharacteristics": {
          "type": "array",
          "description": "Characteristics of the selected seat. They refer to the seatCharacteristic dictionary",
          "items": {
            "$ref": "#/definitions/SeatCharacteristic"
          }
        },
        "isExempted": {
          "type": "boolean",
          "description": "Display recommendation ; true if the seat is exempted"
        },
        "isChargeable": {
          "type": "boolean",
          "description": "Display recommendation ; true if the seat is chargeable    "
        },
        "reasonForRestrictionCodes": {
          "type": "array",
          "description": "List of reason for restriction of seat. When calling the seatmap some seats can be unavailable for the user to be selected. Most of the time a seat is already taken, but some other time the seat selection is restricted by the airline.  For example, a seat can be available to be selected only if the user is a frequent flyer. Example on possible values:\n  - TARG: Target zone\n  - MASK: Unavailable seat\n  - CHSP: Chargeable seat\n  - ASRE: Chargeable seat\n  - SPTR: Chargeable seat\n  - PROT: Protected seat\n  - BLCS: Promotes seats reserved for the passenger's airline\n  - GRRS: Group\n  - ZONL: Legal suitability rule\n  - ZONM: Mandatory suitabulity rule\n  - THEO: Theoretical\n  - RSTG: Reseating\n  - EXST: Extra seat\n  - CBBG: Cabin beggage\n  - INFA: Infant seat\n  - BLCS: Codeshare seat\n  - ACCR: Quota Chargeable\n  - RDEL: Delivered\n  - SMCU: Booking Class\n  - SFRC: Reaccomodation\n  - ASE1: Adjacency\n  - AFA1: Adjacency\n  - ASP1: Adjacency\n  - THR1: Through seat\n  - ZONR: Releasable suitability rule\n  - COUR: Courtesy\n  - SPRQ: Request seat",
          "items": {
            "type": "string"
          }
        },
        "media": {
          "type": "array",
          "description": "List of media associated to the service",
          "items": {
            "$ref": "#/definitions/RichMedia"
          }
        },
        "packServiceId": {
          "type": "string",
          "description": "Service ID of the master pack"
        }
      },
      "x-api-ref": "SeatRecord"
    },
    "SeatReply": {
      "type": "object",
      "description": "Reply containing a seat object.\n",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/SeatItem"
            },
            "dictionaries": {
              "$ref": "#/definitions/DictionaryCommon"
            }
          }
        }
      ],
      "x-api-ref": "SeatReply"
    },
    "SeatSelection": {
      "type": "object",
      "description": "Seat selection for a single traveler.\nA Seat can be associated to an existing traveler in the Cart using travelerId\n",
      "required": [
        "seatNumber",
        "travelerId"
      ],
      "properties": {
        "seatNumber": {
          "type": "string",
          "description": "Concatenation of the row id and the column id, for example 12B",
          "pattern": "^[0-9]{1,3}[a-zA-Z]{1}"
        },
        "travelerId": {
          "type": "string",
          "description": "Traveler id associated to the seat",
          "pattern": "[a-zA-Z0-9-]{1,20}"
        }
      },
      "x-api-ref": "SeatSelection"
    },
    "SeatsReply": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "type": "array",
              "description": "List of Seats",
              "items": {
                "$ref": "#/definitions/SeatItem"
              }
            },
            "links": {
              "type": "array",
              "description": "Meta information containing the HTTP details of the linked resources",
              "items": {
                "$ref": "#/definitions/HttpRequest"
              }
            },
            "dictionaries": {
              "$ref": "#/definitions/DictionaryCommon"
            }
          }
        }
      ],
      "x-api-ref": "SeatsReply"
    },
    "Security": {
      "type": "object",
      "description": "Security for the Remark",
      "required": [
        "office"
      ],
      "properties": {
        "isAppliedToFamily": {
          "description": "The airline can group several offices and define it as a family of offices in Amadeus System (through Amadeus Extended Ownership - EOS).\nThis option allows the airline to apply the permission of an office to all the offices of his family.\n",
          "type": "boolean"
        },
        "office": {
          "description": "Office to which the security credential is granted.\nIt may be one the following:\n- a complete office ID (e.g. LON6X0100)\n- a partial office id (e.g. ***6X0***, LON6X0***, ***6X0100)\n- only wildcards (e.g. *********)\n- wildcards for the corporate code (LON**0100)\n- wildcards for the qualifier code (e.g. LON6X*100)\n- Any kind of wildcards for the Office number (e.g. LON6X010*, LON6X01**, LON6X0***).\n",
          "type": "string",
          "pattern": "[A-Z0-9*]{9}"
        },
        "permission": {
          "type": "string",
          "enum": [
            "read",
            "write"
          ],
          "default": "read"
        }
      },
      "x-api-ref": "Security"
    },
    "ServiceCataloguePricingRecords": {
      "type": "object",
      "description": "It stores the different price breakdowns for catalogue Services related resources. For the ServiceCataloguePricingRecords, please consider using only the unitPrice. TotalPrice no so useful will be deprecated",
      "allOf": [
        {
          "$ref": "#/definitions/AirPricingRecords"
        },
        {
          "properties": {
            "servicePricesApplicability": {
              "$ref": "#/definitions/ServicePricesApplicability"
            }
          }
        }
      ],
      "x-api-ref": "ServiceCataloguePricingRecords"
    },
    "ServiceCharacteristics": {
      "type": "object",
      "properties": {
        "serviceDescription": {
          "description": "Description of the service",
          "type": "string"
        }
      },
      "x-api-ref": "ServiceCharacteristics"
    },
    "ServiceDescription": {
      "type": "object",
      "description": "A service could have different kinds of description: text (short or full) or media id reference",
      "properties": {
        "type": {
          "type": "string",
          "description": "In case of media description, its id is used",
          "enum": [
            "shortText",
            "longText",
            "mediaId"
          ]
        },
        "content": {
          "description": "It contains the text content or media id reference to be used as description",
          "type": "string"
        },
        "lang": {
          "type": "string",
          "pattern": "[a-zA-Z0-9-]{2,5}"
        }
      },
      "x-api-ref": "ServiceDescription"
    },
    "ServiceDetail": {
      "type": "object",
      "properties": {
        "flightId": {
          "description": "Flight to which the service selection is attached to",
          "type": "string"
        },
        "quantity": {
          "type": "integer",
          "description": "Quantity of service requested (e.g. Number of bags)",
          "minimum": 1,
          "maximum": 99
        }
      },
      "x-api-ref": "ServiceDetail"
    },
    "ServiceDictionaryItem": {
      "description": "Service dictionary item",
      "type": "object",
      "properties": {
        "marketingAirlineCode": {
          "type": "string",
          "description": "Marketing airline code of the service"
        },
        "serviceDescriptions": {
          "type": "array",
          "description": "Detailed info for the service are returned here.",
          "items": {
            "$ref": "#/definitions/ServiceDescription"
          }
        },
        "serviceType": {
          "type": "string",
          "description": "Service item type",
          "enum": [
            "freeCheckedBaggage",
            "freeCarryOnBaggage",
            "chargeable"
          ]
        },
        "baggagePolicyDescriptions": {
          "type": "array",
          "description": "Detailed information about the baggage policy are returned here.",
          "items": {
            "$ref": "#/definitions/BaggagePolicyDetails"
          }
        },
        "seatFamily": {
          "description": "In case the service belongs to seat family, the details of the seat family (seat characteristics, price, etc.) are returned here.",
          "$ref": "#/definitions/SeatFamilyItem"
        }
      },
      "x-api-ref": "ServiceDictionaryItem"
    },
    "ServiceItem": {
      "type": "object",
      "description": "This object contains a list of detailed information for each service item retrieved from Services catalogue",
      "allOf": [
        {
          "$ref": "#/definitions/ServiceItemCommon"
        },
        {
          "type": "object",
          "properties": {
            "travelerId": {
              "type": "string",
              "description": "Traveler who benefits of this service. The traveler id refer to the traveler dictionary.\n",
              "x-dictionary-name": "traveler",
              "x-field-name": "traveler",
              "x-field-type": "Traveler"
            },
            "prices": {
              "description": "Price for the service item",
              "$ref": "#/definitions/AirPricingRecords"
            },
            "packDetails": {
              "description": "Pack details Information",
              "$ref": "#/definitions/ServicePackDetails"
            },
            "packServiceId": {
              "type": "string",
              "description": "Service ID of the master pack"
            }
          }
        }
      ],
      "x-api-ref": "ServiceItem"
    },
    "ServiceItemCommon": {
      "type": "object",
      "description": "This object contains a list of detailed information for each service item retrieved from Services catalogue",
      "properties": {
        "id": {
          "description": "Service id, as defined in services dictionary",
          "type": "string"
        },
        "tid": {
          "description": "temporary id that can be used to associate requested and returned services. It is only valid the time of the transaction.",
          "type": "string",
          "pattern": "[a-zA-Z0-9_]{1,20}"
        },
        "descriptions": {
          "type": "array",
          "description": "List of exhaustive descriptions available for the service",
          "items": {
            "$ref": "#/definitions/ServiceDescription"
          }
        },
        "reasonForIssuance": {
          "description": "Reason for issuance code and sub code (RFIC & RFISC)",
          "$ref": "#/definitions/ReasonForIssuance"
        },
        "quantity": {
          "type": "integer",
          "description": "Quantity of service requested (e.g. Number of bags).\nIn an Order the details of quantity of service for each flight is available in details field.\nA service quantity can be restricted to a fixed value by configuration in service catalogue\n",
          "minimum": 1,
          "maximum": 99
        },
        "quota": {
          "type": "integer",
          "description": "Number of remaining services. Quota is returned only at shopping time"
        },
        "quotaStatus": {
          "type": "string",
          "description": "Quota status of the services. Quota Status is returned only at shopping time.\n",
          "enum": [
            "unknown",
            "guaranteed",
            "pending"
          ]
        },
        "tags": {
          "type": "array",
          "description": "Used to specify the tags associated to the service.\nThe tags might refer to the category (e.g. Baggage, Meal, etc.).\n",
          "items": {
            "type": "string"
          }
        },
        "flightIds": {
          "description": "Flights to which this service is associated to",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "statusCode": {
          "type": "string",
          "description": "Operational status. HK = confirmed, HL = waitlist, TK = schedule change confirmed, schedule change waitlist, UN = unable to confirm not operating, UC = unable to confirm, HX = have cancelled, NO = no action taken. Status code is not returned at shopping time",
          "x-dictionary-name": "bookingStatus",
          "x-field-name": "status",
          "x-field-type": "BookingStatusDictionaryItem"
        },
        "parameters": {
          "type": "array",
          "description": "List of parameters defining the service structure",
          "items": {
            "$ref": "#/definitions/ServiceParameter"
          }
        },
        "subServiceIds": {
          "type": "array",
          "description": "List of associated sub-services ids. A service can represent a pack of services and this list will contain the corresponding ids. This field is deprecated. In the context of Order services it is replaced by packDetails.subServiceIds",
          "items": {
            "type": "string"
          }
        },
        "isHighlighted": {
          "type": "boolean",
          "description": "Display recommendation ; true if the service is recommended to be highlighted"
        },
        "displayOrder": {
          "type": "integer",
          "description": "Display recommendation provided by [AAM](http://www.amadeus.com/web/amadeus/en_1A-corporate/Airlines/Airline-Needs/Serve/Differentiate-your-offer/Amadeus-Anytime-Merchandising/1319660801962-Solution_C-AMAD_ProductDetailPpal-1319637765525?industrySegment=1259068355670&level2=1332980613390&level3=1319616835064). This number represents the display order of the services (the lower the number, the more important the service is)\n"
        },
        "media": {
          "type": "array",
          "description": "List of media associated to the service",
          "items": {
            "$ref": "#/definitions/RichMedia"
          }
        },
        "atpcoCategory": {
          "description": "ATPCo service group code and subcode",
          "$ref": "#/definitions/ATPCoCategory"
        }
      },
      "x-api-ref": "ServiceItemCommon"
    },
    "ServiceItemRequest": {
      "type": "object",
      "description": "Object used to specify the service item to be added to a Cart or an Order\n",
      "allOf": [
        {
          "$ref": "#/definitions/ServiceItemRequestCommon"
        },
        {
          "type": "object",
          "required": [
            "serviceId",
            "travelerId"
          ],
          "properties": {
            "serviceId": {
              "description": "Id of the service selected from the catalogue",
              "type": "string",
              "pattern": "[a-zA-Z0-9-\\\\._]{1,99}"
            },
            "travelerId": {
              "type": "string",
              "description": "Traveler id to be associated to the service",
              "pattern": "[a-zA-Z0-9-]{1,20}"
            },
            "promotion": {
              "description": "Promotion code and related airline code. When a Promotion is injected and is applied, then the price will be discounted accordingly and the applied promotion will appear in the Discount dictionary associated.\n",
              "$ref": "#/definitions/Promotion"
            }
          }
        }
      ],
      "x-api-ref": "ServiceItemRequest"
    },
    "ServiceItemRequestCommon": {
      "type": "object",
      "description": "Object used to specify the common fields of a service item request\n",
      "properties": {
        "tid": {
          "description": "Temporary id that can be used to associate requested and returned services. It is only valid the time of the transaction.",
          "type": "string",
          "pattern": "[a-zA-Z0-9_]{1,20}"
        },
        "quantity": {
          "type": "integer",
          "description": "Desired quantity of the service to be requested (e.g. Number of bags)",
          "pattern": "[1-9][0-9]?"
        },
        "parameters": {
          "type": "array",
          "description": "List of parameters defining the service structure",
          "items": {
            "$ref": "#/definitions/ServiceRequestParameter"
          }
        }
      },
      "x-api-ref": "ServiceItemRequestCommon"
    },
    "ServiceMilesRedemptionRequest": {
      "type": "object",
      "description": "Object used to provide miles pricing information for the services.\n\nEither the frequentFlyerCardId, for a card already in the order, or the companyCode and the cardNumber, for any card, need to be provided, not both.\n",
      "properties": {
        "frequentFlyerCardId": {
          "type": "string",
          "description": "ID of the frequent flyer card in the order to be used to price the service in miles",
          "pattern": "[a-zA-Z0-9-:]{1,20}"
        },
        "companyCode": {
          "type": "string",
          "description": "Company code of the frequent flyer card to be used to price the service in miles",
          "pattern": "[A-Z0-9]{2,3}",
          "example": "6X"
        },
        "cardNumber": {
          "type": "string",
          "description": "Number of the frequent flyer card to be used to price the service in miles",
          "pattern": "[a-zA-Z0-9]{2,20}",
          "example": "992003172079000"
        }
      },
      "x-api-ref": "ServiceMilesRedemptionRequest"
    },
    "ServicePackDetails": {
      "type": "object",
      "description": "This object contains a list of information about association between a service and its sub-elements",
      "properties": {
        "isIncomplete": {
          "description": "When set to true, then pack is incomplete as seat is missing",
          "type": "boolean"
        },
        "subServiceIds": {
          "description": "Identifiers of the subservices available within the pack.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "selectedSeatId": {
          "description": "The id of selected seat",
          "type": "string"
        }
      },
      "x-api-ref": "ServicePackDetails"
    },
    "ServiceParameter": {
      "type": "object",
      "description": "Set of conditions applying to a service: they can represent multiple factors such as weight, type, size that can have an influence on booking and pricing of the service.\nA parameter can be organised as a structured list: one parameter can link to a list of sub-parameters.\n",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier of the parameter, used only in case of sub-parameters (to do the link with the parent parameter)"
        },
        "code": {
          "type": "string",
          "description": "Functional reference of the parameter. It refers to the serviceParameters dictionary"
        },
        "validatingFormat": {
          "type": "string",
          "description": "Expression used to validate the format of the parameter"
        },
        "minVal": {
          "type": "string"
        },
        "maxVal": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "requirementLevel": {
          "type": "string",
          "description": "It defines if the parameter is required or not",
          "enum": [
            "mandatory",
            "optional"
          ]
        },
        "subParameterIds": {
          "type": "array",
          "description": "List of associated sub-parameters ids. (e.g. To define the weight parameter, two sup-parameters are used: one for the value and one for the unit of measure)",
          "items": {
            "type": "string"
          }
        }
      },
      "x-api-ref": "ServiceParameter"
    },
    "ServicePricesApplicability": {
      "type": "object",
      "description": "It describes the way the prices have to be calculated, based on the unit and value of a characteristic of the service to be priced. This said, the total prices and unit prices will be influenced by the prices applicability. All prices will have to take into account the unit and the value to reflect the real service prices. For example to price a baggage per weight if unit = KG, all the prices have to be multiplied by the number of kilos chosen by the user and divided by the value of the pricesApplicability. Let's suppose that: price per KG = 1 euro and the user wants to buy 10 kgs baggage. The servicePricesApplicability in this case is: unit = kg and value = 1. In the end the total price is 10 euros.",
      "properties": {
        "unit": {
          "description": "Represents the unit of measurement of the characteristic of the service. For example the characteristic for which baggage is priced is weight then the unit will be KG.",
          "type": "string"
        },
        "value": {
          "type": "integer",
          "format": "int64",
          "minimum": 0,
          "description": "Basic value of the unit of measurement. Indicates what's the basic value that the price will apply for.\nFor example, if unit = KG and value = 5, it will mean that the minimum price is the price per 5 KGs unit.\nThe final price will be based on the input of the user.\n"
        }
      },
      "x-api-ref": "ServicePricesApplicability"
    },
    "ServiceReply": {
      "type": "object",
      "description": "Reply containing a service object.\n",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/ServiceItem"
            },
            "dictionaries": {
              "$ref": "#/definitions/DictionaryCommon"
            }
          }
        }
      ],
      "x-api-ref": "ServiceReply"
    },
    "ServiceRequestParameter": {
      "type": "object",
      "description": "Service parameter information to be provided on service selection phase",
      "properties": {
        "code": {
          "type": "string",
          "description": "Functional reference of the parameter. It refers to the serviceParameters dictionary"
        },
        "value": {
          "type": "string"
        }
      },
      "x-api-ref": "ServiceRequestParameter"
    },
    "ServicesCatalogueItem": {
      "type": "object",
      "description": "This object contains a list of detailed information for each service item retrieved from Services catalogue",
      "allOf": [
        {
          "$ref": "#/definitions/ServiceItemCommon"
        },
        {
          "type": "object",
          "properties": {
            "prices": {
              "description": "Price for the service item",
              "$ref": "#/definitions/ServiceCataloguePricingRecords"
            },
            "travelerIds": {
              "type": "array",
              "description": "Travelers associated to this service.\nThe traveler id refers to the traveler dictionary.\n",
              "items": {
                "type": "string"
              }
            },
            "packDetails": {
              "description": "Pack details information",
              "$ref": "#/definitions/AncillaryServicePackDetails"
            },
            "packServiceIds": {
              "type": "array",
              "description": "List of service IDs of the master pack services",
              "items": {
                "type": "string"
              }
            },
            "oncePerPassengerPerFlight": {
              "type": "boolean",
              "description": "Indicates if the service should be limited to one occurence per passenger and flight"
            }
          }
        }
      ],
      "x-api-ref": "ServicesCatalogueItem"
    },
    "ServicesCatalogueReply": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServicesCatalogueReplyData"
              }
            },
            "dictionaries": {
              "$ref": "#/definitions/DictionaryCommon"
            }
          }
        }
      ],
      "x-api-ref": "ServicesCatalogueReply"
    },
    "ServicesCatalogueReplyData": {
      "type": "object",
      "description": "List of services assiociated to a specific air offer",
      "properties": {
        "airOfferId": {
          "type": "string"
        },
        "services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServicesCatalogueItem"
          }
        },
        "seatFamilies": {
          "type": "array",
          "description": "List of seat families. Each seat family groups different seats by their characteristics.",
          "items": {
            "$ref": "#/definitions/SeatFamilyItem"
          }
        },
        "bundleDiscountRules": {
          "type": "array",
          "description": "List of bundle discount rules to be shown within the catalogue.",
          "items": {
            "$ref": "#/definitions/BundleDiscountRuleItem"
          }
        }
      },
      "x-api-ref": "ServicesCatalogueReplyData"
    },
    "ServicesReply": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServiceItem"
              }
            },
            "links": {
              "type": "array",
              "description": "Meta information containing the HTTP details of the linked resources",
              "items": {
                "$ref": "#/definitions/HttpRequest"
              }
            },
            "dictionaries": {
              "$ref": "#/definitions/DictionaryCommon"
            }
          }
        }
      ],
      "x-api-ref": "ServicesReply"
    },
    "ServiceSubCategoryDictionaryItem": {
      "description": "Service sub categories dictionary. Allows mapping a service sub category to its name. Example: SPORT = Sport equipement",
      "type": "object",
      "required": [
        "code",
        "name"
      ],
      "properties": {
        "code": {
          "description": "Sub category code. Eg: \"SPORT\" for \"Sport equipement\"",
          "type": "string"
        },
        "name": {
          "description": "Sub category explanatory name",
          "type": "string"
        }
      },
      "x-api-ref": "ServiceSubCategoryDictionaryItem"
    },
    "ShoppingProfile": {
      "type": "object",
      "required": [
        "names"
      ],
      "description": "Shopping profiles to adjust Shopping search recommendations.",
      "properties": {
        "names": {
          "type": "array",
          "items": {
            "description": "The name of the requested shopping profile.",
            "type": "string",
            "pattern": "[A-Z0-9]{3,75}"
          },
          "minItems": 1
        }
      },
      "x-api-ref": "ShoppingProfile"
    },
    "ShoppingProfileRanking": {
      "type": "object",
      "required": [
        "ranking"
      ],
      "description": "Shopping profiles ranking that can be used for the display order of the offers.",
      "properties": {
        "names": {
          "type": "array",
          "items": {
            "description": "The name of the requested shopping profile.",
            "type": "string"
          },
          "minItems": 1
        },
        "ranking": {
          "type": "integer",
          "description": "The ranking value of the offer based on shopping profile."
        }
      },
      "x-api-ref": "ShoppingProfileRanking"
    },
    "ShowMoreFlights": {
      "type": "object",
      "description": "This object contains elements to request more flights for an offer.",
      "required": [
        "baseOfferId",
        "concernedBoundTId"
      ],
      "properties": {
        "baseOfferId": {
          "type": "string",
          "description": "Selected offer from the previous air-offers search response.",
          "pattern": "[a-zA-Z0-9 -]{1,35}"
        },
        "concernedBoundTId": {
          "type": "integer",
          "description": "Tid of the bound where the user requests more flights",
          "minimum": 1,
          "maximum": 6
        }
      },
      "x-api-ref": "ShowMoreFlights"
    },
    "SingleHotelOffers": {
      "title": "SingleAvailability",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "properties": {
            "data": {
              "$ref": "#/definitions/HotelOffers"
            },
            "meta": {
              "$ref": "#/definitions/Meta"
            },
            "dictionaries": {
              "$ref": "#/definitions/HotelDictionary"
            }
          }
        }
      ],
      "x-api-ref": "SingleHotelOffers"
    },
    "SliderAirPricingRecords": {
      "type": "object",
      "required": [
        "monetaryUnitPrices",
        "milesUnitPrices",
        "totalPrices"
      ],
      "description": "It stores the different price breakdowns for Air related resources",
      "properties": {
        "monetaryUnitPrices": {
          "description": "List of monetary Unit prices, where the UnitPrice expresses a price per single traveler type. It can be expressed in several currencies, thus this list will contain only one element when a single currency is used.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SliderUnitPrice"
          }
        },
        "milesUnitPrices": {
          "description": "List of miles Unit prices, where the UnitPrice expresses a price in points per single traveler type.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SliderUnitPrice"
          }
        },
        "totalPrices": {
          "description": "List of Total prices. Price can be expressed in several currencies (cash or miles), thus this list will contain only one element when a single currency is used.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SliderPrice"
          }
        }
      },
      "x-api-ref": "SliderAirPricingRecords"
    },
    "SliderPrice": {
      "type": "object",
      "description": "SliderPrice breakdowns expressed as exhaustive amounts",
      "properties": {
        "base": {
          "description": "Base price. It includes some surcharges, but no taxes nor fees",
          "type": "integer",
          "format": "int64",
          "minimum": 0
        },
        "total": {
          "description": "Total price, including base fare, taxes, surcharges and fees (excluding credit or debit card fees)",
          "type": "integer",
          "format": "int64",
          "minimum": 0
        },
        "currencyCode": {
          "description": "ISO currency [code](http://www.iso.org/iso/home/standards/currency_codes.htm). It allows accessing the currency dictionary, containing any information related to the currency: in particular `decimalPlaces`  can be used to determine the amount actual value and display. Example: the numerical amount `1955` associated to the `EUR` currency code (`decimalPlaces: 2`) corresponds to: `19,55 Euro`. For points (or miles) the code associated is `MIL`, for compensation/upgrade credits `ECR`.",
          "type": "string",
          "pattern": "[A-Z]{3}",
          "x-dictionary-name": "currency",
          "x-field-name": "currency",
          "x-field-type": "CurrencyDictionaryItem"
        },
        "taxes": {
          "description": "Taxes breakdown",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tax"
          }
        },
        "totalTaxes": {
          "description": "Sum of all taxes (including surcharges)",
          "type": "integer",
          "format": "int64",
          "minimum": 0
        },
        "surcharges": {
          "description": "Surcharges breakdown",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Surcharge"
          }
        },
        "totalSurcharges": {
          "description": "Sum of all surcharges",
          "type": "integer",
          "format": "int64",
          "minimum": 0
        }
      },
      "x-api-ref": "SliderPrice"
    },
    "SliderUnitPrice": {
      "type": "object",
      "description": "Price per traveler expressed using multiple currencies.\ne.g. in case of 2 adults and 1 child, it contains the price for 1 adult and the price for 1 child.\n",
      "properties": {
        "travelerIds": {
          "type": "array",
          "items": {
            "description": "Price is applicable to this traveler or group of travelers.\nIn case of a transaction either cart-free or based on a cart that does not contain travelers, travelers ids are defined in anonymousTraveler dictionary.\nOtherwise travelers ids are defined in cart\n",
            "type": "string"
          }
        },
        "flightIds": {
          "type": "array",
          "items": {
            "description": "Price is applicable to this flight or group of flights. If not provided, the price applies to all flights",
            "type": "string"
          }
        },
        "serviceIds": {
          "type": "array",
          "items": {
            "description": "Price is applicable to this service or group of services.",
            "type": "string"
          }
        },
        "seatIds": {
          "type": "array",
          "items": {
            "description": "Price is applicable to this seat or group of seats.",
            "type": "string"
          }
        },
        "price": {
          "description": "Price breakdown",
          "$ref": "#/definitions/SliderPrice"
        },
        "isInformative": {
          "description": "It is true in case the price breakdown has only informative purpose.",
          "type": "boolean"
        }
      },
      "x-api-ref": "SliderUnitPrice"
    },
    "Source": {
      "type": "object",
      "description": "An object containing references to the source of the error",
      "title": "IssueSource",
      "properties": {
        "pointer": {
          "description": "a JSON Pointer [RFC6901] to the associated entity in the request document",
          "type": "string"
        },
        "parameter": {
          "description": "a string indicating which URI query parameter caused the issue",
          "type": "string"
        }
      },
      "x-api-ref": "Source"
    },
    "SpanishLargeFamilyCard": {
      "type": "object",
      "description": "Entitlement document of type Spanish Large Family Card. Only one Spanish Large Family card is allowed for a single traveler.",
      "allOf": [
        {
          "$ref": "#/definitions/EntitlementDocument"
        },
        {
          "type": "object",
          "required": [
            "travelerType",
            "familyCardNumber",
            "postalCode"
          ],
          "properties": {
            "travelerType": {
              "description": "Type of the traveler that holds the resident card: Spanish citizen, European citizen resident in Spain,   government worker (deputies and senators) or minor under 14 without identity card.",
              "type": "string",
              "enum": [
                "spanishCitizen",
                "europeanCitizen",
                "governmentWorker",
                "minorWithoutId"
              ],
              "x-risk-personal-data-field": "CITIZENSHIP"
            },
            "birthDate": {
              "type": "string",
              "description": "Date of birth (date in ISO 8601, e.g. 1980-07-25: YYYY-MM-DD). Mandatory only for travelerType minorWithoutId.",
              "format": "date",
              "example": "1980-07-25",
              "x-risk-personal-data-field": "DATE_OF_BIRTH"
            },
            "identityCardNumber": {
              "type": "string",
              "description": "Identity Document number (as it appears on the document)",
              "example": "X5145632J",
              "x-risk-personal-data-field": "NATIONAL_DOCUMENT_NUMBER"
            },
            "familyCardNumber": {
              "type": "string",
              "description": "Family Card Document number (as it appears on the document)",
              "example": "QFU514563221J",
              "x-risk-personal-data-field": "NATIONAL_DOCUMENT_NUMBER"
            },
            "postalCode": {
              "description": "Postal code number associated to the region where the family card is registered.",
              "type": "string",
              "pattern": "[0-9]{1,6}",
              "x-risk-personal-data-field": "NATIONAL_DOCUMENT_NUMBER"
            }
          }
        }
      ],
      "x-api-ref": "SpanishLargeFamilyCard"
    },
    "SpanishResidentCard": {
      "type": "object",
      "description": "Entitlement document of type Spanish Resident Card. Only one Spanish Resident card is allowed for a single traveler.",
      "allOf": [
        {
          "$ref": "#/definitions/EntitlementDocument"
        },
        {
          "type": "object",
          "required": [
            "travelerType",
            "postalCode",
            "name"
          ],
          "properties": {
            "travelerType": {
              "description": "Type of the traveler that holds the resident card: Spanish citizen, European citizen resident in Spain,   government worker (deputies and senators) or minor under 14 without identity card.",
              "type": "string",
              "enum": [
                "spanishCitizen",
                "europeanCitizen",
                "governmentWorker",
                "minorWithoutId"
              ],
              "x-risk-personal-data-field": "CITIZENSHIP"
            },
            "birthDate": {
              "type": "string",
              "description": "Date of birth (date in ISO 8601, e.g. 1980-07-25: YYYY-MM-DD). Mandatory only for travelerType minorWithoutId.",
              "format": "date",
              "example": "1980-07-25",
              "x-risk-personal-data-field": "DATE_OF_BIRTH"
            },
            "identityCardNumber": {
              "type": "string",
              "description": "Identity Document number (as it appears on the document)",
              "example": "X5145632J",
              "x-risk-personal-data-field": "NATIONAL_DOCUMENT_NUMBER"
            },
            "postalCode": {
              "description": "Postal code number of the city where the Spanish resident is registered.",
              "type": "string",
              "pattern": "[0-9]{1,6}",
              "x-risk-personal-data-field": "NATIONAL_DOCUMENT_NUMBER"
            },
            "name": {
              "$ref": "#/definitions/NameInEntitlementDocument"
            }
          }
        }
      ],
      "x-api-ref": "SpanishResidentCard"
    },
    "SpecialEquipment": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Amount"
        },
        {
          "type": "object",
          "properties": {
            "code": {
              "type": "string",
              "description": "Special Equipment code",
              "x-dictionary-name": "specialEquipment",
              "x-field-name": "specialEquipment",
              "x-field-type": "string"
            },
            "pricingTimeWindow": {
              "type": "string",
              "description": "Period for which the special equipment pricing applies",
              "enum": [
                "hourly",
                "daily",
                "monthly",
                "weekend",
                "weekly",
                "fullPeriod"
              ]
            }
          }
        }
      ],
      "x-api-ref": "SpecialEquipment"
    },
    "SpecialKeyword": {
      "type": "object",
      "description": "Special keyword added to an order and associated to an airline code (SK). The airline has to previously configure those keywords in their reservation system.",
      "allOf": [
        {
          "$ref": "#/definitions/ItemCommon"
        },
        {
          "type": "object",
          "required": [
            "keyword",
            "airlineCode"
          ],
          "properties": {
            "tid": {
              "description": "Temporary id that can be used to associate requested and returned keyword. Valid only for the time of the transaction",
              "type": "string",
              "pattern": "[a-zA-Z0-9_]{1,20}"
            },
            "keyword": {
              "description": "Keyword defined by the airline",
              "type": "string",
              "pattern": "[A-Z]{2,4}"
            },
            "airlineCode": {
              "description": "Two letter airline code defined for the OSI message. IATA airline code (http://www.iata.org/publications/Pages/code-search.aspx). For a codeshare segment that has been merged into a single element, this can be the marketing or the operating airline code",
              "type": "string",
              "pattern": "[A-Z0-9]{2}[A-Z]*"
            },
            "statusCode": {
              "description": "HK status code (mandatory if the number in party is required by the airline)",
              "type": "string"
            },
            "quantity": {
              "type": "integer",
              "description": "Desired quantity of the special keyword (also called Number In Party)",
              "pattern": "[1-9][0-9]?"
            },
            "freetext": {
              "description": "Free-flow text sent in the Special Keyword (SK) in the order (optional if allowed by the airline on their reservation system). The maximum length for the free text information will be stored in the Keyword table. However, it is recommended that the free text does not exceed 53 characters as OSI TTY transmission cannot exceed 64 characters in total",
              "type": "string",
              "x-risk-personal-data-field": "REMARKS",
              "pattern": "[a-zA-Z0-9!@#$%^&*() -_=+\\|\"':<>,.?/]{1,53}"
            },
            "travelerIds": {
              "type": "array",
              "description": "A list of travelers associated to this special keyword. If not specified, the special keyword applies to all travelers",
              "items": {
                "type": "string",
                "pattern": "[a-zA-Z0-9-]{1,20}"
              }
            },
            "flightIds": {
              "type": "array",
              "description": "A list of flights associated to this special keyword. If not specified, the special keyword applies to all flights",
              "items": {
                "type": "string",
                "pattern": "[a-zA-Z0-9-]{1,20}"
              }
            }
          }
        }
      ],
      "x-api-ref": "SpecialKeyword"
    },
    "SpecialKeywordReply": {
      "type": "object",
      "description": "Reply containing a special keyword object.\n",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/SpecialKeyword"
            },
            "dictionaries": {
              "type": "object"
            }
          }
        }
      ],
      "x-api-ref": "SpecialKeywordReply"
    },
    "SpecialKeywordsListReply": {
      "type": "object",
      "description": "Reply containing a list of special keyword.\n",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "type": "array",
              "description": "List of special keywords",
              "items": {
                "$ref": "#/definitions/SpecialKeyword"
              }
            },
            "dictionaries": {
              "type": "object"
            }
          }
        }
      ],
      "x-api-ref": "SpecialKeywordsListReply"
    },
    "SpecialServiceRequest": {
      "type": "object",
      "description": "Special Service Request (SSR) for an order",
      "allOf": [
        {
          "$ref": "#/definitions/ItemCommon"
        },
        {
          "type": "object",
          "required": [
            "code"
          ],
          "properties": {
            "tid": {
              "description": "Temporary id that can be used to associate requested and returned service requests. Valid only for the time of the transaction",
              "type": "string",
              "pattern": "[a-zA-Z0-9_]{1,20}"
            },
            "code": {
              "type": "string",
              "description": "Code of the Special Service Request",
              "pattern": "[A-Z]{4}"
            },
            "airlineCode": {
              "type": "string",
              "description": "Two letter airline code defined for the Special Service Request (SSR) message. IATA airline code (http://www.iata.org/publications/Pages/code-search.aspx). Airline on which the Special Service Request applies. If not specified, the Special Service Request applies to all flights.",
              "pattern": "[A-Z0-9]{2}[A-Z]*"
            },
            "statusCode": {
              "type": "string",
              "description": "Operational status. HK = confirmed, HL = waitlist, TK = schedule change confirmed, schedule change waitlist, UN = unable to confirm not operating, UC = unable to confirm, HX = have cancelled, NO = no action taken. Status code is not returned at shopping time. For the Special Service Request creation, the status HK, SS and NN are supported.",
              "pattern": "[A-Z]{2}",
              "x-dictionary-name": "bookingStatus",
              "x-field-name": "status",
              "x-field-type": "BookingStatusDictionaryItem"
            },
            "quantity": {
              "type": "integer",
              "description": "Desired quantity of the Special Service Request (also called Number In Party)",
              "pattern": "[1-9][0-9]?"
            },
            "isVerified": {
              "type": "boolean",
              "description": "Used for frequent flyer SSR only. In case of SSR for:\nmileage accrual (FQTV)\nrecognition (FQTS)\nredemption (FQTR)\nupgrade (FQTU or FQTO)\nThis flag is indicating if the card has been validated against the Amadeus profile database.\n"
            },
            "freetext": {
              "type": "string",
              "description": "Free-flow text for the Special Service Request in the order (optional if allowed by the airline on their reservation system)",
              "pattern": ".{1,105}"
            },
            "travelerIds": {
              "type": "array",
              "description": "A list of travelers associated to this generic service. If not specified, the generic service applies to all travelers",
              "items": {
                "type": "string",
                "pattern": "[a-zA-Z0-9-]{1,20}"
              }
            },
            "flightIds": {
              "type": "array",
              "description": "A list of flights associated to this generic service. If not specified, the generic service applies to all flights",
              "items": {
                "type": "string",
                "pattern": "[a-zA-Z0-9-]{1,20}"
              }
            }
          }
        }
      ],
      "x-api-ref": "SpecialServiceRequest"
    },
    "SpecialServiceRequestDictionary": {
      "type": "object",
      "properties": {
        "specialServiceRequest": {
          "type": "object",
          "description": "Special service requests map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
          "additionalProperties": {
            "$ref": "#/definitions/SpecialServiceRequestDictionaryItem"
          }
        },
        "bookingStatus": {
          "type": "object",
          "description": "Status map for flights, services, seats and special service requests. For more details please see [Maps in dictionary documentation] (https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
          "additionalProperties": {
            "$ref": "#/definitions/BookingStatusDictionaryItem"
          }
        }
      },
      "x-api-ref": "SpecialServiceRequestDictionary"
    },
    "SpecialServiceRequestDictionaryItem": {
      "description": "Special service requests dictionary. Allows mapping a Special service request to its name. Example: RQST = Request Seat",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "Special service requests name. Eg: \"Request seat\"",
          "type": "string"
        }
      },
      "x-api-ref": "SpecialServiceRequestDictionaryItem"
    },
    "SpecialServiceRequestReply": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/SpecialServiceRequest"
            },
            "dictionaries": {
              "$ref": "#/definitions/SpecialServiceRequestDictionary"
            }
          }
        }
      ],
      "x-api-ref": "SpecialServiceRequestReply"
    },
    "SpecialServiceRequestsListReply": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SpecialServiceRequest"
              }
            },
            "dictionaries": {
              "$ref": "#/definitions/SpecialServiceRequestDictionary"
            }
          }
        }
      ],
      "x-api-ref": "SpecialServiceRequestsListReply"
    },
    "SplitData": {
      "type": "object",
      "description": "Object containing information about the two PNRs after a split.  The child Order contains information about passengers that have been extracted from the original order (parent Order)",
      "properties": {
        "parentOrder": {
          "$ref": "#/definitions/OrderSplitData"
        },
        "childOrder": {
          "$ref": "#/definitions/OrderSplitData"
        }
      },
      "x-api-ref": "SplitData"
    },
    "SplitPaymentItem": {
      "type": "object",
      "description": "Individual items of a split payment.\nTogether, these split payment items are expected to yield a payment that is splitting the amount between different payment methods.\nAllowed payment types are MilesPayment and PaymentCard.\n",
      "required": [
        "paymentMethod"
      ],
      "properties": {
        "paymentMethod": {
          "description": "PaymentMethod used for this part of the payment",
          "$ref": "#/definitions/PaymentMethod"
        },
        "amount": {
          "description": "Amount to be paid for this part of the payment",
          "$ref": "#/definitions/Amount"
        }
      },
      "x-api-ref": "SplitPaymentItem"
    },
    "StandaloneNotificationRequest": {
      "type": "object",
      "description": "The request for a notification.\n",
      "required": [
        "orderId"
      ],
      "properties": {
        "orderId": {
          "description": "The notification will contain the details of the order with this identifier",
          "type": "string",
          "pattern": "[a-zA-Z0-9]{6}",
          "x-risk-personal-data-field": "PNR_RECORD_LOCATOR"
        },
        "lastName": {
          "description": "Last name of one traveler part of the order",
          "type": "string",
          "pattern": "[a-zA-Z -]{1,70}",
          "x-risk-personal-data-field": "PASSENGER_NAME"
        },
        "emailAddresses": {
          "description": "Email addresses, e.g. test@amadeus.com for which notification need to be sent",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-risk-personal-data-field": "EMAIL_ADDRESS"
        },
        "phoneNumbers": {
          "description": "Phone numbers, e.g. +91 66666 66666 for which notification need to be sent. Only phone contacts present in the order are allowed.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PhoneBase"
          }
        },
        "contactIds": {
          "description": "List of contactIds from the order provided in the input, for which the notification need to be sent. Contact Ids with type email are considered as valid entry.",
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "[a-zA-Z0-9-]{1,20}"
          }
        },
        "lang": {
          "description": "Code of the preferred language to be used, e.g. en-GB for English-United Kingdom. [For more details](http://www.lingoes.net/en/translator/langcode.htm)",
          "type": "string",
          "pattern": "[a-zA-Z0-9-]{2,5}"
        },
        "layoutId": {
          "description": "Identifier of the layout to be used as a structure for the notification.  The layout needs to be defined in the FND (Format And Delivery) system.",
          "type": "string"
        },
        "layoutData": {
          "type": "array",
          "description": "Data from the api client that can be used in the email template to customize its content",
          "items": {
            "$ref": "#/definitions/DocumentEnvelope"
          }
        }
      },
      "x-api-ref": "StandaloneNotificationRequest"
    },
    "Status": {
      "type": "object",
      "required": [
        "value"
      ],
      "description": "Indicates if the travel solution has a specific status.",
      "properties": {
        "value": {
          "type": "string",
          "enum": [
            "soldOut",
            "unavailable",
            "waitlist",
            "tooCloseToDeparture",
            "nonCombinableWithSelectedBound"
          ],
          "description": "Indicates travel solution status. If unavailable, soldOut, tooCloseToDeparture or nonCombinableWithSelectedBound is highlighted it means that the travel solution can't be booked and shown only for illustration purposes. Waitlist is returned only for air-calendars entry points. soldOut and tooCloseToDeparture are returned only for air-bounds or air-offers entry points. unavailable can be returned for air-calendars, air-bounds and air-offers. nonCombinableWithSelectedBound can be returned only for bound update step of air-bounds. If soldOut and tooCloseToDeparture are both applicable, soldOut takes the precedence and will be shown. If unavailable and tooCloseToDeparture are both applicable, unavailable takes the precedence and will be shown. If nonCombinableWithSelectedBound and tooCloseToDeparture are both applicable, tooCloseToDeparture takes the precedence and will be shown."
        },
        "unavailabilityReasonCodes": {
          "description": "Displayed only in case of Calendar request when the entry status is 'unavailable'. Highlights detailed reasons of the unavailability.",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "noFlights",
              "noFares",
              "soldOut",
              "dateCrossover",
              "timeCrossover"
            ]
          }
        }
      },
      "x-api-ref": "Status"
    },
    "StopOver": {
      "type": "object",
      "required": [
        "locationCodes",
        "stayDuration"
      ],
      "description": "The stop over can be done either in outbound and/or inbound flight in case of a round trip",
      "properties": {
        "locationCodes": {
          "type": "array",
          "description": "List of stop over locations. If more than one stop over is provided, search result contains alternatives for each stop over.\nOnly one stop over can be done per flight.\nE.g. For a Nice (NCE) - New-york (JFK) and two stop overs London (LHR) Paris (CDG), offers for NCE-LHR-JFK or NCE-PAR-JFK are provided.\n",
          "minItems": 1,
          "maxItems": 4,
          "items": {
            "type": "string",
            "description": "Location code (city or airport code) for stop over stay",
            "pattern": "[a-zA-Z]{3}"
          }
        },
        "stayDuration": {
          "type": "integer",
          "description": "Number of nights involved in the stop-over",
          "minimum": 1,
          "example": 2
        }
      },
      "x-api-ref": "StopOver"
    },
    "Surcharge": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Amount"
        },
        {
          "type": "object",
          "properties": {
            "code": {
              "description": "Surcharge code",
              "type": "string",
              "pattern": "[A-Z0-9]{1,4}",
              "x-dictionary-name": "surcharge",
              "x-field-name": "surcharge",
              "x-field-type": "string"
            },
            "category": {
              "description": "in a context of a reissue, flag indicating if the surcharge is related to the first issue (old) or the reissue (new or refundable)",
              "type": "string",
              "enum": [
                "OLD",
                "NEW",
                "REFUNDABLE",
                "NEW_PAID",
                "COMPENSATED"
              ]
            },
            "isExempted": {
              "description": "flag indicating if the surcharge has been exempted",
              "type": "boolean"
            },
            "pricingTimeWindow": {
              "type": "string",
              "description": "Period for which the surcharge pricing applies",
              "enum": [
                "hourly",
                "daily",
                "monthly",
                "weekend",
                "weekly",
                "fullPeriod"
              ]
            },
            "percentage": {
              "type": "integer",
              "format": "int64",
              "description": "Information available only when used in the context of car-offers. Percentage based on which the surcharge is calculated.\n"
            }
          }
        }
      ],
      "x-api-ref": "Surcharge"
    },
    "System": {
      "title": "System",
      "type": "object",
      "properties": {
        "owner": {
          "$ref": "#/definitions/Company"
        }
      },
      "description": "System",
      "x-api-ref": "System"
    },
    "SystemSearchRequest": {
      "title": "SystemSearchRequest",
      "type": "object",
      "required": [
        "owner"
      ],
      "properties": {
        "owner": {
          "$ref": "#/definitions/CompanySearchRequest"
        }
      },
      "description": "System",
      "x-api-ref": "SystemSearchRequest"
    },
    "Task": {
      "type": "object",
      "description": "A `Task` indicates the data to collect by the API user.",
      "properties": {
        "title": {
          "type": "string",
          "description": "Title of the task. A more user friendly name for the task. This field is returned for information  purpose and no client application logic should be built based on this field value."
        },
        "required": {
          "type": "boolean",
          "description": "Indicates if the airline wishes this task to be completed in priority for the traveler to be able to travel."
        },
        "travelerId": {
          "type": "string",
          "description": "Identifier of the traveler for which data needs to be collected",
          "pattern": "[a-zA-Z0-9-]{1,20}"
        },
        "boundId": {
          "type": "string",
          "description": "Identifier of the bound for which data needs to be collected",
          "pattern": "[a-zA-Z0-9 -]{1,40}"
        },
        "reason": {
          "type": "string",
          "description": "Reason for the task, which is defined and customized by the airline.\n\nThe airline can for example define the following code:\n- USDOT when the API user needs to collect regulatory documents due to regulation issued by the US Department Of Transporation\n- SRD when the traveler is eligible to a Spanish Resident Discount and can enter a Spanish Resident Card\n\nThe API user is then able to customize the behavior and display of its application based on this code."
        },
        "choices": {
          "type": "array",
          "description": "A list of choices.\n                \nThe API user requires only to collect data associated to one of the `choice` to complete the task.",
          "items": {
            "$ref": "#/definitions/TaskChoice"
          }
        }
      },
      "x-api-ref": "Task"
    },
    "TaskCheckCartReply": {
      "description": "Contains a list of `tasks` configured by a airline business rule indicating what data can or should be collected by  the API user.\n\nToday, only `task `related to the collection of `regulatory details` and `entitlement documents` are supported.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/TaskCheckCartReplyData"
            }
          }
        }
      ],
      "x-api-ref": "TaskCheckCartReply"
    },
    "TaskCheckCartReplyData": {
      "type": "object",
      "properties": {
        "tasks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Task"
          }
        }
      },
      "x-api-ref": "TaskCheckCartReplyData"
    },
    "TaskCheckOrderReply": {
      "description": "Contains a list of `tasks` configured by a airline business rule indicating what data can or should be collected by  the API user.\n\nToday, only `tasks` related to the collection of `regulatory details` are supported.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/TaskCheckOrderReplyData"
            }
          }
        }
      ],
      "x-api-ref": "TaskCheckOrderReply"
    },
    "TaskCheckOrderReplyData": {
      "type": "object",
      "properties": {
        "tasks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Task"
          }
        }
      },
      "x-api-ref": "TaskCheckOrderReplyData"
    },
    "TaskChoice": {
      "type": "object",
      "description": "Indicate the type of data to be provided by the API user.\nThe choice includes a link to the API end point to call, as well as constraints on the request body of the call within the `targetSchema`.\n`targetSchema` contains only fields which have more restrictive constraints (pattern, more limited values) than what has been defined in swagger, due to the trip selected by the user.\n\nFor example, the `type` field of `RegulatoryAddress` have two possible values in Swagger: homeAddress, destinationAddress.  Depending on the destination and the traveler identity, only the homeAddress may be needed.\n If an American citizen living officially in the USA flies from Europe to the USA, the citizen only need to enter its HomeAddress. \n TargetSchema provides the information that only homeAddress is needed (whereas the Swagger of the endpoint defines all possible value, regardless of the trip context).",
      "allOf": [
        {
          "$ref": "#/definitions/HttpRequest"
        },
        {
          "type": "object",
          "properties": {
            "targetSchema": {
              "$ref": "#/definitions/TaskTargetSchema"
            }
          }
        }
      ],
      "x-api-ref": "TaskChoice"
    },
    "TaskRegulatoryAddressSchema": {
      "type": "object",
      "description": "Indicates the fields to provide for the `RegulatoryAddress` and the constraints on their value (if any)",
      "required": [
        "type"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/TaskTargetSchema"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "object",
              "description": "The list of the `RegulatoryAddress` type the API user can choose from",
              "properties": {
                "enum": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "homeAddress",
                      "destinationAddress"
                    ]
                  }
                }
              }
            }
          }
        }
      ],
      "x-api-ref": "TaskRegulatoryAddressSchema"
    },
    "TaskRegulatoryDocumentSchema": {
      "type": "object",
      "description": "Indicates the fields to provide for the `RegulatoryApisDocument` and the constraints on their value (if any)",
      "required": [
        "documentType"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/TaskTargetSchema"
        },
        {
          "type": "object",
          "properties": {
            "documentType": {
              "type": "object",
              "description": "The list the regulatory document the API user can choose from",
              "properties": {
                "enum": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "passport",
                      "passportCard",
                      "identityCard",
                      "crewMemberCertificate",
                      "borderCrossingCard",
                      "militaryIdentityCard",
                      "reEntryPermit",
                      "naturalisationCardUS",
                      "approvedIdentityDocument",
                      "visa",
                      "residentAlienCard",
                      "permanentResidentCard",
                      "redressNumber",
                      "knownTravellerNumber",
                      "nexusCard"
                    ]
                  }
                }
              }
            }
          }
        }
      ],
      "x-api-ref": "TaskRegulatoryDocumentSchema"
    },
    "TaskSpanishLargeFamilyCardSchema": {
      "type": "object",
      "description": "Indicates the fields to provide for the `SpanishLargeFamilyCard` and constraints on their value.\nToday, no constraints can be returned for this type of document.",
      "allOf": [
        {
          "$ref": "#/definitions/TaskTargetSchema"
        }
      ],
      "x-api-ref": "TaskSpanishLargeFamilyCardSchema"
    },
    "TaskSpanishResidentCardSchema": {
      "type": "object",
      "description": "Indicates the fields to provide for the `SpanishResidentCard` and the constraints on their value (if any)",
      "allOf": [
        {
          "$ref": "#/definitions/TaskTargetSchema"
        },
        {
          "type": "object",
          "properties": {
            "postalCode": {
              "type": "object",
              "description": "Pattern to follow for the postal code entered by the api user",
              "properties": {
                "pattern": {
                  "type": "string"
                }
              }
            },
            "discountCode": {
              "type": "object",
              "description": "Indicates whether the need to enter a `SpanishResidentCard` is due to one or several specific discount codes.",
              "properties": {
                "enum": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      ],
      "x-api-ref": "TaskSpanishResidentCardSchema"
    },
    "TaskTargetSchema": {
      "type": "object",
      "description": "Indicate the data to be provided by the API user, and the associated constraints on its field (if any, e.g. pattern to apply, limited list of values).\nTo see the structure of the different target schema, please check [Task Target Schema documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/task_target_schemas.html#/TaskTargetSchemas/get_)",
      "discriminator": "schemaType",
      "required": [
        "schemaType"
      ],
      "properties": {
        "schemaType": {
          "type": "string",
          "enum": [
            "TaskRegulatoryAddressSchema",
            "TaskRegulatoryDocumentSchema",
            "TaskSpanishLargeFamilyCardSchema",
            "TaskSpanishResidentCardSchema"
          ]
        }
      },
      "x-api-ref": "TaskTargetSchema"
    },
    "Tax": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Amount"
        },
        {
          "type": "object",
          "properties": {
            "code": {
              "description": "Tax code",
              "type": "string",
              "pattern": "[A-Z0-9]{1,4}",
              "x-dictionary-name": "tax",
              "x-field-name": "tax",
              "x-field-type": "string"
            },
            "category": {
              "description": "In the context of a reissue, flag indicating if the tax is related to the first issue (old) or the reissue (new or refundable).\n",
              "type": "string",
              "enum": [
                "OLD",
                "NEW",
                "REFUNDABLE",
                "NEW_PAID",
                "COMPENSATED",
                "NON_REFUNDABLE"
              ]
            },
            "type": {
              "description": "The type of tax (airport tax, PFC tax, etc.). A PFC tax is a Passenger Facility Charge (US airport fee; see https://en.wikipedia.org/wiki/Passenger_facility_charge). Currently set only for refundable PFC taxes; for all other taxes the type is NOT set.\n",
              "type": "string",
              "enum": [
                "PFC"
              ]
            },
            "isExempted": {
              "description": "flag indicating if the tax has been exempted",
              "type": "boolean"
            },
            "percentage": {
              "type": "integer",
              "format": "int64",
              "description": "Information available only when used in the context of car-offers. Percentage based on which the tax is calculated.\n"
            },
            "applicationLevel": {
              "description": "Specifies level / scope where the Tax is applicable (full itinerary, portion of itinerary, geographic zone etc.).\nCurrently supports only itinerary level tax.\n",
              "type": "string",
              "enum": [
                "itinerary"
              ]
            }
          }
        }
      ],
      "x-api-ref": "Tax"
    },
    "TaxIdentificationNumber": {
      "type": "object",
      "properties": {
        "documentType": {
          "description": "Document type",
          "type": "string",
          "enum": [
            "oecdTaxIdentificationNumber"
          ]
        },
        "subDocumentType": {
          "description": "Document subtype. See [OECD tax identification numbers official documentation] (https://www.oecd.org/tax/automatic-exchange/crs-implementation-and-assistance/tax-identification-numbers/)",
          "type": "string",
          "enum": [
            "australianBusinessNumber"
          ]
        },
        "number": {
          "description": "Tax identification number",
          "type": "string",
          "pattern": "[a-zA-Z0-9-]{1,20}",
          "x-risk-personal-data-field": "NATIONAL_DOCUMENT_NUMBER"
        }
      },
      "x-api-ref": "TaxIdentificationNumber"
    },
    "TeaserDictionary": {
      "type": "object",
      "properties": {
        "insuranceDictionary": {
          "description": "Dictionary for insurance offers",
          "$ref": "#/definitions/InsuranceDictionary"
        },
        "carDictionary": {
          "description": "Dictionary for car offers",
          "$ref": "#/definitions/CarMainDictionary"
        },
        "hotelDictionary": {
          "description": "Dictionary for hotel offers",
          "$ref": "#/definitions/HotelDictionary"
        }
      },
      "x-api-ref": "TeaserDictionary"
    },
    "TeaserItem": {
      "type": "object",
      "required": [
        "id",
        "recommendationType"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Id of the teaser"
        },
        "recommendationType": {
          "type": "string",
          "description": "The type of the recommendation: carOffer, hotelOffer, etc.",
          "enum": [
            "car",
            "hotel",
            "insurance"
          ]
        },
        "mediaId": {
          "type": "string",
          "description": "Media id used to display the teaser"
        },
        "mediaUrl": {
          "type": "string",
          "description": "Media url to display the teaser"
        },
        "teaserHeadline": {
          "type": "string",
          "description": "Title of the teaser"
        },
        "priorityOrder": {
          "type": "integer",
          "description": "Priority order of the teaser, to be used to prioritize the display when several teaser items are returned (the higher the number, the more relevant the teaser is)",
          "minimum": 1,
          "maximum": 999
        },
        "car": {
          "$ref": "#/definitions/CarRecommendation"
        },
        "hotel": {
          "$ref": "#/definitions/HotelRecommendation"
        },
        "insurance": {
          "$ref": "#/definitions/InsuranceRecommendation"
        }
      },
      "x-api-ref": "TeaserItem"
    },
    "TeaserRequest": {
      "type": "object",
      "description": "Object used to input the information to be used when adding an offer into a teaser.\n",
      "required": [
        "teaserIds"
      ],
      "properties": {
        "orderId": {
          "type": "string",
          "description": "Identifier of an order (Record Locator)",
          "pattern": "[a-zA-Z0-9]{6}",
          "x-risk-personal-data-field": "PNR_RECORD_LOCATOR"
        },
        "teaserIds": {
          "type": "array",
          "description": "Identifier of the teasers. When teaserIds coming from a previous call are provided, the response will include a richer set of details: third party providers information, search criteria and recommendations.",
          "items": {
            "type": "string",
            "pattern": "[a-zA-Z0-9+/=]*"
          }
        },
        "searchMode": {
          "type": "string",
          "description": "Mode applied to build teaser answer based on available offers matching the teaser criteria Possible values:\n- 'cheapest' (default value): to return the cheapest offer.\n- 'recommended': to return the best offer recommended by the Car provider. For non Car teasers, behaves the same as default searchMode\n- 'all': to return all the available recommendations.\n- 'consolidated': to return the cheapest offer per Hotel when several providers propose offers for the same physical Hotel. For non Hotel teasers, behaves the same as default searchMode",
          "default": "cheapest",
          "enum": [
            "cheapest",
            "recommended",
            "all",
            "consolidated"
          ]
        },
        "carLoyaltyNumbers": {
          "type": "array",
          "description": "Car Loyalty number with the following structure {providerCode}{loyaltyCode}{loyaltyNumber};\nExample: ZEFTXC12344 where providerCode=ZE, loyaltyCode=FT and loyaltyNumber=XC12344\n",
          "items": {
            "type": "string"
          },
          "x-risk-personal-data-field": "FREQUENT_FLYER_NUMBER"
        },
        "driverAge": {
          "type": "integer",
          "description": "The age of the driver at departure date. If not provided, the returned rates will not take into account the drivers age.",
          "x-risk-personal-data-field": "DATE_OF_BIRTH"
        },
        "travelerResidenceCountryCode": {
          "description": "Country of residence in ISO 3166-1",
          "type": "string",
          "pattern": "[a-zA-Z0-9]{2}",
          "x-risk-personal-data-field": "ADDRESS"
        },
        "travelerResidenceStateCode": {
          "description": "State code of residence(two character standard IATA state code)",
          "type": "string",
          "pattern": "[a-zA-Z0-9]{1,2}",
          "x-risk-personal-data-field": "ADDRESS"
        }
      },
      "x-api-ref": "TeaserRequest"
    },
    "TeasersListReply": {
      "type": "object",
      "description": "All the tpc content consisting among the others in the request criteria and the recommendations",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TeaserItem"
              }
            },
            "dictionaries": {
              "$ref": "#/definitions/TeaserDictionary"
            }
          }
        }
      ],
      "x-api-ref": "TeasersListReply"
    },
    "TextExtension": {
      "type": "object",
      "description": "An extension to be used for text content.",
      "allOf": [
        {
          "$ref": "#/definitions/Extension"
        },
        {
          "type": "object",
          "required": [
            "content"
          ],
          "properties": {
            "content": {
              "type": "string",
              "minLength": 1,
              "maxLength": 300000,
              "description": "The text content of this extension."
            }
          }
        }
      ],
      "x-api-ref": "TextExtension"
    },
    "TextWithLanguageType": {
      "description": "text and language",
      "properties": {
        "lang": {
          "type": "string",
          "pattern": "[a-zA-Z0-9-]{2,5}",
          "description": "Language code of the text"
        },
        "text": {
          "type": "string",
          "description": "Short description"
        }
      },
      "x-api-ref": "TextWithLanguageType"
    },
    "TimeWindow": {
      "type": "object",
      "description": "Define a time window with a opening and closing time.\nIf no opening date and time is provided, this means that it's always open before the closing time.\nLikewise, if no closing date and time is provided, this means that the window is open-ended.\n",
      "properties": {
        "openingDateAndTime": {
          "description": "Opening date and time of the window in ISO 8601 (eg. 2017-02-10T06:12:00+02:00)",
          "type": "string",
          "format": "date-time"
        },
        "closingDateAndTime": {
          "description": "Closing date and time of the window in ISO 8601 (eg. 2017-02-10T06:12:00+02:00)",
          "type": "string",
          "format": "date-time"
        }
      },
      "x-api-ref": "TimeWindow"
    },
    "TransportationCompany": {
      "type": "object",
      "description": "Transportation Company description",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "company name or broker name"
        },
        "contact": {
          "description": "contact Information",
          "$ref": "#/definitions/TransportationContact"
        }
      },
      "x-api-ref": "TransportationCompany"
    },
    "TransportationContact": {
      "type": "object",
      "description": "the contact details of the transportation",
      "properties": {
        "address": {
          "description": "Address for drop off",
          "$ref": "#/definitions/AddressBase"
        },
        "phone": {
          "description": "Phone number",
          "type": "string",
          "pattern": "[0-9]{1,15}(x[0-9]{1,8})?",
          "x-risk-personal-data-field": "PHONE_NUMBER"
        },
        "email": {
          "description": "Email address, e.g. test@amadeus.com",
          "type": "string",
          "x-risk-personal-data-field": "EMAIL_ADDRESS"
        }
      },
      "x-api-ref": "TransportationContact"
    },
    "TransportationOfferDetails": {
      "type": "object",
      "description": "Pick up and Drop off information of the tranportation offer",
      "required": [
        "locationCode",
        "dateTime"
      ],
      "properties": {
        "locationCode": {
          "description": "Location code",
          "type": "string",
          "pattern": "[a-zA-Z]{3}",
          "x-dictionary-name": "location",
          "x-field-name": "location",
          "x-field-type": "LocationDictionaryItem"
        },
        "dateTime": {
          "description": "Local date and time with the following format \"yyyy-MM-dd'T'HH:mm:ssZ\" (e.g. 2018-02-10T20:40:00+02:00)",
          "type": "string",
          "format": "date-time",
          "example": "2018-02-10T20:40:00+02:00"
        },
        "terminal": {
          "description": "Terminal number",
          "type": "string",
          "pattern": "[a-zA-Z0-9]{1,25}"
        },
        "contact": {
          "description": "contact Information",
          "$ref": "#/definitions/TransportationContact"
        },
        "geoLocalization": {
          "description": "Geo localization details",
          "$ref": "#/definitions/GeoCode"
        }
      },
      "x-api-ref": "TransportationOfferDetails"
    },
    "TravelDocument": {
      "type": "object",
      "description": "Travel documents generated at issuance time.",
      "allOf": [
        {
          "$ref": "#/definitions/ItemsAssociation"
        },
        {
          "type": "object",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "description": "Travel Document number (e.g. 220-1638074788)",
              "type": "string",
              "x-risk-personal-data-field": "AIRLINE_TICKET_NUMBER"
            },
            "documentType": {
              "description": "It specifies if the document is the record generated when confirming flights (documentType =  eticket),\nor is used for for travel related services, such as excess baggage charges, miscellaneous charges, penalty fees, residual value, lounge access charges, etc.. (documentType =  service), or for third party contents (documentType = insurance or hotel)\n",
              "type": "string",
              "enum": [
                "eticket",
                "services",
                "insurance",
                "hotel"
              ]
            },
            "price": {
              "description": "Provides the price information stored in the travel document.\nDue to an internal limitation, the prices related to \"fees\" are not available at travel document level, so the amount in \"totalAmount\" field will not include the amount paid for the fees.\n",
              "$ref": "#/definitions/Price"
            },
            "paymentTransactions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PaymentTransaction"
              }
            },
            "fareInfos": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FareInfoTravelDocument"
              }
            },
            "originalDocuments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OriginalTravelDocument"
              }
            },
            "conjunctiveTravelDocuments": {
              "description": "Provides the Conjunctive travel documents associated to the curent travel document\n",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ConjunctiveTravelDocument"
              }
            },
            "creation": {
              "description": "Principally added to enrich the information related to the creation of a document\n",
              "$ref": "#/definitions/EventLog"
            },
            "areCouponsAndSegmentsInSync": {
              "description": "Boolean used to differentiate Ticket/EMD where coupons and segments/services are auto synchronized, with the ones not trusted.(No default value as read from the PNR).",
              "type": "boolean"
            },
            "status": {
              "description": "Status of the travel document contained in the fare element at PNR level",
              "type": "string",
              "enum": [
                "ISSUED",
                "REFUNDED",
                "VOIDED",
                "PRINTED"
              ]
            }
          }
        }
      ],
      "x-api-ref": "TravelDocument"
    },
    "TravelDocumentNotificationsData": {
      "type": "object",
      "description": "Reply containing a list of processed notifications with their status and format.\n\nNote: Today, only contentType 'travelDocumentReceipt' is supported.",
      "allOf": [
        {
          "type": "object",
          "required": [
            "type",
            "documentIds"
          ],
          "properties": {
            "tid": {
              "description": "Temporary id that can be used to associate requested and returned notifications. Valid only for the time of the transaction",
              "type": "string",
              "pattern": "[a-zA-Z0-9_]{1,20}"
            },
            "type": {
              "type": "string",
              "description": "Process performed by the endpoint",
              "enum": [
                "notification"
              ]
            },
            "documentIds": {
              "description": "The travel documents covered by this notification.",
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "[0-9]{1,20}",
                "x-risk-personal-data-field": "AIRLINE_TICKET_NUMBER"
              }
            }
          }
        },
        {
          "$ref": "#/definitions/NotificationResult"
        }
      ],
      "x-api-ref": "TravelDocumentNotificationsData"
    },
    "TravelDocumentNotificationsReply": {
      "type": "object",
      "description": "Reply containing the list of processed notification groups with their status and formats.",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TravelDocumentNotificationsData"
              }
            }
          }
        }
      ],
      "x-api-ref": "TravelDocumentNotificationsReply"
    },
    "TravelDocumentNotificationsRequest": {
      "type": "object",
      "description": "A notification group request.\n\nAll travel documents provided within a group will try to be merged within the same notifications (e.g. eTickets and EMDs).\n\nIf documents associated to different passengers are grouped together in the request, they will not be merged and several  notifications will be delivered.\n\nEMDs can be merged only with the associated eTicket.",
      "required": [
        "documentIds"
      ],
      "properties": {
        "tid": {
          "description": "Temporary id that can be used to associate requested and returned notifications. Valid only for the time of the transaction.",
          "type": "string",
          "pattern": "[a-zA-Z0-9_]{1,20}"
        },
        "documentIds": {
          "description": "The travel documents to be covered by this notification group.",
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "[0-9]{1,20}",
            "x-risk-personal-data-field": "AIRLINE_TICKET_NUMBER"
          }
        },
        "contactIds": {
          "description": "List of contactIds from the order provided in the input, for which the notifications need to be sent. Only Contact Ids with type email are considered as valid entry in this endpoint.",
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "[a-zA-Z0-9-]{1,20}",
            "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
          }
        },
        "language": {
          "description": "Code of the preferred language to be used, e.g. en-GB for English-United Kingdom. [For more details](http://www.lingoes.net/en/translator/langcode.htm)",
          "type": "string",
          "pattern": "[a-zA-Z0-9-_]{2,5}"
        }
      },
      "x-api-ref": "TravelDocumentNotificationsRequest"
    },
    "TravelDocumentReply": {
      "type": "object",
      "description": "Reply containing a travel document information",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/TravelDocument"
            },
            "dictionaries": {
              "$ref": "#/definitions/DictionaryCommon"
            }
          }
        }
      ],
      "x-api-ref": "TravelDocumentReply"
    },
    "TravelDocumentsListData": {
      "type": "object",
      "description": "Reply containing a list of travel documents",
      "properties": {
        "travelDocuments": {
          "type": "array",
          "description": "Travel documents (e-tickets and service-related documents)",
          "items": {
            "$ref": "#/definitions/TravelDocument"
          }
        },
        "notifications": {
          "type": "array",
          "description": "List of result of each notification sent for this order.",
          "items": {
            "$ref": "#/definitions/NotificationResult"
          }
        }
      },
      "x-api-ref": "TravelDocumentsListData"
    },
    "TravelDocumentsListReply": {
      "type": "object",
      "description": "Reply containing a list of travel documents",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/TravelDocumentsListData"
            },
            "dictionaries": {
              "$ref": "#/definitions/DictionaryCommon"
            },
            "meta": {
              "$ref": "#/definitions/Meta"
            }
          }
        }
      ],
      "x-api-ref": "TravelDocumentsListReply"
    },
    "Traveler": {
      "type": "object",
      "description": "Individual taking part in a journey",
      "allOf": [
        {
          "$ref": "#/definitions/TravelerBase"
        },
        {
          "type": "object",
          "properties": {
            "gender": {
              "description": "Gender of the traveler (value 'unknown' to be used for undisclosed gender).\nThis attribute is available for the Cart resource.\nIn the context of an Order, the information could be retrieved as well from regulatory documents (when specified).\n",
              "type": "string",
              "enum": [
                "male",
                "female",
                "unspecified",
                "unknown"
              ],
              "x-risk-personal-data-field": "PASSENGER_TYPE"
            },
            "regulatoryDetails": {
              "type": "array",
              "description": "List of regulatory details for Advance Passenger Information associated to the traveler.\nThese information are available only when using the operations associated to the cart/order `regulatory-details` sub resource\n",
              "items": {
                "$ref": "#/definitions/RegulatoryApisDetail"
              }
            },
            "nationalityCountryCodes": {
              "type": "array",
              "description": "Traveler's nationalities expressed as two letter country codes",
              "items": {
                "type": "string",
                "description": "ISO 3166-1 country code",
                "pattern": "[a-zA-Z0-9]{2}"
              },
              "x-risk-personal-data-field": "CITIZENSHIP"
            },
            "customerProfileId": {
              "type": "string",
              "description": "Identifier of customer profile or persona (from market segment) associated to the traveler, used to retrieve his/her inferred and declared travel preferences",
              "pattern": "[a-zA-Z0-9]{1,26}"
            },
            "staffNumber": {
              "type": "string",
              "description": "Staff number, present if the traveler is identified as an airline staff member",
              "x-risk-personal-data-field": "AIRLINE_TICKET_NUMBER"
            },
            "staffCategory": {
              "description": "staff category of the traveler.\n",
              "type": "string",
              "enum": [
                "bookable",
                "standby"
              ]
            },
            "entitlementDocuments": {
              "type": "array",
              "description": "List of entitlement documents associated to the traveler.\nThese information are available only when using the operations associated to the cart `entitlement-documents` sub resource\n",
              "items": {
                "$ref": "#/definitions/EntitlementDocument"
              }
            }
          }
        }
      ],
      "x-api-ref": "Traveler"
    },
    "TravelerAirOfferPricingRequest": {
      "type": "object",
      "description": "Object used to input the pricing options traveler related to be used when revalidating an air offer in a cart.\nAs of now, options that are supported are:\n* passenger type code\n* passenger type discount codes: up to 2 per passenger at itinerery level,\n  1 per passenger when boundId is provided\n",
      "required": [
        "travelerId"
      ],
      "properties": {
        "travelerId": {
          "type": "string",
          "description": "Reference to the traveler associated to new provided pricing options",
          "pattern": "[a-zA-Z0-9-]{1,20}"
        },
        "passengerTypeCode": {
          "type": "string",
          "description": "Corresponds to a [Passenger type code](http://api.dev.amadeus.net/api/Development/common/codelist/PNR_PassengerType.htm) When specified, this apply to the entire itinerary and is therefore not compatible with boundId\n",
          "pattern": "[a-zA-Z0-9]{2,3}",
          "x-risk-personal-data-field": "PASSENGER_TYPE"
        },
        "boundId": {
          "type": "string",
          "description": "Reference to the bound stored in the shopping cart and associated to the new provided pricing options (e.g. discounts).\n",
          "pattern": "[a-zA-Z0-9-]{1,20}"
        },
        "passengerTypeDiscountCodes": {
          "type": "array",
          "description": "Passenger type discount codes that can be used to biase the air offers pricing When boundId is provided, only up to 1 code can be requested\n",
          "items": {
            "type": "string",
            "pattern": "[a-zA-Z0-9]{2,6}"
          },
          "maxItems": 2,
          "x-risk-personal-data-field": "PASSENGER_TYPE"
        }
      },
      "x-api-ref": "TravelerAirOfferPricingRequest"
    },
    "TravelerBase": {
      "type": "object",
      "description": "Individual taking part in a journey",
      "allOf": [
        {
          "$ref": "#/definitions/TravelerCommon"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "traveler id",
              "pattern": "[a-zA-Z0-9-]{1,20}"
            },
            "tid": {
              "description": "Temporary id used to identify a traveler. can be used to associate an infant to an adult, when the adult id is not known yet. only valid the time of the transaction",
              "type": "string",
              "pattern": "[a-zA-Z0-9_]{1,20}"
            },
            "names": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Name"
              }
            },
            "dateOfBirth": {
              "description": "Date of birth (date in ISO 8601: http://www.w3.org/TR/NOTE-datetime)",
              "type": "string",
              "format": "date",
              "example": "2002-07-25",
              "x-risk-personal-data-field": "DATE_OF_BIRTH"
            },
            "age": {
              "description": "Traveler age, in years",
              "type": "integer",
              "minimum": 0,
              "maximum": 150,
              "example": 36,
              "x-risk-personal-data-field": "DATE_OF_BIRTH"
            },
            "accompanyingTravelerId": {
              "description": "When flying, if an infant is traveling without a seat, it must be associated to an adult traveler. Id of the adult must be specified in that case",
              "type": "string",
              "pattern": "[a-zA-Z0-9-]{1,20}"
            },
            "accompanyingTravelerTid": {
              "description": "When flying, if an infant is traveling without a seat, it must be associated to an adult traveler. Temporary traveler id, e.g. tid, (if id not known) of the adult must be specified in that case",
              "type": "string",
              "pattern": "[a-zA-Z0-9_]{1,20}"
            }
          }
        }
      ],
      "x-api-ref": "TravelerBase"
    },
    "TravelerCommon": {
      "type": "object",
      "description": "Individual taking part in a journey. Contains basic information to describe an traveler, whether traveler is anonymous or identified",
      "required": [
        "passengerTypeCode"
      ],
      "properties": {
        "passengerTypeCode": {
          "type": "string",
          "description": "traveler type (http://api.dev.amadeus.net/api/Development/common/codelist/PNR_PassengerType.htm)",
          "pattern": "[A-Z0-9]{3}",
          "example": "ADT",
          "x-risk-personal-data-field": "PASSENGER_TYPE"
        }
      },
      "x-api-ref": "TravelerCommon"
    },
    "TravelerIdentifier": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Traveler id, as defined in Traveler dictionary",
          "pattern": "[a-zA-Z0-9-]{1,20}",
          "x-dictionary-name": "traveler",
          "x-field-name": "traveler",
          "x-field-type": "Traveler"
        }
      },
      "x-api-ref": "TravelerIdentifier"
    },
    "TravelerInCartDeleteReply": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "properties": {
            "data": {
              "$ref": "#/definitions/Traveler"
            },
            "meta": {
              "description": "Links to other sub-resources present in the cart and that have been updated or deleted during the delete traveler operation (e.g. air-offer, services)      \n",
              "$ref": "#/definitions/Meta"
            }
          }
        }
      ],
      "x-api-ref": "TravelerInCartDeleteReply"
    },
    "TravelerInCartReply": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/Traveler"
            },
            "meta": {
              "description": "Links to other sub-resources present in the cart and that have been updated during the add or update traveler operation (e.g. air-offer, services)  \n",
              "$ref": "#/definitions/Meta"
            }
          }
        }
      ],
      "x-api-ref": "TravelerInCartReply"
    },
    "TravelerReply": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/Traveler"
            }
          }
        }
      ],
      "x-api-ref": "TravelerReply"
    },
    "TravelersListInCartDeleteReply": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Traveler"
              }
            },
            "meta": {
              "description": "Links to other sub-resources present in the cart and that have been updated or deleted during the delete travelers operation (e.g. air-offer, services) \n",
              "$ref": "#/definitions/Meta"
            }
          }
        }
      ],
      "x-api-ref": "TravelersListInCartDeleteReply"
    },
    "TravelersListInCartReply": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Traveler"
              }
            },
            "meta": {
              "description": "Links to other sub-resources present in the cart and that have been updated during the add or update travelers operation (e.g. air-offer, services)              \n",
              "$ref": "#/definitions/Meta"
            }
          }
        }
      ],
      "x-api-ref": "TravelersListInCartReply"
    },
    "TravelersListReply": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Traveler"
              }
            }
          }
        }
      ],
      "x-api-ref": "TravelersListReply"
    },
    "UnitPrice": {
      "type": "object",
      "description": "Price per traveler expressed using multiple currencies.\ne.g. in case of 2 adults and 1 child, it contains the price for 1 adult and the price for 1 child.\n",
      "properties": {
        "travelerIds": {
          "type": "array",
          "items": {
            "description": "Price is applicable to this traveler or group of travelers.\nIn case of a transaction either cart-free or based on a cart that does not contain travelers, travelers ids are defined in anonymousTraveler dictionary.\nOtherwise travelers ids are defined in cart\n",
            "type": "string"
          }
        },
        "flightIds": {
          "type": "array",
          "items": {
            "description": "Price is applicable to this flight or group of flights. If not provided, the price applies to all flights",
            "type": "string"
          }
        },
        "prices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Price"
          }
        },
        "milesConversion": {
          "description": "Contains information about converted miles and non converted cash when the Award converter or the Miles&Cash slider is used",
          "type": "object",
          "$ref": "#/definitions/MilesConversion"
        },
        "exchangePrices": {
          "description": "Price amounts related to an ATC Shopper change to an Order. Amount values are displayed in the selling currency.",
          "$ref": "#/definitions/ExchangePriceDetails"
        }
      },
      "x-api-ref": "UnitPrice"
    },
    "UnitPriceDifference": {
      "type": "object",
      "description": "Price difference per traveler expressed using multiple currencies.\ne.g. in case of 2 adults and 1 child, it contains the price difference for 1 adult and the price differece for 1 child compared to a base offer/bound\n",
      "properties": {
        "travelerIds": {
          "type": "array",
          "items": {
            "description": "Price difference applicable to this traveler or group of travelers.\nIn case of a transaction either cart-free or based on a cart that does not contain travelers, travelers ids are defined in anonymousTraveler dictionary.\nOtherwise travelers ids are defined in cart\n",
            "type": "string"
          }
        },
        "priceDifferences": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VariationAmount"
          }
        },
        "milesConversionPriceDifference": {
          "description": "Contains price difference information for this traveler or group of travelers about converted miles and non converted cash when the Award converter or the Miles&Cash slider is used",
          "type": "object",
          "$ref": "#/definitions/MilesConversion"
        }
      },
      "x-api-ref": "UnitPriceDifference"
    },
    "UpdateCartRequest": {
      "type": "object",
      "description": "UpdateCartRequest can be used to update an existing Cart with sub-resources such as Travelers, Contacts, Frequent flyer cards, Seats and Services.\nContacts, Frequent flyer cards, Seats and Services can be associated to Travelers using temporary ids, when those sub-resources are manipulated in the same transaction\nAir offers cannot be added, updated nor deleted through this operation\n",
      "allOf": [
        {
          "$ref": "#/definitions/CartRequest"
        },
        {
          "type": "object",
          "properties": {
            "services": {
              "type": "array",
              "description": "List of services",
              "items": {
                "$ref": "#/definitions/UpdateCartServiceItemRequest"
              }
            },
            "seats": {
              "type": "array",
              "description": "List of seats",
              "items": {
                "$ref": "#/definitions/UpdateCartSeatItemRequest"
              }
            },
            "milesRedemptionDetails": {
              "description": "Information to be provided in order to price all the seats and services in miles as well as cash. Provide either a frequent flyer card ID or a frequent flyer card number along with its company code.",
              "$ref": "#/definitions/ServiceMilesRedemptionRequest"
            }
          }
        }
      ],
      "x-api-ref": "UpdateCartRequest"
    },
    "UpdateCartSeatItemRequest": {
      "type": "object",
      "description": "Object used to specify the seat(s) selection that will be part of the add or update request",
      "required": [
        "seatSelections"
      ],
      "properties": {
        "id": {
          "description": "Id of the seat in the Cart",
          "type": "string",
          "pattern": "[a-zA-Z0-9-]{1,20}"
        },
        "tid": {
          "description": "Temporary id that can be used to associate requested and returned seats. It is only valid the time of the transaction",
          "type": "string",
          "pattern": "[a-zA-Z0-9_]{1,20}"
        },
        "flightId": {
          "type": "string",
          "description": "Flight to which the seat selection is associated to"
        },
        "seatSelections": {
          "type": "array",
          "description": "It allows to define the list of seat selections for a group of travelers",
          "items": {
            "$ref": "#/definitions/UpdateCartSeatSelection"
          },
          "minItems": 1
        }
      },
      "x-api-ref": "UpdateCartSeatItemRequest"
    },
    "UpdateCartSeatSelection": {
      "type": "object",
      "description": "Seat selection for a single traveler\nDepending on the use-case, a seat can be associated to:\n- An existing traveler in the Cart using travelerId\n- A traveler being added at the same time using travelerTId\n",
      "required": [
        "seatNumber"
      ],
      "properties": {
        "travelerTId": {
          "type": "string",
          "description": "Temporary id of the traveler associated to the seat. To be used when the traveler is being added to the Cart in the same transaction",
          "pattern": "[a-zA-Z0-9_]{1,20}"
        },
        "seatNumber": {
          "type": "string",
          "description": "Concatenation of the row id and the column id, for example 12B"
        },
        "travelerId": {
          "type": "string",
          "description": "Traveler id associated to the seat",
          "pattern": "[a-zA-Z0-9-]{1,20}"
        }
      },
      "x-api-ref": "UpdateCartSeatSelection"
    },
    "UpdateCartServiceItemRequest": {
      "type": "object",
      "description": "Object used to specify the service item that will be part of the update Cart request\nDepending on the use case, serviceItems can be associated to:\n- Existing travelers in the Cart using travelerIds\n- New travelers being added at the same time using travelerTIds\n",
      "allOf": [
        {
          "$ref": "#/definitions/UpdateServiceItemRequest"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Identifier of a service in the Cart Must be passed when updating an existing service in the Cart"
            },
            "serviceId": {
              "description": "Id of the service selected from the catalogue Must be passed when adding a new service to the Cart",
              "type": "string",
              "x-dictionary-name": "service",
              "x-field-name": "service",
              "x-field-type": "ServiceItem"
            },
            "travelerTId": {
              "type": "string",
              "description": "Temporary id of the traveler which is associated to the service. To be used when the traveler is being added to the Cart in the same transaction",
              "pattern": "[a-zA-Z0-9_]{1,20}"
            }
          }
        }
      ],
      "x-api-ref": "UpdateCartServiceItemRequest"
    },
    "UpdateJourneyElementRequest": {
      "type": "object",
      "description": "Provide the list of changes to be applied on a journey element (traveler on flight)",
      "properties": {
        "exitSeatSuitability": {
          "type": "string",
          "description": "Exit seat suitability. UnableToDetermine suitability will trigger a warning at next touchpoint with an agent in order for him to check the suitability. If suitability is set to notSuitable and the traveler was assigned an exit seat, the Departure Control System will change the seat automatically.\n",
          "enum": [
            "suitable",
            "notSuitable",
            "unableToDetermine"
          ]
        }
      },
      "x-api-ref": "UpdateJourneyElementRequest"
    },
    "UpdateSeatItemRequest": {
      "type": "object",
      "description": "Object used to specify the seat(s) selection that will be part of the add or update request",
      "properties": {
        "tid": {
          "description": "Temporary id that can be used to associate requested and returned seats. It is only valid the time of the transaction",
          "type": "string",
          "pattern": "[a-zA-Z0-9_]{1,20}"
        },
        "flightId": {
          "type": "string",
          "description": "Flight to which the seat selection is associated to",
          "pattern": "[a-zA-Z0-9-]{1,20}"
        },
        "seatSelections": {
          "type": "array",
          "description": "It allows to define the list of seat selections for a group of travelers",
          "items": {
            "$ref": "#/definitions/SeatSelection"
          },
          "minItems": 1
        }
      },
      "x-api-ref": "UpdateSeatItemRequest"
    },
    "UpdateSeatItemsRequest": {
      "type": "object",
      "description": "Object used to specify the seat(s) details part of an update request",
      "allOf": [
        {
          "$ref": "#/definitions/UpdateSeatItemRequest"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Seat id as defined in the Cart or the Order"
            }
          }
        }
      ],
      "x-api-ref": "UpdateSeatItemsRequest"
    },
    "UpdateServiceItemRequest": {
      "type": "object",
      "description": "Object used to specify the service item that will be part of the update services request\nServices can be associated to travelers in the Cart using travelerId\n",
      "allOf": [
        {
          "$ref": "#/definitions/ServiceItemRequestCommon"
        },
        {
          "type": "object",
          "properties": {
            "travelerId": {
              "type": "string",
              "description": "Traveler id to be associated to the service",
              "pattern": "[a-zA-Z0-9-]{1,20}"
            }
          }
        }
      ],
      "x-api-ref": "UpdateServiceItemRequest"
    },
    "UpdateServiceItemsRequest": {
      "type": "object",
      "description": "Object used to specify the service item that will be part of the update services request\nServices can be associated to travelers in the Cart using travelerId\n",
      "allOf": [
        {
          "$ref": "#/definitions/UpdateServiceItemRequest"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Service id as defined in the Cart or the Order",
              "pattern": "[A-Z0-9._-]{1,20}"
            },
            "serviceId": {
              "description": "Id of the service selected from the catalogue Must be passed when adding a new service to the Cart or the order",
              "type": "string",
              "pattern": "[A-Z0-9\\.]+",
              "x-dictionary-name": "service",
              "x-field-name": "service",
              "x-field-type": "ServiceItem"
            }
          }
        }
      ],
      "x-api-ref": "UpdateServiceItemsRequest"
    },
    "UpsellBenefits": {
      "type": "object",
      "description": "Provides differences between a reference offer and the current offer\n",
      "properties": {
        "referenceId": {
          "type": "string",
          "description": "Id of the base offer/bound against which the upsell offer/bound is compared with.\n"
        },
        "fareConditionsDifference": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FareConditionsDifference"
          }
        },
        "priceDifference": {
          "description": "Difference in price Breakup of the offer item. It contains list of totalprices and unitprices which expresses a price difference per single Traveler type.",
          "$ref": "#/definitions/AirPricingRecordsDifference"
        },
        "milesConversionPriceDifference": {
          "description": "Contains price difference information about converted miles and non converted cash when the Award converter or the Miles&Cash slider is used",
          "type": "object",
          "$ref": "#/definitions/MilesConversion"
        },
        "fareBenefitsDifference": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FareBenefitsDifference"
          }
        },
        "freeBaggageAllowanceDifference": {
          "type": "object",
          "$ref": "#/definitions/FreeBaggageAllowanceDifference"
        }
      },
      "x-api-ref": "UpsellBenefits"
    },
    "Url": {
      "type": "object",
      "description": "Object containing URL and description\n",
      "properties": {
        "rel": {
          "type": "string",
          "pattern": "[a-zA-Z0-9/\\+-._]+",
          "description": "Url description, for example 'alternate' if the url specifies alternate form of information like a link to a PDF."
        },
        "href": {
          "type": "string",
          "description": "Url",
          "pattern": "[a-zA-Z0-9-._~%:/?#\\[\\]@!$&\\'()*+,;=]+"
        },
        "mediaType": {
          "type": "string",
          "pattern": "[a-zA-Z0-9/\\+-._]+",
          "description": "Media type of this resource, for example 'application/pdf' See https://www.iana.org/assignments/media-types/media-types.xhtml for reference."
        }
      },
      "x-api-ref": "Url"
    },
    "UserNotificationRequest": {
      "type": "object",
      "description": "The request for a user-notification. It is inhereted from StandaloneNotificationRequest, without orderId and lastName.\n",
      "properties": {
        "emailAddresses": {
          "description": "Email addresses, e.g. test@amadeus.com for which user-notification need to be sent",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-risk-personal-data-field": "EMAIL_ADDRESS"
        },
        "contactIds": {
          "description": "List of contactIds from the order provided in the input, for which the user-notification need to be sent. Contact Ids with type email are considered as valid entry.",
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "[a-zA-Z0-9-]{1,20}"
          }
        },
        "lang": {
          "description": "Code of the preferred language to be used, e.g. en-GB for English-United Kingdom. [For more details](http://www.lingoes.net/en/translator/langcode.htm)",
          "type": "string",
          "pattern": "[a-zA-Z0-9-]{2,5}"
        },
        "layoutId": {
          "description": "Identifier of the layout to be used as a structure for the user-notification.  The layout needs to be defined in the Format And Delivery system.",
          "type": "string",
          "pattern": "[a-zA-Z0-9-_]{1,10}"
        },
        "layoutData": {
          "type": "array",
          "description": "User data that can be used in the email template to customize its content (according to the template defined in Format And Delivery system) ",
          "items": {
            "$ref": "#/definitions/DocumentEnvelope"
          }
        }
      },
      "x-api-ref": "UserNotificationRequest"
    },
    "ValidatePaymentMethods": {
      "type": "object",
      "description": "Summary of the split payment, the remaining amount to pay (not covered by the split payment selection) and the list of available payment methods combinable with the ones selected in splitPaymentMethods. In case no payment was entered in splitPaymentMethods, only the list of all available payment methods will be returned.",
      "properties": {
        "paymentRequests": {
          "type": "array",
          "description": "A list of payment request. Each payment request contains a payment method, and the amount to be paid using that method. For example, to pay using both monetary currency and miles, the payment is split into a partial payment for the miles amount and a second partial payment is used to represent the amount to be paid using Credit card. If you decide to benefit from validation of the amounts, amounts need to be provided for each payment request. There is one case in which the payment request returned will not contain  payment method field: When the flights in the Order are ticketed, but there  are some chargeable seats or services remaining to be paid, and the endpoint  is called to retrieve the list of available payment methods. Then the payment  request will contain the association of the remaining seats and services to be  paid, and the amount.          ",
          "items": {
            "$ref": "#/definitions/ValidatePaymentWithAssociationRequest"
          }
        },
        "remainingAmount": {
          "description": "Remaining amount due to pay",
          "$ref": "#/definitions/Amount"
        },
        "availablePaymentMethods": {
          "type": "array",
          "description": "A list of available payment methods.",
          "items": {
            "$ref": "#/definitions/PaymentMethod"
          }
        },
        "currencyConversionProposals": {
          "type": "array",
          "description": "List of the currency conversion proposals available for the payment requests to be validated.\n",
          "items": {
            "$ref": "#/definitions/PaymentCurrencyConversionProposal"
          }
        },
        "installmentPlanProposals": {
          "description": "List of available installment plans. Only available for PaymentCard.\n",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InstallmentPlanData"
          }
        }
      },
      "x-api-ref": "ValidatePaymentMethods"
    },
    "ValidatePaymentMethodsDictionary": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/DictionaryCommon"
        }
      ],
      "x-api-ref": "ValidatePaymentMethodsDictionary"
    },
    "ValidatePaymentMethodsReply": {
      "description": "Validate payment methods reply structure",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/ValidatePaymentMethods"
            },
            "dictionaries": {
              "$ref": "#/definitions/ValidatePaymentMethodsDictionary"
            }
          }
        }
      ],
      "x-api-ref": "ValidatePaymentMethodsReply"
    },
    "ValidatePaymentMethodsRequest": {
      "type": "object",
      "description": "Request to validate and combine one or several payment methods before proceeding with the payment process.",
      "properties": {
        "orderId": {
          "type": "string",
          "pattern": "[a-zA-Z0-9]{6}",
          "x-risk-personal-data-field": "PNR_RECORD_LOCATOR"
        },
        "orderChangeId": {
          "type": "string",
          "description": "Identifier of the order-change sub-resource of a given order. \nUsed when retrieving the payment methods available for an order under exchange.\n",
          "x-risk-personal-data-field": "PNR_RECORD_LOCATOR"
        },
        "showCurrencyConversionProposals": {
          "type": "boolean",
          "description": "If true, when available for the selected payment method (i.e. PaymentCard, ExternalPayment),\nalternative currency proposals are computed and returned for each payment request.\n"
        },
        "showInstallmentPlanProposals": {
          "type": "boolean",
          "description": "If true, when supported for the selected payment method (PaymentCard),\ninstallment plan alternatives are computed and returned for the full payment of the Order.\nInstallments are only available for full payment of unpaid Orders using one single payment \nrequest and payment method PaymentCard.\n"
        },
        "paymentRequests": {
          "type": "array",
          "description": "A list of payment request. Each payment request contains a payment method, and the amount to be paid using that method. For example, to pay using both monetary currency and miles, the payment is split into a partial payment for the miles amount and a second partial payment is used to represent the amount to be paid using Credit card. If you decide to benefit from validation of the amounts, amounts need to be provided for each payment request.\n",
          "items": {
            "$ref": "#/definitions/PaymentWithAssociationRequest"
          }
        }
      },
      "x-api-ref": "ValidatePaymentMethodsRequest"
    },
    "ValidatePaymentWithAssociationRequest": {
      "type": "object",
      "description": "A validate payment request contains: - the payment method to use for the payment - the amount and currency to be paid using that method - the items to be covered by this payment request\nThe items to be covered by the payment request is optional. Several options are available for the API user: - The API user can provide a specific payment request for seat and services, by providing their ids. - If this is not provided, the payment request will be used to cover any items in the order\nNote that the payment of a specific seat and/or services should cover its full amount i.e. payment of 1 single service with multiple services is not supported.\nSupported payment methods are: MilesPayment, PaymentCard, ExternalPayment or AlternativePaymentMethod.\n",
      "allOf": [
        {
          "$ref": "#/definitions/OptionalPaymentRequest"
        },
        {
          "type": "object",
          "properties": {
            "serviceItemIds": {
              "type": "array",
              "description": "A list of Services to be paid",
              "items": {
                "type": "string"
              }
            },
            "seatItemIds": {
              "type": "array",
              "description": "A list of Seats to be paid",
              "items": {
                "type": "string"
              }
            },
            "currencyConversionProposalIds": {
              "type": "array",
              "description": "ID of the currency conversion Proposal to be used for the payment",
              "items": {
                "type": "string"
              }
            },
            "authorization": {
              "description": "Authorization information to be sent in input for redirection flows",
              "$ref": "#/definitions/PaymentAuthorizationInput"
            },
            "payerIdentification": {
              "description": "Payer data to enable fraud detection",
              "$ref": "#/definitions/PayerIdentification"
            },
            "travelerIds": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "[a-zA-Z0-9-]{1,20}"
              },
              "description": "List of travelers associated to this payment request. To split payment by traveler, the given payment method will be used to pay for all flights, seats and services of the given traveler."
            }
          }
        }
      ],
      "x-api-ref": "ValidatePaymentWithAssociationRequest"
    },
    "VariationAmount": {
      "type": "object",
      "required": [
        "value",
        "currencyCode"
      ],
      "properties": {
        "value": {
          "description": "Amount value expressed as numerical information. The value can be negative to reflect a cheaper price variation.\nThe decimal places are defined at currency level. For example:\n\"EUR 100.85\" will be represented as `10085`, with the currency `decimalPlaces` = 2.\n\"EUR -16.3\" will be represented as `-163`, with the currency `decimalPlaces` = 1.\n",
          "type": "integer",
          "format": "int64"
        },
        "currencyCode": {
          "description": "ISO currency code (http://www.iso.org/iso/home/standards/currency_codes.htm). For miles the code associated is `MIL`.",
          "type": "string",
          "pattern": "[A-Z]{3}",
          "x-dictionary-name": "currency",
          "x-field-name": "currency",
          "x-field-type": "CurrencyDictionaryItem"
        }
      },
      "x-api-ref": "VariationAmount"
    },
    "Vehicle": {
      "type": "object",
      "required": [
        "acrissCode"
      ],
      "properties": {
        "acrissCode": {
          "type": "string",
          "description": "Car ACRISS code",
          "x-dictionary-name": "acriss",
          "x-field-name": "acriss",
          "x-field-type": "CarAcrissCodeDictionaryItem"
        },
        "carModel": {
          "type": "string",
          "description": "Car model, e.g. Polo or similar"
        },
        "frontSeats": {
          "type": "integer",
          "description": "Number of front seats"
        },
        "rearSeats": {
          "type": "integer",
          "description": "Number of back seats"
        },
        "doors": {
          "type": "integer",
          "description": "Number of doors"
        },
        "passengerCapacity": {
          "type": "integer",
          "description": "Number of passengers"
        },
        "smallBaggageCapacity": {
          "description": "Number of small baggages supported",
          "type": "integer"
        },
        "largeBaggageCapacity": {
          "description": "Number of large baggages supported",
          "type": "integer"
        },
        "bootSize": {
          "type": "integer",
          "description": "Boot size in liters"
        },
        "images": {
          "type": "array",
          "description": "This field is present in the carOffers output if multimedia images are available for the rate and when requested in the input by using the parameter 'vehicleImageSizes'",
          "items": {
            "$ref": "#/definitions/Image"
          }
        }
      },
      "x-api-ref": "Vehicle"
    },
    "ViewMetrics": {
      "description": "View Metrics show the information of watchers, like number of people looking at an Origin/Destination or specific flights \n",
      "type": "object",
      "properties": {
        "currentWatchers": {
          "description": "Number of people looking depending on Origin-Destination/Date or Flight/Date",
          "type": "integer"
        }
      },
      "x-api-ref": "ViewMetrics"
    },
    "Voucher": {
      "type": "object",
      "description": "Voucher collecting money from one or more travellers to be used to buy a trip",
      "allOf": [
        {
          "$ref": "#/definitions/ItemCommon"
        },
        {
          "type": "object",
          "required": [
            "status",
            "category",
            "value"
          ],
          "properties": {
            "airlineCode": {
              "description": "The airline issuing the voucher",
              "type": "string",
              "pattern": "[A-Z0-9]{2,3}",
              "example": "6X",
              "x-dictionary-name": "airline",
              "x-field-name": "airline",
              "x-field-type": "string"
            },
            "status": {
              "description": "Actual status of the voucher",
              "type": "string",
              "enum": [
                "Active",
                "Used",
                "Cancelled",
                "Expired"
              ],
              "default": "Active",
              "example": "Active/Used/Cancelled/Expired"
            },
            "category": {
              "description": "The category under which the voucher is applying",
              "type": "string",
              "example": "Summer"
            },
            "subCategory": {
              "description": "A more detailed description on the category of the voucher",
              "type": "string",
              "example": "2018 Promo"
            },
            "value": {
              "description": "Value of the voucher",
              "$ref": "#/definitions/VoucherValue"
            },
            "restrictions": {
              "description": "Restrictions about the order that can be paid by the voucher. \nNot applicable with Qwikcilver vouchers.",
              "$ref": "#/definitions/VoucherRestrictions"
            },
            "usageConditions": {
              "description": "Usage conditions of the voucher.\nApplicable to Qwikcilver vouchers.",
              "$ref": "#/definitions/VoucherConditionsOfUse"
            }
          }
        }
      ],
      "x-api-ref": "Voucher"
    },
    "VoucherConditionsOfUse": {
      "description": "Elements defining the usage conditions of the Voucher.\nApplicable to Qwikcilver vouchers.",
      "type": "object",
      "properties": {
        "periods": {
          "description": "Periods where the voucher can or cannot be redeemed. The timezone is expressed in GMT if no override has been  done by the airline on the Voucher management system.\nIts usage can be restricted on some exceptional dates. As of now, only 'excludedPeriods' can be returned.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Period"
          }
        },
        "consumer": {
          "description": "Details of the consumer eligible to consume the voucher. When the consumer is not provided, the voucher can be used by any  traveler (knowing the voucherId and verificationCode).\nAs of now, the only possible fields returned are firstName and lastName.",
          "$ref": "#/definitions/VoucherConsumer"
        },
        "areTaxesExcluded": {
          "description": "If true, the voucher cannot cover taxes (flights and services).",
          "type": "boolean"
        },
        "isMultiUse": {
          "description": "If true, the voucher can be redeemed multiple times (multiple partial redeem).",
          "type": "boolean"
        },
        "isExclusive": {
          "description": "If true, the voucher can be redeemed along with another voucher. e.g. Payment of a pre-order with 2 vouchers.",
          "type": "boolean"
        }
      },
      "x-api-ref": "VoucherConditionsOfUse"
    },
    "VoucherConsumer": {
      "type": "object",
      "description": "Information about the consumer owning the voucher.",
      "allOf": [
        {
          "type": "object",
          "properties": {
            "names": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Name"
              }
            }
          }
        }
      ],
      "x-api-ref": "VoucherConsumer"
    },
    "VoucherDictionary": {
      "type": "object",
      "properties": {
        "airline": {
          "type": "object",
          "description": "Airlines map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html)",
          "additionalProperties": {
            "type": "string"
          }
        },
        "currency": {
          "type": "object",
          "description": "Currencies map. For more details please see [Maps in dictionary documentation](https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html)",
          "additionalProperties": {
            "$ref": "#/definitions/CurrencyDictionaryItem"
          }
        }
      },
      "x-api-ref": "VoucherDictionary"
    },
    "VoucherPayment": {
      "type": "object",
      "description": "Voucher to use for the payment. In case, the voucher is associated with a verification code, it should be provided.",
      "allOf": [
        {
          "$ref": "#/definitions/PaymentMethod"
        },
        {
          "type": "object",
          "properties": {
            "verificationCode": {
              "description": "Verification code needed to use/retrieve the voucher. This field is needed only when a payment with the voucher is needed, it is not returned in any output.",
              "type": "string",
              "format": "[0-9]{6}"
            },
            "type": {
              "description": "Voucher type",
              "type": "string",
              "minimum": 0,
              "enum": [
                "Voucher",
                "Wallet"
              ]
            }
          }
        }
      ],
      "x-api-ref": "VoucherPayment"
    },
    "VoucherRestrictions": {
      "description": "Set of elements that holds the information pertaining to the restrictions of the voucher.\n      \nNot applicable with Qwikcilver vouchers.",
      "type": "object",
      "properties": {
        "orderId": {
          "description": "The voucher usage is restricted to this orderId",
          "type": "string",
          "pattern": "[a-zA-Z0-9]{6}",
          "x-risk-personal-data-field": "PNR_RECORD_LOCATOR"
        },
        "groupId": {
          "description": "The voucher usage is restricted to this groupId",
          "type": "string",
          "pattern": "[a-zA-Z0-9-_]+",
          "x-risk-personal-data-field": "GROUP_NAME"
        }
      },
      "x-api-ref": "VoucherRestrictions"
    },
    "VoucherRetrieveRequest": {
      "type": "object",
      "description": "Object used to specify the information needed to retrieve a voucher.\n",
      "properties": {
        "verificationCode": {
          "type": "string",
          "format": "[0-9]{6}",
          "description": "A code associated to the voucher (if provided at creation time). Without a verificationCode, the voucher is accessible to anyone who has its id."
        },
        "email": {
          "type": "string",
          "minimum": 0,
          "description": "Owner's email, used to retreive the asset "
        },
        "currency": {
          "type": "string",
          "pattern": "[A-Z]{3}",
          "minimum": 0,
          "description": "Target currency for asset"
        },
        "type": {
          "type": "string",
          "minimum": 0,
          "description": "Voucher type, if not sent, Voucher is the default type",
          "enum": [
            "Voucher",
            "Wallet"
          ]
        }
      },
      "x-api-ref": "VoucherRetrieveRequest"
    },
    "VoucherValue": {
      "description": "All possible value indicating the monetary details over the Voucher",
      "type": "object",
      "required": [
        "availableAmount"
      ],
      "properties": {
        "availableAmount": {
          "description": "Represents the monetary amount currently available in the voucher",
          "$ref": "#/definitions/Amount"
        }
      },
      "x-api-ref": "VoucherValue"
    },
    "WarningMessage": {
      "type": "object",
      "required": [
        "title"
      ],
      "properties": {
        "code": {
          "description": "An application-specific error code",
          "type": "string"
        },
        "title": {
          "description": "A short summary of the error",
          "type": "string"
        },
        "detail": {
          "description": "Explanation of the error",
          "type": "string"
        },
        "source": {
          "$ref": "#/definitions/Source"
        }
      },
      "x-api-ref": "WarningMessage"
    },
    "WifiAmenity": {
      "type": "object",
      "description": "Details of Wifi Amenity\n",
      "properties": {
        "wifiCoverage": {
          "description": "Type of wife coverage. NONE indicates it is not available for the specific cabin.\n",
          "type": "string",
          "enum": [
            "FULL",
            "GSM_DATA_ROAMING_ONLY",
            "PARTIAL",
            "NONE"
          ]
        },
        "isChargeable": {
          "description": "Defines if the wife amenity is chargeable",
          "type": "boolean"
        }
      },
      "x-api-ref": "WifiAmenity"
    },
    "AirRoutingFlightSegmentCommon": {
      "type": "object",
      "required": [
        "departureLocationCode",
        "arrivalLocationCode"
      ],
      "description": "Departure and arrival information.",
      "properties": {
        "departureLocationCode": {
          "description": "Airport or city code",
          "type": "string",
          "pattern": "[a-zA-Z]{3}"
        },
        "arrivalLocationCode": {
          "description": "Airport or city code",
          "type": "string",
          "pattern": "[a-zA-Z]{3}"
        }
      },
      "x-api-ref": "AirRoutingFlightSegmentCommon"
    },
    "AirRoutingRequest": {
      "type": "object",
      "description": "Request to calculate the point to point mileage for a list of itineraries.",
      "required": [
        "flights"
      ],
      "properties": {
        "tid": {
          "description": "Temporary id that can be used to associate requested and returned itinerary. Valid only for the time of the transaction. This field is optional when it is not sent for any itinerary. In case one itineray contains  'tid' field, then all other itineraries must be also sent. No duplicated 'tid' are allowed.",
          "type": "string",
          "pattern": "[0-9]{1,20}"
        },
        "departureDate": {
          "type": "string",
          "description": "Departure date of the outbound (first departure flight) in ISO 8601 [https://www.w3.org/TR/NOTE-datetime.html]. It specifies date of the search (eg. 2017-11-10). This field is optional. In case it is not sent, the system date will be used by default for the search.\n",
          "format": "date"
        },
        "flights": {
          "type": "array",
          "minItems": 1,
          "maxItems": 28,
          "description": "List of flights on the itinerary. The number of flights per itinerary is limited to 28. Due to a technical limitation, in the presence of open-jaw segments in the itinerary, the maximum number of input fligts will be reduced in the  number of open-jaw segments. An example of open-jaw itinerary would be TYO - LON, PAR - MAD. In this example, first flight lands in London, and next flight departs from Paris. The distance from LON to PAR was not done by flight.\n",
          "items": {
            "$ref": "#/definitions/AirRoutingFlightSegmentCommon"
          }
        }
      },
      "x-api-ref": "AirRoutingRequest"
    },
    "ArrivalDepartureDistance": {
      "type": "object",
      "required": [
        "unit",
        "value"
      ],
      "description": "ArrivalDepartureDistance will return the iata ticketed point mileage distance in miles for an air segment.\n",
      "properties": {
        "unit": {
          "type": "string",
          "enum": [
            "miles"
          ],
          "description": "Distance unit: miles"
        },
        "value": {
          "type": "integer",
          "description": "Value of the distance"
        }
      },
      "x-api-ref": "ArrivalDepartureDistance"
    },
    "AuthenticationChallenge": {
      "type": "object",
      "description": "Authentication challenge model",
      "properties": {
        "challengeId": {
          "description": "Challenge id is associated to current Authentication challenge. It is sent along with Authentication challenge code for validation.",
          "type": "string",
          "pattern": "[a-zA-Z0-9_]{1,50}"
        }
      },
      "x-api-ref": "AuthenticationChallenge"
    },
    "AuthenticationChallengeInitialisationReply": {
      "type": "object",
      "description": "Reply from Authentication challenge initialisation\n",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/AuthenticationChallengeResponse"
            },
            "dictionaries": {
              "type": "object"
            }
          }
        }
      ],
      "x-api-ref": "AuthenticationChallengeInitialisationReply"
    },
    "AuthenticationChallengeInitialisationRequest": {
      "type": "object",
      "description": "Input to initiate Authentication challenge for an order",
      "properties": {
        "lastName": {
          "description": "Last name of one traveler part of the order",
          "type": "string",
          "pattern": "^[A-Za-z\\u00C0-\\u1FFF\\u3040-\\uD7AF][A-Za-z\\u00C0-\\u1FFF\\u3040-\\uD7AF\\u2019 \\-.]{0,69}$",
          "x-risk-personal-data-field": "PASSENGER_NAME"
        },
        "firstName": {
          "description": "First name of one traveler part of the order",
          "type": "string",
          "pattern": "^[A-Za-z\\u00C0-\\u1FFF\\u3040-\\uD7AF][A-Za-z\\u00C0-\\u1FFF\\u3040-\\uD7AF\\u2019 \\-.]{0,69}$",
          "x-risk-personal-data-field": "PASSENGER_NAME"
        },
        "notificationContactId": {
          "description": "Notification contact id that can be used to send Authentication challenge",
          "type": "string",
          "pattern": "[a-zA-Z0-9_]{1,20}"
        }
      },
      "x-api-ref": "AuthenticationChallengeInitialisationRequest"
    },
    "AuthenticationChallengeResponse": {
      "type": "object",
      "description": "Authentication challenge response model",
      "properties": {
        "authenticationChallenge": {
          "$ref": "#/definitions/AuthenticationChallenge"
        },
        "contacts": {
          "type": "array",
          "description": "Either the notification contact to which the Authentication challenge is initiated. Or the list of notification contacts from which one need's to be selected.",
          "items": {
            "$ref": "#/definitions/Contact"
          }
        }
      },
      "x-api-ref": "AuthenticationChallengeResponse"
    },
    "AuthenticationChallengeValidationRequest": {
      "type": "object",
      "description": "Input to validate Authentication challenge for an order",
      "properties": {
        "oneTimePassword": {
          "description": "One time password is associated to current Authentication challenge.",
          "type": "string",
          "pattern": "[a-zA-Z0-9_]{1,20}"
        }
      },
      "x-api-ref": "AuthenticationChallengeValidationRequest"
    },
    "ExternalPayment": {
      "type": "object",
      "description": "Payment to be performed on a third party Payment Service Provider (PSP), that the airline has a contract with.\nThe Payment Service Provider (PSP) handles in this case the payment as well as the payment capture, which generates an external payment reference.\nDerived from PaymentMethod object by polymorphism.\nDEPRECATED: Please use `CustomPayment`\n",
      "allOf": [
        {
          "$ref": "#/definitions/PaymentMethod"
        },
        {
          "type": "object",
          "properties": {
            "externalPaymentRecordId": {
              "description": "Payment reference generated by the external Payment Service Provider (PSP), which is used as a proof of payment for the PSP.",
              "type": "string",
              "pattern": "[A-Z0-9\\*\\/-_]{1,50}"
            },
            "checksum": {
              "description": "Contains the checksum value.\nGiven that the payment is performed on an external system, the system requires indeed to check that the payment request can be trusted and is originated from the API user.\nThis prevents any malicious third party from sending invalid payment confirmation for the order and also prevents request tampering.\n",
              "type": "string"
            },
            "checksumData": {
              "readOnly": true,
              "$ref": "#/definitions/ChecksumData"
            }
          }
        }
      ],
      "x-api-ref": "ExternalPayment"
    },
    "FrequentFlyerCustomerProfile": {
      "description": "Profile customer information corresponding to the frequent flyer card number provided in request.",
      "type": "object",
      "properties": {
        "frequentFlyerCard": {
          "$ref": "#/definitions/FrequentFlyerProfile"
        },
        "names": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Name"
          }
        },
        "dateOfBirth": {
          "description": "Date of birth (date in ISO 8601: http://www.w3.org/TR/NOTE-datetime)",
          "type": "string",
          "format": "date",
          "example": "2002-07-25",
          "x-risk-personal-data-field": "DATE_OF_BIRTH"
        },
        "gender": {
          "description": "Gender",
          "type": "string",
          "enum": [
            "male",
            "female",
            "unknown"
          ]
        }
      },
      "x-api-ref": "FrequentFlyerCustomerProfile"
    },
    "FrequentFlyerProfile": {
      "description": "Frequent flyer information of the frequent flyer card number provided in the request",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/FrequentFlyer"
        },
        {
          "type": "object",
          "properties": {
            "allianceTierLevel": {
              "description": "Frequent flyer card alliance tier level description",
              "type": "string",
              "pattern": "[a-zA-Z0-9]{1,70}",
              "x-risk-personal-data-field": "FREQUENT_FLYER_NUMBER"
            }
          }
        }
      ],
      "x-api-ref": "FrequentFlyerProfile"
    },
    "FrequentFlyerProfileAirlinePreferences": {
      "description": "Airline Preferences present in the frequent flyer profile",
      "type": "object",
      "properties": {
        "specialKeywords": {
          "type": "array",
          "description": "Special Keyword information (SK)",
          "items": {
            "$ref": "#/definitions/SpecialKeyword"
          }
        }
      },
      "x-api-ref": "FrequentFlyerProfileAirlinePreferences"
    },
    "FrequentFlyerProfileInformation": {
      "description": "Profile information corresponding to the frequent flyer card number provided in request.",
      "type": "object",
      "properties": {
        "frequentFlyerProfileId": {
          "description": "Id of the profile",
          "type": "string",
          "pattern": "[a-zA-Z0-9]{1,30}",
          "example": "6X992003172079000",
          "x-risk-personal-data-field": "FREQUENT_FLYER_NUMBER"
        },
        "customer": {
          "description": "Customer information present in the frequent flyer profile.",
          "$ref": "#/definitions/FrequentFlyerCustomerProfile"
        },
        "preferences": {
          "description": "Preferences information available in the frequent flyer profile",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FrequentFlyerProfilePreferences"
          }
        }
      },
      "x-api-ref": "FrequentFlyerProfileInformation"
    },
    "FrequentFlyerProfileInformationReply": {
      "description": "Profile information data reply structure",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "type": "array",
              "description": "Profile Information corresponding to the frequent flyer card number provided in the request",
              "items": {
                "$ref": "#/definitions/FrequentFlyerProfileInformation"
              }
            }
          }
        }
      ],
      "x-api-ref": "FrequentFlyerProfileInformationReply"
    },
    "FrequentFlyerProfilePreferences": {
      "description": "Profile Preferences corresponding to the frequent flyer card number provided in request.",
      "type": "object",
      "properties": {
        "airlinePreferences": {
          "type": "array",
          "description": "Airline Preferences present in the frequent flyer profile",
          "items": {
            "$ref": "#/definitions/FrequentFlyerProfileAirlinePreferences"
          }
        }
      },
      "x-api-ref": "FrequentFlyerProfilePreferences"
    },
    "HotelCancelAndRefundRequest": {
      "type": "object",
      "required": [
        "hotelIds"
      ],
      "properties": {
        "hotelIds": {
          "type": "array",
          "description": "Identifier of the hotel items. This information is available as part of the response associated to the end points POST /orders/{orderId}/hotels and GET /orders/{orderId}/hotels",
          "items": {
            "type": "string",
            "pattern": "^(ST|TSM)[0-9]{1,3}$"
          }
        }
      },
      "x-api-ref": "HotelCancelAndRefundRequest"
    },
    "HotelItem": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/HotelOfferCommon"
        },
        {
          "type": "object",
          "required": [
            "id",
            "confirmationNumber",
            "statusCode"
          ],
          "properties": {
            "id": {
              "type": "string",
              "description": "Id to be used for the interaction with order"
            },
            "confirmationNumber": {
              "type": "string",
              "description": "Confirmation number related to the hotel booking",
              "x-risk-personal-data-field": "HOTEL_CONFIRMATION_NUMBER"
            },
            "statusCode": {
              "type": "string",
              "description": "Operational status. HK = confirmed, HL = waitlist, TK = schedule change confirmed, schedule change waitlist, UN = unable to confirm not operating, UC = unable to confirm, HX = have cancelled, NO = no action taken.",
              "x-dictionary-name": "bookingStatus",
              "x-field-name": "status",
              "x-field-type": "BookingStatusDictionaryItem"
            },
            "remark": {
              "type": "string",
              "description": "remark sent to Hotel",
              "x-risk-personal-data-field": "REMARKS"
            },
            "frequentFlyer": {
              "description": "Frequent flyer card on which the miles were credited after hotel booking. If no miles accrual has taken place then this field will not be returned.",
              "$ref": "#/definitions/FrequentFlyer"
            },
            "travelerIds": {
              "type": "array",
              "items": {
                "description": "Travelers associated to the selected HotelOffer",
                "type": "string"
              }
            }
          }
        }
      ],
      "x-api-ref": "HotelItem"
    },
    "HotelItemRequest": {
      "description": "HotelItemRequest is made of an HotelOfferId and an optional list of associated travelers. So far only 1 traveler association is supported, thus only 1 traveler id can be provided. If no traveler Id is specified, first traveler is used\n",
      "allOf": [
        {
          "$ref": "#/definitions/HotelOffersSelectionRequest"
        },
        {
          "type": "object",
          "properties": {
            "remark": {
              "type": "string",
              "description": "Remark to be sent to the Hotel provider",
              "x-risk-personal-data-field": "REMARKS"
            },
            "frequentFlyer": {
              "description": "Frequent flyer card to be used for miles accrual upon hotel booking",
              "$ref": "#/definitions/FrequentFlyer"
            },
            "taxIdentificationNumbers": {
              "description": "Tax identification numbers",
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaxIdentificationNumber"
              }
            }
          }
        }
      ],
      "x-api-ref": "HotelItemRequest"
    },
    "HotelItemsListReply": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "description": "List of Hotel reservations",
              "items": {
                "$ref": "#/definitions/HotelItem"
              }
            },
            "dictionaries": {
              "$ref": "#/definitions/HotelOrderDictionary"
            }
          }
        }
      ],
      "x-api-ref": "HotelItemsListReply"
    },
    "HotelOrderDictionary": {
      "allOf": [
        {
          "$ref": "#/definitions/HotelDictionary"
        },
        {
          "type": "object",
          "properties": {
            "bookingStatus": {
              "type": "object",
              "description": "Status map for hotels. For more details please see [Maps in dictionary documentation] (https://dxapi.digitalforairlines.com/swagger-ui/display/documentation.html#/Maps/get_)",
              "additionalProperties": {
                "$ref": "#/definitions/BookingStatusDictionaryItem"
              }
            }
          }
        }
      ],
      "x-api-ref": "HotelOrderDictionary"
    },
    "IataTicketedPointMileageFlightSegment": {
      "type": "object",
      "description": "Iata ticketed point mileage distance computation for a specific segment.",
      "allOf": [
        {
          "$ref": "#/definitions/AirRoutingFlightSegmentCommon"
        },
        {
          "type": "object",
          "properties": {
            "arrivalDepartureDistance": {
              "$ref": "#/definitions/ArrivalDepartureDistance"
            }
          }
        }
      ],
      "x-api-ref": "IataTicketedPointMileageFlightSegment"
    },
    "IataTicketedPointMileageItem": {
      "type": "object",
      "description": "Request to calculate the point to point mileage for a list of itineraries.",
      "required": [
        "flights"
      ],
      "properties": {
        "tid": {
          "description": "Temporary id that can be used to associate requested and returned itinerary. Valid only for the time of the transaction",
          "type": "string",
          "pattern": "[0-9]{1,20}"
        },
        "flights": {
          "type": "array",
          "minItems": 1,
          "maxItems": 28,
          "description": "List of flights on the itinerary with Ticketed point mileage per segment.\n",
          "items": {
            "$ref": "#/definitions/IataTicketedPointMileageFlightSegment"
          }
        }
      },
      "x-api-ref": "IataTicketedPointMileageItem"
    },
    "IataTicketedPointMileageListReply": {
      "type": "object",
      "description": "Reply containing a list of iata ticketed point mileage distance for one or several itineraries",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/IataTicketedPointMileageItem"
              }
            },
            "dictionaries": {
              "$ref": "#/definitions/CountryDictionary"
            }
          }
        }
      ],
      "x-api-ref": "IataTicketedPointMileageListReply"
    },
    "ManualPriceAmount": {
      "type": "object",
      "description": "Amount expressed as value and currency code.",
      "properties": {
        "value": {
          "description": "Amount value expressed as numerical information. The decimal places are defined at currency level. e.g. \"EUR 100.85\" will be represented as `10085`, with the currency `decimalPlaces` = 2.\n",
          "type": "integer",
          "format": "int64",
          "minimum": 0
        },
        "decimalPlaces": {
          "description": "decimal places corresponding to the ISO currency code.",
          "type": "integer",
          "minimum": 0,
          "maximum": 3
        },
        "currencyCode": {
          "description": "ISO currency [code](http://www.iso.org/iso/home/standards/currency_codes.htm). Currency must be provided or may be auto selected from context for processing the input as per above standard. Example: the numerical amount `1955` associated to the `EUR` currency code (`decimalPlaces: 2`) corresponds to: `19,55 Euro`. For points (or miles) the code associated is `MIL`, for compensation/upgrade credits `ECR`. It can be either the currency corresponding to office or of associated TST",
          "type": "string",
          "pattern": "[A-Z]{3}"
        }
      },
      "x-api-ref": "ManualPriceAmount"
    },
    "ManualPriceFareCalculation": {
      "type": "object",
      "description": "Manual input of Fare calculation as per allowed format",
      "properties": {
        "text": {
          "type": "string",
          "description": "Free text to provide Fare calculation line. example - FC DEN WN CUN510.00WN DEN510.00USD1020.00ENDPD XF DEN4.5",
          "pattern": ".{1,199}"
        }
      },
      "x-api-ref": "ManualPriceFareCalculation"
    },
    "ManualPriceMultiCurrency": {
      "type": "object",
      "description": "Price breakdowns expressed with amounts using a specific currency",
      "required": [
        "basePrice"
      ],
      "properties": {
        "basePrice": {
          "description": "Base price of the manual service requested",
          "$ref": "#/definitions/ManualPriceAmount"
        },
        "taxes": {
          "description": "Taxes breakdown for each category",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ManualPriceTax"
          }
        },
        "additionalFee": {
          "description": "Additional fees for the service",
          "$ref": "#/definitions/ManualPriceAmount"
        }
      },
      "x-api-ref": "ManualPriceMultiCurrency"
    },
    "ManualPriceTax": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ManualPriceAmount"
        },
        {
          "type": "object",
          "properties": {
            "code": {
              "description": "Tax code",
              "type": "string",
              "pattern": "[A-Z0-9]{1,4}"
            },
            "category": {
              "description": "In the context of a reissue, flag indicating if the tax is related to the first issue (old) or the reissue (new or refundable).\n",
              "type": "string",
              "enum": [
                "TAXNEW"
              ]
            },
            "percentage": {
              "type": "integer",
              "format": "int64",
              "description": "Percentage rate based on which the tax is calculated."
            }
          }
        }
      ],
      "x-api-ref": "ManualPriceTax"
    },
    "ManualServiceQuotationRecord": {
      "type": "object",
      "description": "Inputs corresponding to pricing quotation record for manually priced service",
      "properties": {
        "manualPrice": {
          "description": "price corresponding to each pricing record",
          "$ref": "#/definitions/ManualPriceMultiCurrency"
        },
        "fareCalculation": {
          "description": "Fare calculation in text",
          "$ref": "#/definitions/ManualPriceFareCalculation"
        },
        "internationaIndicator": {
          "type": "string",
          "description": "different possible values of international indicator",
          "enum": [
            "DOMESTIC",
            "INTERNATIONAL"
          ]
        },
        "vatCountryCode": {
          "type": "string",
          "description": "VAT country code as per ISO 3166 Alpha 2 code",
          "pattern": "[A-Z]{2}"
        },
        "endorsement": {
          "type": "string",
          "description": "Free-flow text of max 150 caharacters for the endorsement corresponding to manual service and traverlerId in the order. This is optional if allowed by the airline on their reservation system.",
          "pattern": ".{1,150}"
        },
        "tsmFlags": {
          "type": "array",
          "description": "A list of flags associated to pricing record. Maximum 2 flags are allowed.",
          "items": {
            "type": "string",
            "enum": [
              "CHANGE",
              "CONFIDENTIAL"
            ]
          }
        }
      },
      "x-api-ref": "ManualServiceQuotationRecord"
    },
    "PaymentReferenceId": {
      "type": "object",
      "description": "A Payment Reference Identifier represents a previous payment authorization and is used to reference it. Amount, currency, approval code, status... are embedded behind it.\n",
      "required": [
        "paymentReferenceId"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/PaymentMethod"
        },
        {
          "type": "object",
          "properties": {
            "paymentReferenceId": {
              "description": "Payment reference Id (PRI), returned by a payment transaction performed with Payment Page.\n",
              "type": "string",
              "pattern": "[a-zA-Z0-9]{1,14}",
              "x-risk-personal-data-field": "AMADEUS_IDENTIFIER"
            }
          }
        }
      ],
      "x-api-ref": "PaymentReferenceId"
    },
    "PostManualServiceRequest": {
      "type": "object",
      "description": "Manually priced chargeable Special Service Request (SSR) for an order",
      "required": [
        "code"
      ],
      "properties": {
        "tid": {
          "description": "Temporary id that can be used to associate requested and returned service requests. Valid only for the time of the transaction",
          "type": "string",
          "pattern": "[a-zA-Z0-9_]{1,20}"
        },
        "code": {
          "type": "string",
          "description": "Code of the Special Service Request",
          "pattern": "[A-Z]{4}"
        },
        "airlineCode": {
          "type": "string",
          "description": "Two letter airline code defined for the Special Service Request (SSR) message. IATA airline code (http://www.iata.org/publications/Pages/code-search.aspx). Airline on which the Special Service Request applies. If not specified, the Special Service Request applies to all flights.",
          "pattern": "[A-Z0-9]{2}[A-Z]*"
        },
        "statusCode": {
          "type": "string",
          "description": "Operational status. HK = confirmed, HL = waitlist, TK = schedule change confirmed, schedule change waitlist, UN = unable to confirm not operating, UC = unable to confirm, HX = have cancelled, NO = no action taken. Status code is not returned at shopping time. For the Special Service Request creation, the status HK, SS and NN are supported.",
          "pattern": "[A-Z]{2}",
          "x-dictionary-name": "bookingStatus",
          "x-field-name": "status",
          "x-field-type": "BookingStatusDictionaryItem"
        },
        "quantity": {
          "type": "integer",
          "description": "Desired quantity of the Special Service Request (also called Number In Party)",
          "pattern": "[1-9][0-9]?"
        },
        "freetext": {
          "type": "string",
          "description": "Free-flow text for the Special Service Request in the order (optional if allowed by the airline on their reservation system)",
          "pattern": ".{1,105}"
        },
        "flightIds": {
          "type": "array",
          "description": "A list of flights associated to this generic service. If not specified, the generic service applies to all flights",
          "items": {
            "type": "string",
            "pattern": "[a-zA-Z0-9-]{1,20}"
          }
        },
        "travelerId": {
          "type": "string",
          "description": "One traveler id associated to this generic service"
        },
        "manualQuotation": {
          "description": "Manually created quotation record corresponding to the requested service",
          "$ref": "#/definitions/ManualServiceQuotationRecord"
        }
      },
      "x-api-ref": "PostManualServiceRequest"
    },
    "PostOrderHotelRequest": {
      "description": "PostOrderHotelRequest is made of a list of hotelOffers to book and a list of paymentRequests.\nLimitations: - So far only 1 paymentRequest should be provided for all requested hotelOffers. - So far only Credit Card is supported.\n",
      "type": "object",
      "required": [
        "hotelOfferRequests"
      ],
      "properties": {
        "hotelOfferRequests": {
          "type": "array",
          "description": "List of Hotel offer selections used to convey the offer chosen at Shopping time and the associated details (traveler, frequent flyer, etc.)",
          "items": {
            "$ref": "#/definitions/HotelItemRequest"
          },
          "minItems": 1
        },
        "paymentRequests": {
          "type": "array",
          "description": "A list of payment request",
          "items": {
            "$ref": "#/definitions/PaymentWithAssociationRequest"
          },
          "maxItems": 1
        }
      },
      "x-api-ref": "PostOrderHotelRequest"
    },
    "QueuePlacementDetail": {
      "description": "Queue details to place an order into queue",
      "type": "object",
      "required": [
        "office",
        "queueNumber"
      ],
      "properties": {
        "office": {
          "description": "The office id where order will be placed",
          "type": "string",
          "pattern": "[A-Z0-9*]{9}",
          "example": "NCE1A08AA"
        },
        "queueNumber": {
          "description": "The queue number",
          "type": "integer",
          "minimum": 0,
          "maximum": 99,
          "example": 9
        },
        "queueCategory": {
          "description": "The queue category. If not specified the default queue category will be used.  Default category configured by the airline on Amadeus core side.",
          "type": "integer",
          "minimum": 0,
          "maximum": 999,
          "example": 10
        },
        "dateTime": {
          "description": "When date is specified, order will be placed in a delay queue.  The order will get placed in a queue on given the date. The Date is considered based on office local date. Time inputs are not used.  Office local date and time with the following format \\\"yyyy-MM-dd\\\" or \\\"yyyy-MM-dd'T'HH:mm:ss\\\". Timezone information should not be inputted.",
          "type": "string",
          "format": "date-time",
          "example": "2020-02-10 or 2020-02-10T00:00:00"
        }
      },
      "x-api-ref": "QueuePlacementDetail"
    },
    "QueuePlacementReply": {
      "type": "object",
      "description": "Reply containing the information of place an order into queue",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object"
        }
      ],
      "x-api-ref": "QueuePlacementReply"
    },
    "TicketingArrangement": {
      "type": "object",
      "description": "Ticketing arrangement information\n",
      "allOf": [
        {
          "$ref": "#/definitions/ItemCommon"
        },
        {
          "type": "object",
          "required": [
            "action"
          ],
          "properties": {
            "action": {
              "description": "Indicates the status of the ticket issuance of the order/PNR and the action automatically taken by the system once the time limit reached (in parantheses the corresponding Amadeus action codes are indicated):\nnone: Tickets have been issued. No queue placement (OK) cancelItinerary: Automatic cancellation of the order itinerary based on the specified timeLimit (XL) queue: Request ticket issuance until the specified timeLimit. Automatic queue placement to queue 8, category 1 or, if specified, to the queue specified by the options queueNumber and queueCategory (TL) queueIfInternationalItinerary: Indicates an itinerary where the flights are not all within the same country (international flights). Automatic queue placement to queue 8, category 5 (IN) queueIfDomesticItinerary: Indicates an itinerary in which all flights are within the same (home) country (domestic flights). Automatic queue placement to queue 8, category 3 (DO) queueIfRevalidationRequired: Indicates that a previously issued ticket must be reissued/revalidated. Automatic queue placement to queue 8, category 2 (TR) queueIfTicketMailed: Ticket mailed to the passenger. Automatic queue placement to queue 8, category 7 (MA) queueIfPrepaidTicket: Prepaid ticket. Automatic queue placement to queue 8, category 1 (PT) queueIfAirportTicketing: Order to be ticketed at an airport ticket office. Automatic queue placement to queue 8, category 9 (AT) queueIfSatelliteTicketing: Order to be ticketed at a satellite ticketing location. Automatic queue placement to queue 8, category 12 (ST) selfServiceTicketing: The ticket is going to be issued using a self-service ticketing device (SS)",
              "enum": [
                "none",
                "cancelItinerary",
                "queue",
                "queueIfInternationalItinerary",
                "queueIfDomesticItinerary",
                "queueIfRevalidationRequired",
                "queueIfTicketsMailed",
                "queueIfPrepaidTicket",
                "queueIfAirportTicketing",
                "queueIfSatelliteTicketing",
                "selfServiceTicketing"
              ],
              "type": "string"
            },
            "timeLimit": {
              "description": "The ticketing arrangement time limit. If used as request parameter: - The time timit can be specified in any timezone. - Either only the date or date and time can be specified. - Mandatory only for the action \"automaticCancellation\". - If neither date nor date and time is specified and if this option isn't mandatory neither, the current day at zero o'clock is assumed. If returned in a response, the time limit is in office local time (including the office's timezone)",
              "type": "string",
              "format": "date-time",
              "example": "2020-02-10T20:40:00Z"
            },
            "office": {
              "description": "The ticketing arrangement office id",
              "type": "string",
              "pattern": "[A-Z0-9*]{9}",
              "example": "NCE1A08AA"
            },
            "queueNumber": {
              "description": "The queue number (for the action \"queue\" only)",
              "type": "integer",
              "example": 9
            },
            "queueCategory": {
              "description": "The queue category (for the action \"queue\" only)",
              "type": "integer",
              "example": 10
            },
            "freetext": {
              "description": "Free text of the ticketing arrangement",
              "type": "string",
              "pattern": ".{1,14}"
            },
            "travelerIds": {
              "type": "array",
              "description": "A list of travelers associated to this ticketing arrangement. If not specified, the ticketing arrangement applies to all travelers",
              "items": {
                "type": "string",
                "pattern": "[a-zA-Z0-9-]{1,20}"
              }
            },
            "flightIds": {
              "type": "array",
              "description": "A list of flight segments associated to this ticketing arrangement. If not specified, the ticketing arrangement applies to all flight segments",
              "items": {
                "type": "string",
                "pattern": "[a-zA-Z0-9-]{1,20}"
              }
            }
          }
        }
      ],
      "x-api-ref": "TicketingArrangement"
    },
    "TicketingArrangementsListReply": {
      "type": "object",
      "description": "Reply containing a list of ticketing arrangements.",
      "allOf": [
        {
          "$ref": "#/definitions/CommonReply"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "type": "array",
              "description": "List of ticketing arrangements",
              "items": {
                "$ref": "#/definitions/TicketingArrangement"
              }
            }
          }
        }
      ],
      "x-api-ref": "TicketingArrangementsListReply"
    },
    "TravelDocumentsRequest": {
      "type": "object",
      "description": "Input to create travel documents for an order",
      "properties": {
        "notifications": {
          "type": "array",
          "description": "Notifications to be processed after creating travel documents for this order. Only in case they are specified in the request.",
          "items": {
            "$ref": "#/definitions/NotificationRequest"
          }
        },
        "travelerIds": {
          "description": "List of traveler ids (part of the Order) for which the travel documents will be issued. This input enables partial issuance. An error will be returned and no other travel-document will be issued in the following cases: - if the input array is empty; - if at least one traveler part of input has already been issued; - if at least one id is not valid (i.e., it is not associated to any traveler in the Order).",
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "[a-zA-Z0-9-]{1,20}"
          }
        },
        "userNotifications": {
          "type": "array",
          "description": "User-notifications to be sent after the successful issuance of the order (driven by airline configuration).\nNo specific logic is done if some 'travelerIds' are also provided in the request: email(s) will be triggered  according to association(s) specified in this userNotifications section, whatever the 'travelerIds' provided. It's up to the API user to ensure consistency between email addresses/contactIds and 'travelerIds'.",
          "items": {
            "$ref": "#/definitions/UserNotificationRequest"
          }
        }
      },
      "x-api-ref": "TravelDocumentsRequest"
    },
    "VoucherPaymentRequest": {
      "type": "object",
      "description": "The payment request for the voucher creation.\nA payment request contains:\n- the payment method to use for the payment\n- the amount and currency to be paid using that method\n\nToday, only PaymentCard and PaymentReferenceId are supported.\nIf PaymentCard is used, Amount must be specified.\nIf PaymentReferenceId is used, Amount must not be specified.\n",
      "properties": {
        "paymentMethod": {
          "description": "PaymentMethod used for this part of the payment. Can be optional in case a voucher with no initial amount needs be requested.",
          "$ref": "#/definitions/PaymentMethod"
        },
        "amount": {
          "description": "Amount to be paid for this part of the payment. If value is 0, no paymentMethod is needed.",
          "$ref": "#/definitions/Amount"
        }
      },
      "x-api-ref": "VoucherPaymentRequest"
    },
    "VoucherPostRequest": {
      "type": "object",
      "description": "Object used to specify the information needed to create a voucher.\n",
      "required": [
        "category",
        "paymentRequests"
      ],
      "properties": {
        "category": {
          "type": "string",
          "pattern": "[a-zA-Z0-9 -_]+",
          "description": "The category under which the voucher is applying"
        },
        "subCategory": {
          "type": "string",
          "pattern": "[a-zA-Z0-9 -_]+",
          "description": "A more detailed description on the category of the voucher"
        },
        "verificationCode": {
          "type": "string",
          "format": "[0-9]{6}",
          "description": "A code associated to the voucher. After the voucher creation, this code will be needed for all actions on it (retrieve, usage...). Without verificationCode, the voucher will accessible to anyone who has its id."
        },
        "paymentRequests": {
          "$ref": "#/definitions/VoucherPaymentRequest",
          "description": "The payment method to use for the voucher creation.\nA payment request contains:\n- the payment method to use for the payment\n- the amount and currency to be paid using that method\nToday, only credit cards and invoices are supported.\n"
        },
        "restrictions": {
          "$ref": "#/definitions/VoucherRestrictions",
          "description": "Restrictions for the usage of the voucher. If not provided, no restriction will be applied."
        }
      },
      "x-api-ref": "VoucherPostRequest"
    },
    "VoucherTopUpRequest": {
      "type": "object",
      "description": "Object used to specify the information needed to top-up on a voucher.\n",
      "required": [
        "paymentRequests"
      ],
      "properties": {
        "verificationCode": {
          "type": "string",
          "format": "[0-9]{6}",
          "description": "A code associated to the voucher (if provided at voucher creation)."
        },
        "paymentRequests": {
          "$ref": "#/definitions/VoucherPaymentRequest",
          "description": "The payment method to use for the voucher top-up.\nA payment request contains:\n- the payment method to use for the payment\n- the amount and currency to be paid using that method\nToday, only credit cards are supported.\nIn order to update the voucher, both amount and payment method are mandatory.\n"
        }
      },
      "x-api-ref": "VoucherTopUpRequest"
    }
  }
}